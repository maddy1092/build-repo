System.register(["single-spa"], function(__WEBPACK_DYNAMIC_EXPORT__) {
	var __WEBPACK_EXTERNAL_MODULE_single_spa__;
	return {
		setters: [
			function(module) {
				__WEBPACK_EXTERNAL_MODULE_single_spa__ = module;
			}
		],
		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ottu-mf-root-config.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/backgroundtab.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/backgroundtab.js ***!
  \****************************************************************************/
/*! exports provided: registerBackgroundTabDetection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerBackgroundTabDetection", function() { return registerBackgroundTabDetection; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");




/**
 * Add a listener that cancels and finishes a transaction when the global
 * document is hidden.
 */
function registerBackgroundTabDetection() {
  if (_types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"] && _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].document) {
    _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].document.addEventListener('visibilitychange', () => {
      const activeTransaction = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"])() ;
      if (_types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].document.hidden && activeTransaction) {
        const statusType = 'cancelled';

        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,
          );
        // We should not set status if it is already set, this prevent important statuses like
        // error or data loss from being overwritten on transaction.
        if (!activeTransaction.status) {
          activeTransaction.setStatus(statusType);
        }
        activeTransaction.setTag('visibilitychange', 'document.hidden');
        activeTransaction.finish();
      }
    });
  } else {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('[Tracing] Could not set up background tab detection due to lack of global document');
  }
}


//# sourceMappingURL=backgroundtab.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/browsertracing.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/browsertracing.js ***!
  \*****************************************************************************/
/*! exports provided: BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, getMetaContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BROWSER_TRACING_INTEGRATION_ID", function() { return BROWSER_TRACING_INTEGRATION_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserTracing", function() { return BrowserTracing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMetaContent", function() { return getMetaContent; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _backgroundtab_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backgroundtab.js */ "./node_modules/@sentry-internal/tracing/esm/browser/backgroundtab.js");
/* harmony import */ var _metrics_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./metrics/index.js */ "./node_modules/@sentry-internal/tracing/esm/browser/metrics/index.js");
/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request.js */ "./node_modules/@sentry-internal/tracing/esm/browser/request.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./router.js */ "./node_modules/@sentry-internal/tracing/esm/browser/router.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");








const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';

/** Options for Browser Tracing integration */

const DEFAULT_BROWSER_TRACING_OPTIONS = {
  ..._sentry_core__WEBPACK_IMPORTED_MODULE_0__["TRACING_DEFAULTS"],
  markBackgroundTransactions: true,
  routingInstrumentation: _router_js__WEBPACK_IMPORTED_MODULE_5__["instrumentRoutingWithDefaults"],
  startTransactionOnLocationChange: true,
  startTransactionOnPageLoad: true,
  enableLongTask: true,
  _experiments: {},
  ..._request_js__WEBPACK_IMPORTED_MODULE_4__["defaultRequestInstrumentationOptions"],
};

/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 */
class BrowserTracing  {
  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented
  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.
  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all
  // integrations.

  /** Browser Tracing integration options */

  /**
   * @inheritDoc
   */
   __init() {this.name = BROWSER_TRACING_INTEGRATION_ID;}

   constructor(_options) {BrowserTracing.prototype.__init.call(this);
    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["addTracingExtensions"])();

    this.options = {
      ...DEFAULT_BROWSER_TRACING_OPTIONS,
      ..._options,
    };

    // Special case: enableLongTask can be set in _experiments
    // TODO (v8): Remove this in v8
    if (this.options._experiments.enableLongTask !== undefined) {
      this.options.enableLongTask = this.options._experiments.enableLongTask;
    }

    // TODO (v8): remove this block after tracingOrigins is removed
    // Set tracePropagationTargets to tracingOrigins if specified by the user
    // In case both are specified, tracePropagationTargets takes precedence
    // eslint-disable-next-line deprecation/deprecation
    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {
      // eslint-disable-next-line deprecation/deprecation
      this.options.tracePropagationTargets = _options.tracingOrigins;
    }

    this._collectWebVitals = Object(_metrics_index_js__WEBPACK_IMPORTED_MODULE_3__["startTrackingWebVitals"])();
    if (this.options.enableLongTask) {
      Object(_metrics_index_js__WEBPACK_IMPORTED_MODULE_3__["startTrackingLongTasks"])();
    }
    if (this.options._experiments.enableInteractions) {
      Object(_metrics_index_js__WEBPACK_IMPORTED_MODULE_3__["startTrackingInteractions"])();
    }
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    this._getCurrentHub = getCurrentHub;

    const {
      routingInstrumentation: instrumentRouting,
      startTransactionOnLocationChange,
      startTransactionOnPageLoad,
      markBackgroundTransactions,
      traceFetch,
      traceXHR,
      tracePropagationTargets,
      shouldCreateSpanForRequest,
      _experiments,
    } = this.options;

    instrumentRouting(
      (context) => {
        const transaction = this._createRouteTransaction(context);

        this.options._experiments.onStartRouteTransaction &&
          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);

        return transaction;
      },
      startTransactionOnPageLoad,
      startTransactionOnLocationChange,
    );

    if (markBackgroundTransactions) {
      Object(_backgroundtab_js__WEBPACK_IMPORTED_MODULE_2__["registerBackgroundTabDetection"])();
    }

    if (_experiments.enableInteractions) {
      this._registerInteractionListener();
    }

    Object(_request_js__WEBPACK_IMPORTED_MODULE_4__["instrumentOutgoingRequests"])({
      traceFetch,
      traceXHR,
      tracePropagationTargets,
      shouldCreateSpanForRequest,
    });
  }

  /** Create routing idle transaction. */
   _createRouteTransaction(context) {
    if (!this._getCurrentHub) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);
      return undefined;
    }

    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;

    const isPageloadTransaction = context.op === 'pageload';

    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;
    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;

    const traceParentData = sentryTraceMetaTagValue ? Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["extractTraceparentData"])(sentryTraceMetaTagValue) : undefined;
    const dynamicSamplingContext = baggageMetaTagValue
      ? Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["baggageHeaderToDynamicSamplingContext"])(baggageMetaTagValue)
      : undefined;

    const expandedContext = {
      ...context,
      ...traceParentData,
      metadata: {
        ...context.metadata,
        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,
      },
      trimEnd: true,
    };

    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;

    // For backwards compatibility reasons, beforeNavigate can return undefined to "drop" the transaction (prevent it
    // from being sent to Sentry).
    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;

    // If `beforeNavigate` set a custom name, record that fact
    finalContext.metadata =
      finalContext.name !== expandedContext.name
        ? { ...finalContext.metadata, source: 'custom' }
        : finalContext.metadata;

    this._latestRouteName = finalContext.name;
    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;

    if (finalContext.sampled === false) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);
    }

    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Tracing] Starting ${finalContext.op} transaction on scope`);

    const hub = this._getCurrentHub();
    const { location } = _types_js__WEBPACK_IMPORTED_MODULE_6__["WINDOW"];

    const idleTransaction = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["startIdleTransaction"])(
      hub,
      finalContext,
      idleTimeout,
      finalTimeout,
      true,
      { location }, // for use in the tracesSampler
      heartbeatInterval,
    );
    idleTransaction.registerBeforeFinishCallback(transaction => {
      this._collectWebVitals();
      Object(_metrics_index_js__WEBPACK_IMPORTED_MODULE_3__["addPerformanceEntries"])(transaction);
    });

    return idleTransaction ;
  }

  /** Start listener for interaction transactions */
   _registerInteractionListener() {
    let inflightInteractionTransaction;
    const registerInteractionTransaction = () => {
      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;
      const op = 'ui.action.click';

      const currentTransaction = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"])();
      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {
        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(
            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,
          );
        return undefined;
      }

      if (inflightInteractionTransaction) {
        inflightInteractionTransaction.setFinishReason('interactionInterrupted');
        inflightInteractionTransaction.finish();
        inflightInteractionTransaction = undefined;
      }

      if (!this._getCurrentHub) {
        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);
        return undefined;
      }

      if (!this._latestRouteName) {
        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);
        return undefined;
      }

      const hub = this._getCurrentHub();
      const { location } = _types_js__WEBPACK_IMPORTED_MODULE_6__["WINDOW"];

      const context = {
        name: this._latestRouteName,
        op,
        trimEnd: true,
        metadata: {
          source: this._latestRouteSource || 'url',
        },
      };

      inflightInteractionTransaction = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["startIdleTransaction"])(
        hub,
        context,
        idleTimeout,
        finalTimeout,
        true,
        { location }, // for use in the tracesSampler
        heartbeatInterval,
      );
    };

    ['click'].forEach(type => {
      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });
    });
  }
}

/** Returns the value of a meta tag */
function getMetaContent(metaName) {
  // Can't specify generic to `getDomElement` because tracing can be used
  // in a variety of environments, have to disable `no-unsafe-member-access`
  // as a result.
  const metaTag = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getDomElement"])(`meta[name=${metaName}]`);
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return metaTag ? metaTag.getAttribute('content') : null;
}


//# sourceMappingURL=browsertracing.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/metrics/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/metrics/index.js ***!
  \****************************************************************************/
/*! exports provided: _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingInteractions, startTrackingLongTasks, startTrackingWebVitals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_addMeasureSpans", function() { return _addMeasureSpans; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_addResourceSpans", function() { return _addResourceSpans; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addPerformanceEntries", function() { return addPerformanceEntries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTrackingInteractions", function() { return startTrackingInteractions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTrackingLongTasks", function() { return startTrackingLongTasks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTrackingWebVitals", function() { return startTrackingWebVitals; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");
/* harmony import */ var _web_vitals_getCLS_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../web-vitals/getCLS.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getCLS.js");
/* harmony import */ var _web_vitals_getFID_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../web-vitals/getFID.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getFID.js");
/* harmony import */ var _web_vitals_getLCP_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../web-vitals/getLCP.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getLCP.js");
/* harmony import */ var _web_vitals_lib_getVisibilityWatcher_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../web-vitals/lib/getVisibilityWatcher.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js");
/* harmony import */ var _web_vitals_lib_observe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../web-vitals/lib/observe.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@sentry-internal/tracing/esm/browser/metrics/utils.js");










/**
 * Converts from milliseconds to seconds
 * @param time time in ms
 */
function msToSec(time) {
  return time / 1000;
}

function getBrowserPerformanceAPI() {
  return _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"] && _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].addEventListener && _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].performance;
}

let _performanceCursor = 0;

let _measurements = {};
let _lcpEntry;
let _clsEntry;

/**
 * Start tracking web vitals
 *
 * @returns A function that forces web vitals collection
 */
function startTrackingWebVitals() {
  const performance = getBrowserPerformanceAPI();
  if (performance && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"]) {
    if (performance.mark) {
      _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].performance.mark('sentry-tracing-init');
    }
    _trackFID();
    const clsCallback = _trackCLS();
    const lcpCallback = _trackLCP();

    return () => {
      if (clsCallback) {
        clsCallback();
      }
      if (lcpCallback) {
        lcpCallback();
      }
    };
  }

  return () => undefined;
}

/**
 * Start tracking long tasks.
 */
function startTrackingLongTasks() {
  const entryHandler = (entries) => {
    for (const entry of entries) {
      const transaction = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"])() ;
      if (!transaction) {
        return;
      }
      const startTime = msToSec((_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"] ) + entry.startTime);
      const duration = msToSec(entry.duration);

      transaction.startChild({
        description: 'Main UI thread blocked',
        op: 'ui.long-task',
        startTimestamp: startTime,
        endTimestamp: startTime + duration,
      });
    }
  };

  Object(_web_vitals_lib_observe_js__WEBPACK_IMPORTED_MODULE_7__["observe"])('longtask', entryHandler);
}

/**
 * Start tracking interaction events.
 */
function startTrackingInteractions() {
  const entryHandler = (entries) => {
    for (const entry of entries) {
      const transaction = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"])() ;
      if (!transaction) {
        return;
      }

      if (entry.name === 'click') {
        const startTime = msToSec((_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"] ) + entry.startTime);
        const duration = msToSec(entry.duration);

        transaction.startChild({
          description: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["htmlTreeAsString"])(entry.target),
          op: `ui.interaction.${entry.name}`,
          startTimestamp: startTime,
          endTimestamp: startTime + duration,
        });
      }
    }
  };

  Object(_web_vitals_lib_observe_js__WEBPACK_IMPORTED_MODULE_7__["observe"])('event', entryHandler, { durationThreshold: 0 });
}

/** Starts tracking the Cumulative Layout Shift on the current page. */
function _trackCLS() {
  // See:
  // https://web.dev/evolving-cls/
  // https://web.dev/cls-web-tooling/
  return Object(_web_vitals_getCLS_js__WEBPACK_IMPORTED_MODULE_3__["onCLS"])(metric => {
    const entry = metric.entries.pop();
    if (!entry) {
      return;
    }

    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding CLS');
    _measurements['cls'] = { value: metric.value, unit: '' };
    _clsEntry = entry ;
  });
}

/** Starts tracking the Largest Contentful Paint on the current page. */
function _trackLCP() {
  return Object(_web_vitals_getLCP_js__WEBPACK_IMPORTED_MODULE_5__["onLCP"])(metric => {
    const entry = metric.entries.pop();
    if (!entry) {
      return;
    }

    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding LCP');
    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };
    _lcpEntry = entry ;
  });
}

/** Starts tracking the First Input Delay on the current page. */
function _trackFID() {
  Object(_web_vitals_getFID_js__WEBPACK_IMPORTED_MODULE_4__["onFID"])(metric => {
    const entry = metric.entries.pop();
    if (!entry) {
      return;
    }

    const timeOrigin = msToSec(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"] );
    const startTime = msToSec(entry.startTime);
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding FID');
    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };
    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };
  });
}

/** Add performance related spans to a transaction */
function addPerformanceEntries(transaction) {
  const performance = getBrowserPerformanceAPI();
  if (!performance || !_types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].performance.getEntries || !_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"]) {
    // Gatekeeper if performance API not available
    return;
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Tracing] Adding & adjusting spans using Performance API');
  const timeOrigin = msToSec(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"]);

  const performanceEntries = performance.getEntries();

  let responseStartTimestamp;
  let requestStartTimestamp;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  performanceEntries.slice(_performanceCursor).forEach((entry) => {
    const startTime = msToSec(entry.startTime);
    const duration = msToSec(entry.duration);

    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {
      return;
    }

    switch (entry.entryType) {
      case 'navigation': {
        _addNavigationSpans(transaction, entry, timeOrigin);
        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);
        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);
        break;
      }
      case 'mark':
      case 'paint':
      case 'measure': {
        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);

        // capture web vitals
        const firstHidden = Object(_web_vitals_lib_getVisibilityWatcher_js__WEBPACK_IMPORTED_MODULE_6__["getVisibilityWatcher"])();
        // Only report if the page wasn't hidden prior to the web vital.
        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;

        if (entry.name === 'first-paint' && shouldRecord) {
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding FP');
          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };
        }
        if (entry.name === 'first-contentful-paint' && shouldRecord) {
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding FCP');
          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };
        }
        break;
      }
      case 'resource': {
        const resourceName = (entry.name ).replace(_types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].location.origin, '');
        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);
        break;
      }
      // Ignore other entry types.
    }
  });

  _performanceCursor = Math.max(performanceEntries.length - 1, 0);

  _trackNavigator(transaction);

  // Measurements are only available for pageload transactions
  if (transaction.op === 'pageload') {
    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the
    // start of the response in milliseconds
    if (typeof responseStartTimestamp === 'number') {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding TTFB');
      _measurements['ttfb'] = {
        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,
        unit: 'millisecond',
      };

      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {
        // Capture the time spent making the request and receiving the first byte of the response.
        // This is the time between the start of the request and the start of the response in milliseconds.
        _measurements['ttfb.requestTime'] = {
          value: (responseStartTimestamp - requestStartTimestamp) * 1000,
          unit: 'millisecond',
        };
      }
    }

    ['fcp', 'fp', 'lcp'].forEach(name => {
      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {
        return;
      }
      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.
      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need
      // to be adjusted to be relative to transaction.startTimestamp.
      const oldValue = _measurements[name].value;
      const measurementTimestamp = timeOrigin + msToSec(oldValue);

      // normalizedValue should be in milliseconds
      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);
      const delta = normalizedValue - oldValue;

      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);
      _measurements[name].value = normalizedValue;
    });

    const fidMark = _measurements['mark.fid'];
    if (fidMark && _measurements['fid']) {
      // create span for FID
      Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["_startChild"])(transaction, {
        description: 'first input delay',
        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),
        op: 'ui.action',
        startTimestamp: fidMark.value,
      });

      // Delete mark.fid as we don't want it to be part of final payload
      delete _measurements['mark.fid'];
    }

    // If FCP is not recorded we should not record the cls value
    // according to the new definition of CLS.
    if (!('fcp' in _measurements)) {
      delete _measurements.cls;
    }

    Object.keys(_measurements).forEach(measurementName => {
      transaction.setMeasurement(
        measurementName,
        _measurements[measurementName].value,
        _measurements[measurementName].unit,
      );
    });

    _tagMetricInfo(transaction);
  }

  _lcpEntry = undefined;
  _clsEntry = undefined;
  _measurements = {};
}

/** Create measure related spans */
function _addMeasureSpans(
  transaction,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  entry,
  startTime,
  duration,
  timeOrigin,
) {
  const measureStartTimestamp = timeOrigin + startTime;
  const measureEndTimestamp = measureStartTimestamp + duration;

  Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["_startChild"])(transaction, {
    description: entry.name ,
    endTimestamp: measureEndTimestamp,
    op: entry.entryType ,
    startTimestamp: measureStartTimestamp,
  });

  return measureStartTimestamp;
}

/** Instrument navigation entries */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _addNavigationSpans(transaction, entry, timeOrigin) {
  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {
    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);
  });
  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');
  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');
  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');
  _addRequest(transaction, entry, timeOrigin);
}

/** Create performance navigation related spans */
function _addPerformanceNavigationTiming(
  transaction,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  entry,
  event,
  timeOrigin,
  description,
  eventEnd,
) {
  const end = eventEnd ? (entry[eventEnd] ) : (entry[`${event}End`] );
  const start = entry[`${event}Start`] ;
  if (!start || !end) {
    return;
  }
  Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["_startChild"])(transaction, {
    op: 'browser',
    description: description || event,
    startTimestamp: timeOrigin + msToSec(start),
    endTimestamp: timeOrigin + msToSec(end),
  });
}

/** Create request and response related spans */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _addRequest(transaction, entry, timeOrigin) {
  Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["_startChild"])(transaction, {
    op: 'browser',
    description: 'request',
    startTimestamp: timeOrigin + msToSec(entry.requestStart ),
    endTimestamp: timeOrigin + msToSec(entry.responseEnd ),
  });

  Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["_startChild"])(transaction, {
    op: 'browser',
    description: 'response',
    startTimestamp: timeOrigin + msToSec(entry.responseStart ),
    endTimestamp: timeOrigin + msToSec(entry.responseEnd ),
  });
}

/** Create resource-related spans */
function _addResourceSpans(
  transaction,
  entry,
  resourceName,
  startTime,
  duration,
  timeOrigin,
) {
  // we already instrument based on fetch and xhr, so we don't need to
  // duplicate spans here.
  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {
    return;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const data = {};
  if ('transferSize' in entry) {
    data['Transfer Size'] = entry.transferSize;
  }
  if ('encodedBodySize' in entry) {
    data['Encoded Body Size'] = entry.encodedBodySize;
  }
  if ('decodedBodySize' in entry) {
    data['Decoded Body Size'] = entry.decodedBodySize;
  }
  if ('renderBlockingStatus' in entry) {
    data['resource.render_blocking_status'] = entry.renderBlockingStatus;
  }

  const startTimestamp = timeOrigin + startTime;
  const endTimestamp = startTimestamp + duration;

  Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["_startChild"])(transaction, {
    description: resourceName,
    endTimestamp,
    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',
    startTimestamp,
    data,
  });
}

/**
 * Capture the information of the user agent.
 */
function _trackNavigator(transaction) {
  const navigator = _types_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator ;
  if (!navigator) {
    return;
  }

  // track network connectivity
  const connection = navigator.connection;
  if (connection) {
    if (connection.effectiveType) {
      transaction.setTag('effectiveConnectionType', connection.effectiveType);
    }

    if (connection.type) {
      transaction.setTag('connectionType', connection.type);
    }

    if (Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["isMeasurementValue"])(connection.rtt)) {
      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };
    }
  }

  if (Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["isMeasurementValue"])(navigator.deviceMemory)) {
    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);
  }

  if (Object(_utils_js__WEBPACK_IMPORTED_MODULE_8__["isMeasurementValue"])(navigator.hardwareConcurrency)) {
    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));
  }
}

/** Add LCP / CLS data to transaction to allow debugging */
function _tagMetricInfo(transaction) {
  if (_lcpEntry) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding LCP Data');

    // Capture Properties of the LCP element that contributes to the LCP.

    if (_lcpEntry.element) {
      transaction.setTag('lcp.element', Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["htmlTreeAsString"])(_lcpEntry.element));
    }

    if (_lcpEntry.id) {
      transaction.setTag('lcp.id', _lcpEntry.id);
    }

    if (_lcpEntry.url) {
      // Trim URL to the first 200 characters.
      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));
    }

    transaction.setTag('lcp.size', _lcpEntry.size);
  }

  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift
  if (_clsEntry && _clsEntry.sources) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Measurements] Adding CLS Data');
    _clsEntry.sources.forEach((source, index) =>
      transaction.setTag(`cls.source.${index + 1}`, Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["htmlTreeAsString"])(source.node)),
    );
  }
}


//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/metrics/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/metrics/utils.js ***!
  \****************************************************************************/
/*! exports provided: _startChild, isMeasurementValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_startChild", function() { return _startChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMeasurementValue", function() { return isMeasurementValue; });
/**
 * Checks if a given value is a valid measurement value.
 */
function isMeasurementValue(value) {
  return typeof value === 'number' && isFinite(value);
}

/**
 * Helper function to start child on transactions. This function will make sure that the transaction will
 * use the start timestamp of the created child span if it is earlier than the transactions actual
 * start timestamp.
 */
function _startChild(transaction, { startTimestamp, ...ctx }) {
  if (startTimestamp && transaction.startTimestamp > startTimestamp) {
    transaction.startTimestamp = startTimestamp;
  }

  return transaction.startChild({
    startTimestamp,
    ...ctx,
  });
}


//# sourceMappingURL=utils.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/request.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/request.js ***!
  \**********************************************************************/
/*! exports provided: DEFAULT_TRACE_PROPAGATION_TARGETS, addTracingHeadersToFetchRequest, defaultRequestInstrumentationOptions, fetchCallback, instrumentOutgoingRequests, shouldAttachHeaders, xhrCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_TRACE_PROPAGATION_TARGETS", function() { return DEFAULT_TRACE_PROPAGATION_TARGETS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTracingHeadersToFetchRequest", function() { return addTracingHeadersToFetchRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultRequestInstrumentationOptions", function() { return defaultRequestInstrumentationOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchCallback", function() { return fetchCallback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "instrumentOutgoingRequests", function() { return instrumentOutgoingRequests; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldAttachHeaders", function() { return shouldAttachHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xhrCallback", function() { return xhrCallback; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



/* eslint-disable max-lines */

const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\//];

/** Options for Request Instrumentation */

const defaultRequestInstrumentationOptions = {
  traceFetch: true,
  traceXHR: true,
  // TODO (v8): Remove this property
  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,
  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,
};

/** Registers span creators for xhr and fetch requests  */
function instrumentOutgoingRequests(_options) {
  // eslint-disable-next-line deprecation/deprecation
  const { traceFetch, traceXHR, tracePropagationTargets, tracingOrigins, shouldCreateSpanForRequest } = {
    traceFetch: defaultRequestInstrumentationOptions.traceFetch,
    traceXHR: defaultRequestInstrumentationOptions.traceXHR,
    ..._options,
  };

  const shouldCreateSpan =
    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_) => true;

  // TODO(v8) Remove tracingOrigins here
  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported
  // and we don't want to break the API. We can remove it in v8.
  const shouldAttachHeadersWithTargets = (url) =>
    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);

  const spans = {};

  if (traceFetch) {
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('fetch', (handlerData) => {
      fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);
    });
  }

  if (traceXHR) {
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('xhr', (handlerData) => {
      xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);
    });
  }
}

/**
 * A function that determines whether to attach tracing headers to a request.
 * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.
 * We only export this fuction for testing purposes.
 */
function shouldAttachHeaders(url, tracePropagationTargets) {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["stringMatchesSomePattern"])(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);
}

/**
 * Create and track fetch request spans
 */
function fetchCallback(
  handlerData,
  shouldCreateSpan,
  shouldAttachHeaders,
  spans,
) {
  if (!Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["hasTracingEnabled"])() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {
    return;
  }

  if (handlerData.endTimestamp) {
    const spanId = handlerData.fetchData.__span;
    if (!spanId) return;

    const span = spans[spanId];
    if (span) {
      if (handlerData.response) {
        // TODO (kmclb) remove this once types PR goes through
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        span.setHttpStatus(handlerData.response.status);
      } else if (handlerData.error) {
        span.setStatus('internal_error');
      }
      span.finish();

      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete spans[spanId];
    }
    return;
  }

  const currentScope = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getScope();
  const currentSpan = currentScope && currentScope.getSpan();
  const activeTransaction = currentSpan && currentSpan.transaction;

  if (currentSpan && activeTransaction) {
    const span = currentSpan.startChild({
      data: {
        ...handlerData.fetchData,
        type: 'fetch',
      },
      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,
      op: 'http.client',
    });

    handlerData.fetchData.__span = span.spanId;
    spans[span.spanId] = span;

    const request = handlerData.args[0];

    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.
    handlerData.args[1] = handlerData.args[1] || {};

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const options = handlerData.args[1];

    if (shouldAttachHeaders(handlerData.fetchData.url)) {
      options.headers = addTracingHeadersToFetchRequest(
        request,
        activeTransaction.getDynamicSamplingContext(),
        span,
        options,
      );
    }
  }
}

/**
 * Adds sentry-trace and baggage headers to the various forms of fetch headers
 */
function addTracingHeadersToFetchRequest(
  request, // unknown is actually type Request but we can't export DOM types from this package,
  dynamicSamplingContext,
  span,
  options

,
) {
  const sentryBaggageHeader = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dynamicSamplingContextToSentryBaggageHeader"])(dynamicSamplingContext);
  const sentryTraceHeader = span.toTraceparent();

  const headers =
    typeof Request !== 'undefined' && Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isInstanceOf"])(request, Request) ? (request ).headers : options.headers;

  if (!headers) {
    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };
  } else if (typeof Headers !== 'undefined' && Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isInstanceOf"])(headers, Headers)) {
    const newHeaders = new Headers(headers );

    newHeaders.append('sentry-trace', sentryTraceHeader);

    if (sentryBaggageHeader) {
      // If the same header is appended multiple times the browser will merge the values into a single request header.
      // Its therefore safe to simply push a "baggage" entry, even though there might already be another baggage header.
      newHeaders.append(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["BAGGAGE_HEADER_NAME"], sentryBaggageHeader);
    }

    return newHeaders ;
  } else if (Array.isArray(headers)) {
    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];

    if (sentryBaggageHeader) {
      // If there are multiple entries with the same key, the browser will merge the values into a single request header.
      // Its therefore safe to simply push a "baggage" entry, even though there might already be another baggage header.
      newHeaders.push([_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["BAGGAGE_HEADER_NAME"], sentryBaggageHeader]);
    }

    return newHeaders ;
  } else {
    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;
    const newBaggageHeaders = [];

    if (Array.isArray(existingBaggageHeader)) {
      newBaggageHeaders.push(...existingBaggageHeader);
    } else if (existingBaggageHeader) {
      newBaggageHeaders.push(existingBaggageHeader);
    }

    if (sentryBaggageHeader) {
      newBaggageHeaders.push(sentryBaggageHeader);
    }

    return {
      ...(headers ),
      'sentry-trace': sentryTraceHeader,
      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,
    };
  }
}

/**
 * Create and track xhr request spans
 */
function xhrCallback(
  handlerData,
  shouldCreateSpan,
  shouldAttachHeaders,
  spans,
) {
  const xhr = handlerData.xhr;
  const sentryXhrData = xhr && xhr[_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["SENTRY_XHR_DATA_KEY"]];

  if (
    !Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["hasTracingEnabled"])() ||
    (xhr && xhr.__sentry_own_request__) ||
    !(xhr && sentryXhrData && shouldCreateSpan(sentryXhrData.url))
  ) {
    return;
  }

  // check first if the request has finished and is tracked by an existing span which should now end
  if (handlerData.endTimestamp) {
    const spanId = xhr.__sentry_xhr_span_id__;
    if (!spanId) return;

    const span = spans[spanId];
    if (span) {
      span.setHttpStatus(sentryXhrData.status_code);
      span.finish();

      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete spans[spanId];
    }
    return;
  }

  const currentScope = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getScope();
  const currentSpan = currentScope && currentScope.getSpan();
  const activeTransaction = currentSpan && currentSpan.transaction;

  if (currentSpan && activeTransaction) {
    const span = currentSpan.startChild({
      data: {
        ...sentryXhrData.data,
        type: 'xhr',
        method: sentryXhrData.method,
        url: sentryXhrData.url,
      },
      description: `${sentryXhrData.method} ${sentryXhrData.url}`,
      op: 'http.client',
    });

    xhr.__sentry_xhr_span_id__ = span.spanId;
    spans[xhr.__sentry_xhr_span_id__] = span;

    if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {
      try {
        xhr.setRequestHeader('sentry-trace', span.toTraceparent());

        const dynamicSamplingContext = activeTransaction.getDynamicSamplingContext();
        const sentryBaggageHeader = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dynamicSamplingContextToSentryBaggageHeader"])(dynamicSamplingContext);

        if (sentryBaggageHeader) {
          // From MDN: "If this method is called several times with the same header, the values are merged into one single request header."
          // We can therefore simply set a baggage header without checking what was there before
          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader
          xhr.setRequestHeader(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["BAGGAGE_HEADER_NAME"], sentryBaggageHeader);
        }
      } catch (_) {
        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.
      }
    }
  }
}


//# sourceMappingURL=request.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/router.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/router.js ***!
  \*********************************************************************/
/*! exports provided: instrumentRoutingWithDefaults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "instrumentRoutingWithDefaults", function() { return instrumentRoutingWithDefaults; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");



/**
 * Default function implementing pageload and navigation transactions
 */
function instrumentRoutingWithDefaults(
  customStartTransaction,
  startTransactionOnPageLoad = true,
  startTransactionOnLocationChange = true,
) {
  if (!_types_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"] || !_types_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('Could not initialize routing instrumentation due to invalid location');
    return;
  }

  let startingUrl = _types_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location.href;

  let activeTransaction;
  if (startTransactionOnPageLoad) {
    activeTransaction = customStartTransaction({
      name: _types_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location.pathname,
      // pageload should always start at timeOrigin (and needs to be in s, not ms)
      startTimestamp: _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["browserPerformanceTimeOrigin"] ? _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["browserPerformanceTimeOrigin"] / 1000 : undefined,
      op: 'pageload',
      metadata: { source: 'url' },
    });
  }

  if (startTransactionOnLocationChange) {
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["addInstrumentationHandler"])('history', ({ to, from }) => {
      /**
       * This early return is there to account for some cases where a navigation transaction starts right after
       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't
       * create an uneccessary navigation transaction.
       *
       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also
       * only be caused in certain development environments where the usage of a hot module reloader is causing
       * errors.
       */
      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {
        startingUrl = undefined;
        return;
      }

      if (from !== to) {
        startingUrl = undefined;
        if (activeTransaction) {
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);
          // If there's an open transaction on the scope, we need to finish it before creating an new one.
          activeTransaction.finish();
        }
        activeTransaction = customStartTransaction({
          name: _types_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location.pathname,
          op: 'navigation',
          metadata: { source: 'url' },
        });
      }
    });
  }
}


//# sourceMappingURL=router.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/types.js ***!
  \********************************************************************/
/*! exports provided: WINDOW */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WINDOW", function() { return WINDOW; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


const WINDOW = _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"] ;


//# sourceMappingURL=types.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getCLS.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getCLS.js ***!
  \********************************************************************************/
/*! exports provided: onCLS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onCLS", function() { return onCLS; });
/* harmony import */ var _lib_bindReporter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bindReporter.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js");
/* harmony import */ var _lib_initMetric_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/initMetric.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js");
/* harmony import */ var _lib_observe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/observe.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js");
/* harmony import */ var _lib_onHidden_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/onHidden.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js");





/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Calculates the [CLS](https://web.dev/cls/) value for the current page and
 * calls the `callback` function once the value is ready to be reported, along
 * with all `layout-shift` performance entries that were used in the metric
 * value calculation. The reported value is a `double` (corresponding to a
 * [layout shift score](https://web.dev/cls/#layout-shift-score)).
 *
 * If the `reportAllChanges` configuration option is set to `true`, the
 * `callback` function will be called as soon as the value is initially
 * determined as well as any time the value changes throughout the page
 * lifespan.
 *
 * _**Important:** CLS should be continually monitored for changes throughout
 * the entire lifespan of a page—including if the user returns to the page after
 * it's been hidden/backgrounded. However, since browsers often [will not fire
 * additional callbacks once the user has backgrounded a
 * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),
 * `callback` is always called when the page's visibility state changes to
 * hidden. As a result, the `callback` function might be called multiple times
 * during the same page load._
 */
const onCLS = (onReport) => {
  const metric = Object(_lib_initMetric_js__WEBPACK_IMPORTED_MODULE_1__["initMetric"])('CLS', 0);
  let report;

  let sessionValue = 0;
  let sessionEntries = [];

  // const handleEntries = (entries: Metric['entries']) => {
  const handleEntries = (entries) => {
    entries.forEach(entry => {
      // Only count layout shifts without recent user input.
      if (!entry.hadRecentInput) {
        const firstSessionEntry = sessionEntries[0];
        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];

        // If the entry occurred less than 1 second after the previous entry and
        // less than 5 seconds after the first entry in the session, include the
        // entry in the current session. Otherwise, start a new session.
        if (
          sessionValue &&
          sessionEntries.length !== 0 &&
          entry.startTime - lastSessionEntry.startTime < 1000 &&
          entry.startTime - firstSessionEntry.startTime < 5000
        ) {
          sessionValue += entry.value;
          sessionEntries.push(entry);
        } else {
          sessionValue = entry.value;
          sessionEntries = [entry];
        }

        // If the current session value is larger than the current CLS value,
        // update CLS and the entries contributing to it.
        if (sessionValue > metric.value) {
          metric.value = sessionValue;
          metric.entries = sessionEntries;
          if (report) {
            report();
          }
        }
      }
    });
  };

  const po = Object(_lib_observe_js__WEBPACK_IMPORTED_MODULE_2__["observe"])('layout-shift', handleEntries);
  if (po) {
    report = Object(_lib_bindReporter_js__WEBPACK_IMPORTED_MODULE_0__["bindReporter"])(onReport, metric);

    const stopListening = () => {
      handleEntries(po.takeRecords() );
      report(true);
    };

    Object(_lib_onHidden_js__WEBPACK_IMPORTED_MODULE_3__["onHidden"])(stopListening);

    return stopListening;
  }

  return;
};


//# sourceMappingURL=getCLS.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getFID.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getFID.js ***!
  \********************************************************************************/
/*! exports provided: onFID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onFID", function() { return onFID; });
/* harmony import */ var _lib_bindReporter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bindReporter.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js");
/* harmony import */ var _lib_getVisibilityWatcher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/getVisibilityWatcher.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js");
/* harmony import */ var _lib_initMetric_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/initMetric.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js");
/* harmony import */ var _lib_observe_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/observe.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js");
/* harmony import */ var _lib_onHidden_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/onHidden.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js");






/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Calculates the [FID](https://web.dev/fid/) value for the current page and
 * calls the `callback` function once the value is ready, along with the
 * relevant `first-input` performance entry used to determine the value. The
 * reported value is a `DOMHighResTimeStamp`.
 *
 * _**Important:** since FID is only reported after the user interacts with the
 * page, it's possible that it will not be reported for some page loads._
 */
const onFID = (onReport) => {
  const visibilityWatcher = Object(_lib_getVisibilityWatcher_js__WEBPACK_IMPORTED_MODULE_1__["getVisibilityWatcher"])();
  const metric = Object(_lib_initMetric_js__WEBPACK_IMPORTED_MODULE_2__["initMetric"])('FID');
  // eslint-disable-next-line prefer-const
  let report;

  const handleEntry = (entry) => {
    // Only report if the page wasn't hidden prior to the first input.
    if (entry.startTime < visibilityWatcher.firstHiddenTime) {
      metric.value = entry.processingStart - entry.startTime;
      metric.entries.push(entry);
      report(true);
    }
  };

  const handleEntries = (entries) => {
    (entries ).forEach(handleEntry);
  };

  const po = Object(_lib_observe_js__WEBPACK_IMPORTED_MODULE_3__["observe"])('first-input', handleEntries);
  report = Object(_lib_bindReporter_js__WEBPACK_IMPORTED_MODULE_0__["bindReporter"])(onReport, metric);

  if (po) {
    Object(_lib_onHidden_js__WEBPACK_IMPORTED_MODULE_4__["onHidden"])(() => {
      handleEntries(po.takeRecords() );
      po.disconnect();
    }, true);
  }
};


//# sourceMappingURL=getFID.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getLCP.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getLCP.js ***!
  \********************************************************************************/
/*! exports provided: onLCP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onLCP", function() { return onLCP; });
/* harmony import */ var _lib_bindReporter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bindReporter.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js");
/* harmony import */ var _lib_getActivationStart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/getActivationStart.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getActivationStart.js");
/* harmony import */ var _lib_getVisibilityWatcher_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/getVisibilityWatcher.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js");
/* harmony import */ var _lib_initMetric_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/initMetric.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js");
/* harmony import */ var _lib_observe_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/observe.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js");
/* harmony import */ var _lib_onHidden_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/onHidden.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js");







/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const reportedMetricIDs = {};

/**
 * Calculates the [LCP](https://web.dev/lcp/) value for the current page and
 * calls the `callback` function once the value is ready (along with the
 * relevant `largest-contentful-paint` performance entry used to determine the
 * value). The reported value is a `DOMHighResTimeStamp`.
 */
const onLCP = (onReport) => {
  const visibilityWatcher = Object(_lib_getVisibilityWatcher_js__WEBPACK_IMPORTED_MODULE_2__["getVisibilityWatcher"])();
  const metric = Object(_lib_initMetric_js__WEBPACK_IMPORTED_MODULE_3__["initMetric"])('LCP');
  let report;

  const handleEntries = (entries) => {
    const lastEntry = entries[entries.length - 1] ;
    if (lastEntry) {
      // The startTime attribute returns the value of the renderTime if it is
      // not 0, and the value of the loadTime otherwise. The activationStart
      // reference is used because LCP should be relative to page activation
      // rather than navigation start if the page was prerendered.
      const value = Math.max(lastEntry.startTime - Object(_lib_getActivationStart_js__WEBPACK_IMPORTED_MODULE_1__["getActivationStart"])(), 0);

      // Only report if the page wasn't hidden prior to LCP.
      if (value < visibilityWatcher.firstHiddenTime) {
        metric.value = value;
        metric.entries = [lastEntry];
        report();
      }
    }
  };

  const po = Object(_lib_observe_js__WEBPACK_IMPORTED_MODULE_4__["observe"])('largest-contentful-paint', handleEntries);

  if (po) {
    report = Object(_lib_bindReporter_js__WEBPACK_IMPORTED_MODULE_0__["bindReporter"])(onReport, metric);

    const stopListening = () => {
      if (!reportedMetricIDs[metric.id]) {
        handleEntries(po.takeRecords() );
        po.disconnect();
        reportedMetricIDs[metric.id] = true;
        report(true);
      }
    };

    // Stop listening after input. Note: while scrolling is an input that
    // stop LCP observation, it's unreliable since it can be programmatically
    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75
    ['keydown', 'click'].forEach(type => {
      addEventListener(type, stopListening, { once: true, capture: true });
    });

    Object(_lib_onHidden_js__WEBPACK_IMPORTED_MODULE_5__["onHidden"])(stopListening, true);

    return stopListening;
  }

  return;
};


//# sourceMappingURL=getLCP.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js ***!
  \******************************************************************************************/
/*! exports provided: bindReporter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindReporter", function() { return bindReporter; });
const bindReporter = (
  callback,
  metric,
  reportAllChanges,
) => {
  let prevValue;
  let delta;
  return (forceReport) => {
    if (metric.value >= 0) {
      if (forceReport || reportAllChanges) {
        delta = metric.value - (prevValue || 0);

        // Report the metric if there's a non-zero delta or if no previous
        // value exists (which can happen in the case of the document becoming
        // hidden when the metric value is 0).
        // See: https://github.com/GoogleChrome/web-vitals/issues/14
        if (delta || prevValue === undefined) {
          prevValue = metric.value;
          metric.delta = delta;
          callback(metric);
        }
      }
    }
  };
};


//# sourceMappingURL=bindReporter.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/generateUniqueID.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/generateUniqueID.js ***!
  \**********************************************************************************************/
/*! exports provided: generateUniqueID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateUniqueID", function() { return generateUniqueID; });
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Performantly generate a unique, 30-char string by combining a version
 * number, the current timestamp with a 13-digit number integer.
 * @return {string}
 */
const generateUniqueID = () => {
  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;
};


//# sourceMappingURL=generateUniqueID.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getActivationStart.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getActivationStart.js ***!
  \************************************************************************************************/
/*! exports provided: getActivationStart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getActivationStart", function() { return getActivationStart; });
/* harmony import */ var _getNavigationEntry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNavigationEntry.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getNavigationEntry.js");


/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const getActivationStart = () => {
  const navEntry = Object(_getNavigationEntry_js__WEBPACK_IMPORTED_MODULE_0__["getNavigationEntry"])();
  return (navEntry && navEntry.activationStart) || 0;
};


//# sourceMappingURL=getActivationStart.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getNavigationEntry.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getNavigationEntry.js ***!
  \************************************************************************************************/
/*! exports provided: getNavigationEntry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNavigationEntry", function() { return getNavigationEntry; });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");


/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const getNavigationEntryFromPerformanceTiming = () => {
  // eslint-disable-next-line deprecation/deprecation
  const timing = _types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].performance.timing;
  // eslint-disable-next-line deprecation/deprecation
  const type = _types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].performance.navigation.type;

  const navigationEntry = {
    entryType: 'navigation',
    startTime: 0,
    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate',
  };

  for (const key in timing) {
    if (key !== 'navigationStart' && key !== 'toJSON') {
      navigationEntry[key] = Math.max((timing[key ] ) - timing.navigationStart, 0);
    }
  }
  return navigationEntry ;
};

const getNavigationEntry = () => {
  if (_types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].__WEB_VITALS_POLYFILL__) {
    return (
      _types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].performance &&
      ((performance.getEntriesByType && performance.getEntriesByType('navigation')[0]) ||
        getNavigationEntryFromPerformanceTiming())
    );
  } else {
    return _types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];
  }
};


//# sourceMappingURL=getNavigationEntry.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js ***!
  \**************************************************************************************************/
/*! exports provided: getVisibilityWatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVisibilityWatcher", function() { return getVisibilityWatcher; });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");
/* harmony import */ var _onHidden_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./onHidden.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js");



/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let firstHiddenTime = -1;

const initHiddenTime = () => {
  // If the document is hidden and not prerendering, assume it was always
  // hidden and the page was loaded in the background.
  return _types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].document.visibilityState === 'hidden' && !_types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].document.prerendering ? 0 : Infinity;
};

const trackChanges = () => {
  // Update the time if/when the document becomes hidden.
  Object(_onHidden_js__WEBPACK_IMPORTED_MODULE_1__["onHidden"])(({ timeStamp }) => {
    firstHiddenTime = timeStamp;
  }, true);
};

const getVisibilityWatcher = (

) => {
  if (firstHiddenTime < 0) {
    // If the document is hidden when this code runs, assume it was hidden
    // since navigation start. This isn't a perfect heuristic, but it's the
    // best we can do until an API is available to support querying past
    // visibilityState.
    firstHiddenTime = initHiddenTime();
    trackChanges();
  }
  return {
    get firstHiddenTime() {
      return firstHiddenTime;
    },
  };
};


//# sourceMappingURL=getVisibilityWatcher.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js ***!
  \****************************************************************************************/
/*! exports provided: initMetric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMetric", function() { return initMetric; });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");
/* harmony import */ var _generateUniqueID_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateUniqueID.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/generateUniqueID.js");
/* harmony import */ var _getActivationStart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getActivationStart.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getActivationStart.js");
/* harmony import */ var _getNavigationEntry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getNavigationEntry.js */ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getNavigationEntry.js");





/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const initMetric = (name, value) => {
  const navEntry = Object(_getNavigationEntry_js__WEBPACK_IMPORTED_MODULE_3__["getNavigationEntry"])();
  let navigationType = 'navigate';

  if (navEntry) {
    if (_types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].document.prerendering || Object(_getActivationStart_js__WEBPACK_IMPORTED_MODULE_2__["getActivationStart"])() > 0) {
      navigationType = 'prerender';
    } else {
      navigationType = navEntry.type.replace(/_/g, '-') ;
    }
  }

  return {
    name,
    value: typeof value === 'undefined' ? -1 : value,
    rating: 'good', // Will be updated if the value changes.
    delta: 0,
    entries: [],
    id: Object(_generateUniqueID_js__WEBPACK_IMPORTED_MODULE_1__["generateUniqueID"])(),
    navigationType,
  };
};


//# sourceMappingURL=initMetric.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js ***!
  \*************************************************************************************/
/*! exports provided: observe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observe", function() { return observe; });
/**
 * Takes a performance entry type and a callback function, and creates a
 * `PerformanceObserver` instance that will observe the specified entry type
 * with buffering enabled and call the callback _for each entry_.
 *
 * This function also feature-detects entry support and wraps the logic in a
 * try/catch to avoid errors in unsupporting browsers.
 */
const observe = (
  type,
  callback,
  opts,
) => {
  try {
    if (PerformanceObserver.supportedEntryTypes.includes(type)) {
      const po = new PerformanceObserver(list => {
        callback(list.getEntries() );
      });
      po.observe(
        Object.assign(
          {
            type,
            buffered: true,
          },
          opts || {},
        ) ,
      );
      return po;
    }
  } catch (e) {
    // Do nothing.
  }
  return;
};


//# sourceMappingURL=observe.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js ***!
  \**************************************************************************************/
/*! exports provided: onHidden */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onHidden", function() { return onHidden; });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types.js */ "./node_modules/@sentry-internal/tracing/esm/browser/types.js");


/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const onHidden = (cb, once) => {
  const onHiddenOrPageHide = (event) => {
    if (event.type === 'pagehide' || _types_js__WEBPACK_IMPORTED_MODULE_0__["WINDOW"].document.visibilityState === 'hidden') {
      cb(event);
      if (once) {
        removeEventListener('visibilitychange', onHiddenOrPageHide, true);
        removeEventListener('pagehide', onHiddenOrPageHide, true);
      }
    }
  };
  addEventListener('visibilitychange', onHiddenOrPageHide, true);
  // Some browsers have buggy implementations of visibilitychange,
  // so we use pagehide in addition, just to be safe.
  addEventListener('pagehide', onHiddenOrPageHide, true);
};


//# sourceMappingURL=onHidden.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/extensions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/extensions.js ***!
  \*****************************************************************/
/*! exports provided: addExtensionMethods */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addExtensionMethods", function() { return addExtensionMethods; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



/**
 * @private
 */
function _autoloadDatabaseIntegrations() {
  const carrier = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getMainCarrier"])();
  if (!carrier.__SENTRY__) {
    return;
  }

  const packageToIntegrationMapping = {
    mongodb() {
      const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dynamicRequire"])(module, './node/integrations/mongo')

;
      return new integration.Mongo();
    },
    mongoose() {
      const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dynamicRequire"])(module, './node/integrations/mongo')

;
      return new integration.Mongo();
    },
    mysql() {
      const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dynamicRequire"])(module, './node/integrations/mysql')

;
      return new integration.Mysql();
    },
    pg() {
      const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dynamicRequire"])(module, './node/integrations/postgres')

;
      return new integration.Postgres();
    },
  };

  const mappedPackages = Object.keys(packageToIntegrationMapping)
    .filter(moduleName => !!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])(moduleName))
    .map(pkg => {
      try {
        return packageToIntegrationMapping[pkg]();
      } catch (e) {
        return undefined;
      }
    })
    .filter(p => p) ;

  if (mappedPackages.length > 0) {
    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];
  }
}

/**
 * This patches the global object and injects the Tracing extensions methods
 */
function addExtensionMethods() {
  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["addTracingExtensions"])();

  // Detect and automatically load specified integrations.
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isNodeEnv"])()) {
    _autoloadDatabaseIntegrations();
  }
}


//# sourceMappingURL=extensions.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/index.js ***!
  \************************************************************/
/*! exports provided: IdleTransaction, Span, SpanStatus, Transaction, extractTraceparentData, getActiveTransaction, hasTracingEnabled, spanStatusfromHttpCode, startIdleTransaction, TRACEPARENT_REGEXP, stripUrlQueryAndFragment, Express, Postgres, Mysql, Mongo, Prisma, GraphQL, Apollo, lazyLoadedNodePerformanceMonitoringIntegrations, BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, addTracingHeadersToFetchRequest, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, addExtensionMethods */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IdleTransaction", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["IdleTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Span", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["Span"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpanStatus", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["SpanStatus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["Transaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["extractTraceparentData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getActiveTransaction", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasTracingEnabled", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["hasTracingEnabled"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spanStatusfromHttpCode", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["spanStatusfromHttpCode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startIdleTransaction", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["startIdleTransaction"]; });

/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TRACEPARENT_REGEXP", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["TRACEPARENT_REGEXP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripUrlQueryAndFragment", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["stripUrlQueryAndFragment"]; });

/* harmony import */ var _node_integrations_express_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node/integrations/express.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Express", function() { return _node_integrations_express_js__WEBPACK_IMPORTED_MODULE_2__["Express"]; });

/* harmony import */ var _node_integrations_postgres_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node/integrations/postgres.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Postgres", function() { return _node_integrations_postgres_js__WEBPACK_IMPORTED_MODULE_3__["Postgres"]; });

/* harmony import */ var _node_integrations_mysql_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node/integrations/mysql.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Mysql", function() { return _node_integrations_mysql_js__WEBPACK_IMPORTED_MODULE_4__["Mysql"]; });

/* harmony import */ var _node_integrations_mongo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node/integrations/mongo.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Mongo", function() { return _node_integrations_mongo_js__WEBPACK_IMPORTED_MODULE_5__["Mongo"]; });

/* harmony import */ var _node_integrations_prisma_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node/integrations/prisma.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prisma", function() { return _node_integrations_prisma_js__WEBPACK_IMPORTED_MODULE_6__["Prisma"]; });

/* harmony import */ var _node_integrations_graphql_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node/integrations/graphql.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GraphQL", function() { return _node_integrations_graphql_js__WEBPACK_IMPORTED_MODULE_7__["GraphQL"]; });

/* harmony import */ var _node_integrations_apollo_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node/integrations/apollo.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Apollo", function() { return _node_integrations_apollo_js__WEBPACK_IMPORTED_MODULE_8__["Apollo"]; });

/* harmony import */ var _node_integrations_lazy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node/integrations/lazy.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lazyLoadedNodePerformanceMonitoringIntegrations", function() { return _node_integrations_lazy_js__WEBPACK_IMPORTED_MODULE_9__["lazyLoadedNodePerformanceMonitoringIntegrations"]; });

/* harmony import */ var _browser_browsertracing_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./browser/browsertracing.js */ "./node_modules/@sentry-internal/tracing/esm/browser/browsertracing.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BROWSER_TRACING_INTEGRATION_ID", function() { return _browser_browsertracing_js__WEBPACK_IMPORTED_MODULE_10__["BROWSER_TRACING_INTEGRATION_ID"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserTracing", function() { return _browser_browsertracing_js__WEBPACK_IMPORTED_MODULE_10__["BrowserTracing"]; });

/* harmony import */ var _browser_request_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./browser/request.js */ "./node_modules/@sentry-internal/tracing/esm/browser/request.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addTracingHeadersToFetchRequest", function() { return _browser_request_js__WEBPACK_IMPORTED_MODULE_11__["addTracingHeadersToFetchRequest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultRequestInstrumentationOptions", function() { return _browser_request_js__WEBPACK_IMPORTED_MODULE_11__["defaultRequestInstrumentationOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "instrumentOutgoingRequests", function() { return _browser_request_js__WEBPACK_IMPORTED_MODULE_11__["instrumentOutgoingRequests"]; });

/* harmony import */ var _extensions_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extensions.js */ "./node_modules/@sentry-internal/tracing/esm/extensions.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addExtensionMethods", function() { return _extensions_js__WEBPACK_IMPORTED_MODULE_12__["addExtensionMethods"]; });














//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js ***!
  \*******************************************************************************/
/*! exports provided: Apollo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apollo", function() { return Apollo; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




/** Tracing integration for Apollo */
class Apollo  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Apollo';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Apollo.id;}

  /**
   * @inheritDoc
   */
   constructor(
    options = {
      useNestjs: false,
    },
  ) {Apollo.prototype.__init.call(this);
    this._useNest = !!options.useNestjs;
  }

  /** @inheritdoc */
   loadDependency() {
    if (this._useNest) {
      this._module = this._module || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])('@nestjs/graphql');
    } else {
      this._module = this._module || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])('apollo-server-core');
    }

    return this._module;
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Apollo Integration is skipped because of instrumenter configuration.');
      return;
    }

    if (this._useNest) {
      const pkg = this.loadDependency();

      if (!pkg) {
        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');
        return;
      }

      /**
       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.
       */
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(
        pkg.GraphQLFactory.prototype,
        'mergeWithSchema',
        function (orig) {
          return function (

            ...args
          ) {
            Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(this.resolversExplorerService, 'explore', function (orig) {
              return function () {
                const resolvers = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["arrayify"])(orig.call(this));

                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);

                return instrumentedResolvers;
              };
            });

            return orig.call(this, ...args);
          };
        },
      );
    } else {
      const pkg = this.loadDependency();

      if (!pkg) {
        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Apollo Integration was unable to require apollo-server-core package.');
        return;
      }

      /**
       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.
       */
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {
        return function (

) {
          if (!this.config.resolvers) {
            if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
              if (this.config.schema) {
                _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(
                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +
                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',
                );
                _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn();
              } else if (this.config.modules) {
                _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(
                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',
                );
              }

              _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');
            }

            return orig.call(this);
          }

          const resolvers = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["arrayify"])(this.config.resolvers);

          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);

          return orig.call(this);
        };
      });
    }
  }
}Apollo.__initStatic();

function instrumentResolvers(resolvers, getCurrentHub) {
  return resolvers.map(model => {
    Object.keys(model).forEach(resolverGroupName => {
      Object.keys(model[resolverGroupName]).forEach(resolverName => {
        if (typeof model[resolverGroupName][resolverName] !== 'function') {
          return;
        }

        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);
      });
    });

    return model;
  });
}

/**
 * Wrap a single resolver which can be a parent of other resolvers and/or db operations.
 */
function wrapResolver(
  model,
  resolverGroupName,
  resolverName,
  getCurrentHub,
) {
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(model[resolverGroupName], resolverName, function (orig) {
    return function ( ...args) {
      const scope = getCurrentHub().getScope();
      const parentSpan = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);
      const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({
        description: `${resolverGroupName}.${resolverName}`,
        op: 'graphql.resolve',
      })]);

      const rv = orig.call(this, ...args);

      if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isThenable"])(rv)) {
        return rv.then((res) => {
          Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);
          return res;
        });
      }

      Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);

      return rv;
    };
  });
}


//# sourceMappingURL=apollo.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js ***!
  \********************************************************************************/
/*! exports provided: Express */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Express", function() { return Express; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




/**
 * Express integration
 *
 * Provides an request and error handler for Express framework as well as tracing capabilities
 */
class Express  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Express';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Express.id;}

  /**
   * Express App instance
   */

  /**
   * @inheritDoc
   */
   constructor(options = {}) {Express.prototype.__init.call(this);
    this._router = options.router || options.app;
    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (!this._router) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('ExpressIntegration is missing an Express instance');
      return;
    }

    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Express Integration is skipped because of instrumenter configuration.');
      return;
    }

    instrumentMiddlewares(this._router, this._methods);
    instrumentRouter(this._router );
  }
}Express.__initStatic();

/**
 * Wraps original middleware function in a tracing call, which stores the info about the call as a span,
 * and finishes it once the middleware is done invoking.
 *
 * Express middlewares have 3 various forms, thus we have to take care of all of them:
 * // sync
 * app.use(function (req, res) { ... })
 * // async
 * app.use(function (req, res, next) { ... })
 * // error handler
 * app.use(function (err, req, res, next) { ... })
 *
 * They all internally delegate to the `router[method]` of the given application instance.
 */
// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any
function wrap(fn, method) {
  const arity = fn.length;

  switch (arity) {
    case 2: {
      return function ( req, res) {
        const transaction = res.__sentry_transaction;
        if (transaction) {
          const span = transaction.startChild({
            description: fn.name,
            op: `middleware.express.${method}`,
          });
          res.once('finish', () => {
            span.finish();
          });
        }
        return fn.call(this, req, res);
      };
    }
    case 3: {
      return function (

        req,
        res,
        next,
      ) {
        const transaction = res.__sentry_transaction;
        const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([transaction, 'optionalAccess', _2 => _2.startChild, 'call', _3 => _3({
          description: fn.name,
          op: `middleware.express.${method}`,
        })]);
        fn.call(this, req, res, function ( ...args) {
          Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _4 => _4.finish, 'call', _5 => _5()]);
          next.call(this, ...args);
        });
      };
    }
    case 4: {
      return function (

        err,
        req,
        res,
        next,
      ) {
        const transaction = res.__sentry_transaction;
        const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([transaction, 'optionalAccess', _6 => _6.startChild, 'call', _7 => _7({
          description: fn.name,
          op: `middleware.express.${method}`,
        })]);
        fn.call(this, err, req, res, function ( ...args) {
          Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);
          next.call(this, ...args);
        });
      };
    }
    default: {
      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);
    }
  }
}

/**
 * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`
 * and wraps every function, as well as array of functions with a call to our `wrap` method.
 * We have to take care of the arrays as well as iterate over all of the arguments,
 * as `app.use` can accept middlewares in few various forms.
 *
 * app.use([<path>], <fn>)
 * app.use([<path>], <fn>, ...<fn>)
 * app.use([<path>], ...<fn>[])
 */
function wrapMiddlewareArgs(args, method) {
  return args.map((arg) => {
    if (typeof arg === 'function') {
      return wrap(arg, method);
    }

    if (Array.isArray(arg)) {
      return arg.map((a) => {
        if (typeof a === 'function') {
          return wrap(a, method);
        }
        return a;
      });
    }

    return arg;
  });
}

/**
 * Patches original router to utilize our tracing functionality
 */
function patchMiddleware(router, method) {
  const originalCallback = router[method];

  router[method] = function (...args) {
    return originalCallback.call(this, ...wrapMiddlewareArgs(args, method));
  };

  return router;
}

/**
 * Patches original router methods
 */
function instrumentMiddlewares(router, methods = []) {
  methods.forEach((method) => patchMiddleware(router, method));
}

/**
 * Patches the prototype of Express.Router to accumulate the resolved route
 * if a layer instance's `match` function was called and it returned a successful match.
 *
 * @see https://github.com/expressjs/express/blob/master/lib/router/index.js
 *
 * @param appOrRouter the router instance which can either be an app (i.e. top-level) or a (nested) router.
 */
function instrumentRouter(appOrRouter) {
  // This is how we can distinguish between app and routers
  const isApp = 'settings' in appOrRouter;

  // In case the app's top-level router hasn't been initialized yet, we have to do it now
  if (isApp && appOrRouter._router === undefined && appOrRouter.lazyrouter) {
    appOrRouter.lazyrouter();
  }

  const router = isApp ? appOrRouter._router : appOrRouter;

  if (!router) {
    /*
    If we end up here, this means likely that this integration is used with Express 3 or Express 5.
    For now, we don't support these versions (3 is very old and 5 is still in beta). To support Express 5,
    we'd need to make more changes to the routing instrumentation because the router is no longer part of
    the Express core package but maintained in its own package. The new router has different function
    signatures and works slightly differently, demanding more changes than just taking the router from
    `app.router` instead of `app._router`.
    @see https://github.com/pillarjs/router

    TODO: Proper Express 5 support
    */
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].debug('Cannot instrument router for URL Parameterization (did not find a valid router).');
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].debug('Routing instrumentation is currently only supported in Express 4.');
    return;
  }

  const routerProto = Object.getPrototypeOf(router) ;

  const originalProcessParams = routerProto.process_params;
  routerProto.process_params = function process_params(
    layer,
    called,
    req,
    res,
    done,
  ) {
    // Base case: We're in the first part of the URL (thus we start with the root '/')
    if (!req._reconstructedRoute) {
      req._reconstructedRoute = '';
    }

    // If the layer's partial route has params, is a regex or an array, the route is stored in layer.route.
    const { layerRoutePath, isRegex, isArray, numExtraSegments } = getLayerRoutePathInfo(layer);

    if (layerRoutePath || isRegex || isArray) {
      req._hasParameters = true;
    }

    // Otherwise, the hardcoded path (i.e. a partial route without params) is stored in layer.path
    const partialRoute = layerRoutePath || layer.path || '';

    // Normalize the partial route so that it doesn't contain leading or trailing slashes
    // and exclude empty or '*' wildcard routes.
    // The exclusion of '*' routes is our best effort to not "pollute" the transaction name
    // with interim handlers (e.g. ones that check authentication or do other middleware stuff).
    // We want to end up with the parameterized URL of the incoming request without any extraneous path segments.
    const finalPartialRoute = partialRoute
      .split('/')
      .filter(segment => segment.length > 0 && (isRegex || isArray || !segment.includes('*')))
      .join('/');

    // If we found a valid partial URL, we append it to the reconstructed route
    if (finalPartialRoute && finalPartialRoute.length > 0) {
      // If the partial route is from a regex route, we append a '/' to close the regex
      req._reconstructedRoute += `/${finalPartialRoute}${isRegex ? '/' : ''}`;
    }

    // Now we check if we are in the "last" part of the route. We determine this by comparing the
    // number of URL segments from the original URL to that of our reconstructed parameterized URL.
    // If we've reached our final destination, we update the transaction name.
    const urlLength = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getNumberOfUrlSegments"])(req.originalUrl || '') + numExtraSegments;
    const routeLength = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getNumberOfUrlSegments"])(req._reconstructedRoute);

    if (urlLength === routeLength) {
      if (!req._hasParameters) {
        if (req._reconstructedRoute !== req.originalUrl) {
          req._reconstructedRoute = req.originalUrl;
        }
      }

      const transaction = res.__sentry_transaction;
      if (transaction && transaction.metadata.source !== 'custom') {
        // If the request URL is '/' or empty, the reconstructed route will be empty.
        // Therefore, we fall back to setting the final route to '/' in this case.
        const finalRoute = req._reconstructedRoute || '/';

        transaction.setName(...Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["extractPathForTransaction"])(req, { path: true, method: true, customRoute: finalRoute }));
      }
    }

    return originalProcessParams.call(this, layer, called, req, res, done);
  };
}

/**
 * Extracts and stringifies the layer's route which can either be a string with parameters (`users/:id`),
 * a RegEx (`/test/`) or an array of strings and regexes (`['/path1', /\/path[2-5]/, /path/:id]`). Additionally
 * returns extra information about the route, such as if the route is defined as regex or as an array.
 *
 * @param layer the layer to extract the stringified route from
 *
 * @returns an object containing the stringified route, a flag determining if the route was a regex
 *          and the number of extra segments to the matched path that are additionally in the route,
 *          if the route was an array (defaults to 0).
 */
function getLayerRoutePathInfo(layer) {
  const lrp = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([layer, 'access', _10 => _10.route, 'optionalAccess', _11 => _11.path]);

  const isRegex = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isRegExp"])(lrp);
  const isArray = Array.isArray(lrp);

  if (!lrp) {
    return { isRegex, isArray, numExtraSegments: 0 };
  }

  const numExtraSegments = isArray
    ? Math.max(getNumberOfArrayUrlSegments(lrp ) - Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getNumberOfUrlSegments"])(layer.path || ''), 0)
    : 0;

  const layerRoutePath = getLayerRoutePathString(isArray, lrp);

  return { layerRoutePath, isRegex, isArray, numExtraSegments };
}

/**
 * Returns the number of URL segments in an array of routes
 *
 * Example: ['/api/test', /\/api\/post[0-9]/, '/users/:id/details`] -> 7
 */
function getNumberOfArrayUrlSegments(routesArray) {
  return routesArray.reduce((accNumSegments, currentRoute) => {
    // array members can be a RegEx -> convert them toString
    return accNumSegments + Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getNumberOfUrlSegments"])(currentRoute.toString());
  }, 0);
}

/**
 * Extracts and returns the stringified version of the layers route path
 * Handles route arrays (by joining the paths together) as well as RegExp and normal
 * string values (in the latter case the toString conversion is technically unnecessary but
 * it doesn't hurt us either).
 */
function getLayerRoutePathString(isArray, lrp) {
  if (isArray) {
    return (lrp ).map(r => r.toString()).join(',');
  }
  return lrp && lrp.toString();
}


//# sourceMappingURL=express.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js ***!
  \********************************************************************************/
/*! exports provided: GraphQL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphQL", function() { return GraphQL; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




/** Tracing integration for graphql package */
class GraphQL  {constructor() { GraphQL.prototype.__init.call(this); }
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'GraphQL';}

  /**
   * @inheritDoc
   */
   __init() {this.name = GraphQL.id;}

  /** @inheritdoc */
   loadDependency() {
    return (this._module = this._module || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])('graphql/execution/execute.js'));
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('GraphQL Integration is skipped because of instrumenter configuration.');
      return;
    }

    const pkg = this.loadDependency();

    if (!pkg) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('GraphQL Integration was unable to require graphql/execution package.');
      return;
    }

    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(pkg, 'execute', function (orig) {
      return function ( ...args) {
        const scope = getCurrentHub().getScope();
        const parentSpan = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);

        const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({
          description: 'execute',
          op: 'graphql.execute',
        })]);

        Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _6 => _6.setSpan, 'call', _7 => _7(span)]);

        const rv = orig.call(this, ...args);

        if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isThenable"])(rv)) {
          return rv.then((res) => {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _10 => _10.setSpan, 'call', _11 => _11(parentSpan)]);

            return res;
          });
        }

        Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _12 => _12.finish, 'call', _13 => _13()]);
        Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _14 => _14.setSpan, 'call', _15 => _15(parentSpan)]);
        return rv;
      };
    });
  }
}GraphQL.__initStatic();


//# sourceMappingURL=graphql.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js ***!
  \*****************************************************************************/
/*! exports provided: lazyLoadedNodePerformanceMonitoringIntegrations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lazyLoadedNodePerformanceMonitoringIntegrations", function() { return lazyLoadedNodePerformanceMonitoringIntegrations; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


const lazyLoadedNodePerformanceMonitoringIntegrations = [
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './apollo')

;
    return new integration.Apollo();
  },
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './apollo')

;
    return new integration.Apollo({ useNestjs: true });
  },
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './graphql')

;
    return new integration.GraphQL();
  },
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './mongo')

;
    return new integration.Mongo();
  },
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './mongo')

;
    return new integration.Mongo({ mongoose: true });
  },
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './mysql')

;
    return new integration.Mysql();
  },
  () => {
    const integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, './postgres')

;
    return new integration.Postgres();
  },
];


//# sourceMappingURL=lazy.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js ***!
  \******************************************************************************/
/*! exports provided: Mongo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mongo", function() { return Mongo; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




// This allows us to use the same array for both defaults options and the type itself.
// (note `as const` at the end to make it a union of string literal types (i.e. "a" | "b" | ... )
// and not just a string[])

const OPERATIONS = [
  'aggregate', // aggregate(pipeline, options, callback)
  'bulkWrite', // bulkWrite(operations, options, callback)
  'countDocuments', // countDocuments(query, options, callback)
  'createIndex', // createIndex(fieldOrSpec, options, callback)
  'createIndexes', // createIndexes(indexSpecs, options, callback)
  'deleteMany', // deleteMany(filter, options, callback)
  'deleteOne', // deleteOne(filter, options, callback)
  'distinct', // distinct(key, query, options, callback)
  'drop', // drop(options, callback)
  'dropIndex', // dropIndex(indexName, options, callback)
  'dropIndexes', // dropIndexes(options, callback)
  'estimatedDocumentCount', // estimatedDocumentCount(options, callback)
  'find', // find(query, options, callback)
  'findOne', // findOne(query, options, callback)
  'findOneAndDelete', // findOneAndDelete(filter, options, callback)
  'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)
  'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)
  'indexes', // indexes(options, callback)
  'indexExists', // indexExists(indexes, options, callback)
  'indexInformation', // indexInformation(options, callback)
  'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)
  'insertMany', // insertMany(docs, options, callback)
  'insertOne', // insertOne(doc, options, callback)
  'isCapped', // isCapped(options, callback)
  'mapReduce', // mapReduce(map, reduce, options, callback)
  'options', // options(options, callback)
  'parallelCollectionScan', // parallelCollectionScan(options, callback)
  'rename', // rename(newName, options, callback)
  'replaceOne', // replaceOne(filter, doc, options, callback)
  'stats', // stats(options, callback)
  'updateMany', // updateMany(filter, update, options, callback)
  'updateOne', // updateOne(filter, update, options, callback)
] ;

// All of the operations above take `options` and `callback` as their final parameters, but some of them
// take additional parameters as well. For those operations, this is a map of
// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's
// positional arguments when we add them to the span's `data` object later
const OPERATION_SIGNATURES

 = {
  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well
  // see https://github.com/getsentry/sentry-javascript/pull/3102
  bulkWrite: ['operations'],
  countDocuments: ['query'],
  createIndex: ['fieldOrSpec'],
  createIndexes: ['indexSpecs'],
  deleteMany: ['filter'],
  deleteOne: ['filter'],
  distinct: ['key', 'query'],
  dropIndex: ['indexName'],
  find: ['query'],
  findOne: ['query'],
  findOneAndDelete: ['filter'],
  findOneAndReplace: ['filter', 'replacement'],
  findOneAndUpdate: ['filter', 'update'],
  indexExists: ['indexes'],
  insertMany: ['docs'],
  insertOne: ['doc'],
  mapReduce: ['map', 'reduce'],
  rename: ['newName'],
  replaceOne: ['filter', 'doc'],
  updateMany: ['filter', 'update'],
  updateOne: ['filter', 'update'],
};

function isCursor(maybeCursor) {
  return maybeCursor && typeof maybeCursor === 'object' && maybeCursor.once && typeof maybeCursor.once === 'function';
}

/** Tracing integration for mongo package */
class Mongo  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Mongo';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Mongo.id;}

  /**
   * @inheritDoc
   */
   constructor(options = {}) {Mongo.prototype.__init.call(this);
    this._operations = Array.isArray(options.operations) ? options.operations : (OPERATIONS );
    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;
    this._useMongoose = !!options.useMongoose;
  }

  /** @inheritdoc */
   loadDependency() {
    const moduleName = this._useMongoose ? 'mongoose' : 'mongodb';
    return (this._module = this._module || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])(moduleName));
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Mongo Integration is skipped because of instrumenter configuration.');
      return;
    }

    const pkg = this.loadDependency();

    if (!pkg) {
      const moduleName = this._useMongoose ? 'mongoose' : 'mongodb';
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error(`Mongo Integration was unable to require \`${moduleName}\` package.`);
      return;
    }

    this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);
  }

  /**
   * Patches original collection methods
   */
   _instrumentOperations(collection, operations, getCurrentHub) {
    operations.forEach((operation) => this._patchOperation(collection, operation, getCurrentHub));
  }

  /**
   * Patches original collection to utilize our tracing functionality
   */
   _patchOperation(collection, operation, getCurrentHub) {
    if (!(operation in collection.prototype)) return;

    const getSpanContext = this._getSpanContextFromOperationArguments.bind(this);

    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(collection.prototype, operation, function (orig) {
      return function ( ...args) {
        const lastArg = args[args.length - 1];
        const scope = getCurrentHub().getScope();
        const parentSpan = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);

        // Check if the operation was passed a callback. (mapReduce requires a different check, as
        // its (non-callback) arguments can also be functions.)
        if (typeof lastArg !== 'function' || (operation === 'mapReduce' && args.length === 2)) {
          const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5(getSpanContext(this, operation, args))]);
          const maybePromiseOrCursor = orig.call(this, ...args);

          if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isThenable"])(maybePromiseOrCursor)) {
            return maybePromiseOrCursor.then((res) => {
              Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);
              return res;
            });
          }
          // If the operation returns a Cursor
          // we need to attach a listener to it to finish the span when the cursor is closed.
          else if (isCursor(maybePromiseOrCursor)) {
            const cursor = maybePromiseOrCursor ;

            try {
              cursor.once('close', () => {
                Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);
              });
            } catch (e) {
              // If the cursor is already closed, `once` will throw an error. In that case, we can
              // finish the span immediately.
              Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _10 => _10.finish, 'call', _11 => _11()]);
            }

            return cursor;
          } else {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _12 => _12.finish, 'call', _13 => _13()]);
            return maybePromiseOrCursor;
          }
        }

        const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([parentSpan, 'optionalAccess', _14 => _14.startChild, 'call', _15 => _15(getSpanContext(this, operation, args.slice(0, -1)))]);

        return orig.call(this, ...args.slice(0, -1), function (err, result) {
          Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _16 => _16.finish, 'call', _17 => _17()]);
          lastArg(err, result);
        });
      };
    });
  }

  /**
   * Form a SpanContext based on the user input to a given operation.
   */
   _getSpanContextFromOperationArguments(
    collection,
    operation,
    args,
  ) {
    const data = {
      collectionName: collection.collectionName,
      dbName: collection.dbName,
      namespace: collection.namespace,
      'db.system': 'mongodb',
    };
    const spanContext = {
      op: 'db',
      description: operation,
      data,
    };

    // If the operation takes no arguments besides `options` and `callback`, or if argument
    // collection is disabled for this operation, just return early.
    const signature = OPERATION_SIGNATURES[operation];
    const shouldDescribe = Array.isArray(this._describeOperations)
      ? this._describeOperations.includes(operation)
      : this._describeOperations;

    if (!signature || !shouldDescribe) {
      return spanContext;
    }

    try {
      // Special case for `mapReduce`, as the only one accepting functions as arguments.
      if (operation === 'mapReduce') {
        const [map, reduce] = args ;
        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';
        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';
      } else {
        for (let i = 0; i < signature.length; i++) {
          data[signature[i]] = JSON.stringify(args[i]);
        }
      }
    } catch (_oO) {
      // no-empty
    }

    return spanContext;
  }
}Mongo.__initStatic();


//# sourceMappingURL=mongo.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js ***!
  \******************************************************************************/
/*! exports provided: Mysql */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mysql", function() { return Mysql; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




/** Tracing integration for node-mysql package */
class Mysql  {constructor() { Mysql.prototype.__init.call(this); }
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Mysql';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Mysql.id;}

  /** @inheritdoc */
   loadDependency() {
    return (this._module = this._module || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])('mysql/lib/Connection.js'));
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Mysql Integration is skipped because of instrumenter configuration.');
      return;
    }

    const pkg = this.loadDependency();

    if (!pkg) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Mysql Integration was unable to require `mysql` package.');
      return;
    }

    // The original function will have one of these signatures:
    //    function (callback) => void
    //    function (options, callback) => void
    //    function (options, values, callback) => void
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(pkg, 'createQuery', function (orig) {
      return function ( options, values, callback) {
        const scope = getCurrentHub().getScope();
        const parentSpan = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);
        const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({
          description: typeof options === 'string' ? options : (options ).sql,
          op: 'db',
          data: {
            'db.system': 'mysql',
          },
        })]);

        if (typeof callback === 'function') {
          return orig.call(this, options, values, function (err, result, fields) {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);
            callback(err, result, fields);
          });
        }

        if (typeof values === 'function') {
          return orig.call(this, options, function (err, result, fields) {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);
            values(err, result, fields);
          });
        }

        return orig.call(this, options, values, callback);
      };
    });
  }
}Mysql.__initStatic();


//# sourceMappingURL=mysql.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js ***!
  \*********************************************************************************/
/*! exports provided: Postgres */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Postgres", function() { return Postgres; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




/** Tracing integration for node-postgres package */
class Postgres  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Postgres';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Postgres.id;}

   constructor(options = {}) {Postgres.prototype.__init.call(this);
    this._usePgNative = !!options.usePgNative;
  }

  /** @inheritdoc */
   loadDependency() {
    return (this._module = this._module || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["loadModule"])('pg'));
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Postgres Integration is skipped because of instrumenter configuration.');
      return;
    }

    const pkg = this.loadDependency();

    if (!pkg) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Postgres Integration was unable to require `pg` package.');
      return;
    }

    if (this._usePgNative && !Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([pkg, 'access', _2 => _2.native, 'optionalAccess', _3 => _3.Client])) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error("Postgres Integration was unable to access 'pg-native' bindings.");
      return;
    }

    const { Client } = this._usePgNative ? pkg.native : pkg;

    /**
     * function (query, callback) => void
     * function (query, params, callback) => void
     * function (query) => Promise
     * function (query, params) => Promise
     * function (pg.Cursor) => pg.Cursor
     */
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["fill"])(Client.prototype, 'query', function (orig) {
      return function ( config, values, callback) {
        const scope = getCurrentHub().getScope();
        const parentSpan = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([scope, 'optionalAccess', _4 => _4.getSpan, 'call', _5 => _5()]);
        const span = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([parentSpan, 'optionalAccess', _6 => _6.startChild, 'call', _7 => _7({
          description: typeof config === 'string' ? config : (config ).text,
          op: 'db',
          data: {
            'db.system': 'postgresql',
          },
        })]);

        if (typeof callback === 'function') {
          return orig.call(this, config, values, function (err, result) {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);
            callback(err, result);
          });
        }

        if (typeof values === 'function') {
          return orig.call(this, config, function (err, result) {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _10 => _10.finish, 'call', _11 => _11()]);
            values(err, result);
          });
        }

        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);

        if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isThenable"])(rv)) {
          return rv.then((res) => {
            Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _12 => _12.finish, 'call', _13 => _13()]);
            return res;
          });
        }

        Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([span, 'optionalAccess', _14 => _14.finish, 'call', _15 => _15()]);
        return rv;
      };
    });
  }
}Postgres.__initStatic();


//# sourceMappingURL=postgres.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js ***!
  \*******************************************************************************/
/*! exports provided: Prisma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Prisma", function() { return Prisma; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js");




function isValidPrismaClient(possibleClient) {
  return possibleClient && !!(possibleClient )['$use'];
}

/** Tracing integration for @prisma/client package */
class Prisma  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Prisma';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Prisma.id;}

  /**
   * Prisma ORM Client Instance
   */

  /**
   * @inheritDoc
   */
   constructor(options = {}) {Prisma.prototype.__init.call(this);
    if (isValidPrismaClient(options.client)) {
      this._client = options.client;
    } else {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(
          `Unsupported Prisma client provided to PrismaIntegration. Provided client: ${JSON.stringify(options.client)}`,
        );
    }
  }

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (!this._client) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('PrismaIntegration is missing a Prisma Client Instance');
      return;
    }

    if (Object(_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__["shouldDisableAutoInstrumentation"])(getCurrentHub)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Prisma Integration is skipped because of instrumenter configuration.');
      return;
    }

    this._client.$use((params, next) => {
      const action = params.action;
      const model = params.model;
      return Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["trace"])(
        { name: model ? `${model} ${action}` : action, op: 'db.sql.prisma', data: { 'db.system': 'prisma' } },
        () => next(params),
      );
    });
  }
} Prisma.__initStatic();


//# sourceMappingURL=prisma.js.map


/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js ***!
  \*****************************************************************************************/
/*! exports provided: shouldDisableAutoInstrumentation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldDisableAutoInstrumentation", function() { return shouldDisableAutoInstrumentation; });
/* harmony import */ var _sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils/esm/buildPolyfills */ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js");


/**
 * Check if Sentry auto-instrumentation should be disabled.
 *
 * @param getCurrentHub A method to fetch the current hub
 * @returns boolean
 */
function shouldDisableAutoInstrumentation(getCurrentHub) {
  const clientOptions = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);
  const instrumenter = Object(_sentry_utils_esm_buildPolyfills__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])([clientOptions, 'optionalAccess', _6 => _6.instrumenter]) || 'sentry';

  return instrumenter !== 'sentry';
}


//# sourceMappingURL=node-utils.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/client.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/client.js ***!
  \****************************************************/
/*! exports provided: BrowserClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserClient", function() { return BrowserClient; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eventbuilder.js */ "./node_modules/@sentry/browser/esm/eventbuilder.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");
/* harmony import */ var _integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./integrations/breadcrumbs.js */ "./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js");
/* harmony import */ var _userfeedback_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./userfeedback.js */ "./node_modules/@sentry/browser/esm/userfeedback.js");







/**
 * Configuration options for the Sentry Browser SDK.
 * @see @sentry/types Options for more information.
 */

/**
 * The Sentry Browser SDK Client.
 *
 * @see BrowserOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */
class BrowserClient extends _sentry_core__WEBPACK_IMPORTED_MODULE_0__["BaseClient"] {
  /**
   * Creates a new Browser SDK instance.
   *
   * @param options Configuration options for this SDK.
   */
   constructor(options) {
    const sdkSource = _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].SENTRY_SDK_SOURCE || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getSDKSource"])();

    options._metadata = options._metadata || {};
    options._metadata.sdk = options._metadata.sdk || {
      name: 'sentry.javascript.browser',
      packages: [
        {
          name: `${sdkSource}:@sentry/browser`,
          version: _sentry_core__WEBPACK_IMPORTED_MODULE_0__["SDK_VERSION"],
        },
      ],
      version: _sentry_core__WEBPACK_IMPORTED_MODULE_0__["SDK_VERSION"],
    };

    super(options);

    if (options.sendClientReports && _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document) {
      _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document.addEventListener('visibilitychange', () => {
        if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document.visibilityState === 'hidden') {
          this._flushOutcomes();
        }
      });
    }
  }

  /**
   * @inheritDoc
   */
   eventFromException(exception, hint) {
    return Object(_eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__["eventFromException"])(this._options.stackParser, exception, hint, this._options.attachStacktrace);
  }

  /**
   * @inheritDoc
   */
   eventFromMessage(
    message,
    // eslint-disable-next-line deprecation/deprecation
    level = 'info',
    hint,
  ) {
    return Object(_eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__["eventFromMessage"])(this._options.stackParser, message, level, hint, this._options.attachStacktrace);
  }

  /**
   * @inheritDoc
   */
   sendEvent(event, hint) {
    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and
    // activated its `sentry` option.
    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in
    // bundles, if it is not used by the SDK.
    // This all sadly is a bit ugly, but we currently don't have a "pre-send" hook on the integrations so we do it this
    // way for now.
    const breadcrumbIntegration = this.getIntegrationById(_integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_4__["BREADCRUMB_INTEGRATION_ID"]) ;
    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id
    // "Breadcrumbs" that does not have this function.
    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {
      breadcrumbIntegration.addSentryBreadcrumb(event);
    }

    super.sendEvent(event, hint);
  }

  /**
   * Sends user feedback to Sentry.
   */
   captureUserFeedback(feedback) {
    if (!this._isEnabled()) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('SDK not enabled, will not capture user feedback.');
      return;
    }

    const envelope = Object(_userfeedback_js__WEBPACK_IMPORTED_MODULE_5__["createUserFeedbackEnvelope"])(feedback, {
      metadata: this.getSdkMetadata(),
      dsn: this.getDsn(),
      tunnel: this.getOptions().tunnel,
    });
    void this._sendEnvelope(envelope);
  }

  /**
   * @inheritDoc
   */
   _prepareEvent(event, hint, scope) {
    event.platform = event.platform || 'javascript';
    return super._prepareEvent(event, hint, scope);
  }

  /**
   * Sends client reports as an envelope.
   */
   _flushOutcomes() {
    const outcomes = this._clearOutcomes();

    if (outcomes.length === 0) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('No outcomes to send');
      return;
    }

    if (!this._dsn) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('No dsn provided, will not send outcomes');
      return;
    }

    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('Sending outcomes:', outcomes);

    const envelope = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["createClientReportEnvelope"])(outcomes, this._options.tunnel && Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dsnToString"])(this._dsn));
    void this._sendEnvelope(envelope);
  }
}


//# sourceMappingURL=client.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/eventbuilder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/eventbuilder.js ***!
  \**********************************************************/
/*! exports provided: eventFromError, eventFromException, eventFromMessage, eventFromPlainObject, eventFromString, eventFromUnknownInput, exceptionFromError, parseStackFrames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventFromError", function() { return eventFromError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventFromException", function() { return eventFromException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventFromMessage", function() { return eventFromMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventFromPlainObject", function() { return eventFromPlainObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventFromString", function() { return eventFromString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventFromUnknownInput", function() { return eventFromUnknownInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exceptionFromError", function() { return exceptionFromError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseStackFrames", function() { return parseStackFrames; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



/**
 * This function creates an exception from a JavaScript Error
 */
function exceptionFromError(stackParser, ex) {
  // Get the frames first since Opera can lose the stack if we touch anything else first
  const frames = parseStackFrames(stackParser, ex);

  const exception = {
    type: ex && ex.name,
    value: extractMessage(ex),
  };

  if (frames.length) {
    exception.stacktrace = { frames };
  }

  if (exception.type === undefined && exception.value === '') {
    exception.value = 'Unrecoverable error caught';
  }

  return exception;
}

/**
 * @hidden
 */
function eventFromPlainObject(
  stackParser,
  exception,
  syntheticException,
  isUnhandledRejection,
) {
  const hub = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])();
  const client = hub.getClient();
  const normalizeDepth = client && client.getOptions().normalizeDepth;

  const event = {
    exception: {
      values: [
        {
          type: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isEvent"])(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',
          value: `Non-Error ${
            isUnhandledRejection ? 'promise rejection' : 'exception'
          } captured with keys: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["extractExceptionKeysForMessage"])(exception)}`,
        },
      ],
    },
    extra: {
      __serialized__: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["normalizeToSize"])(exception, normalizeDepth),
    },
  };

  if (syntheticException) {
    const frames = parseStackFrames(stackParser, syntheticException);
    if (frames.length) {
      // event.exception.values[0] has been set above
      (event.exception ).values[0].stacktrace = { frames };
    }
  }

  return event;
}

/**
 * @hidden
 */
function eventFromError(stackParser, ex) {
  return {
    exception: {
      values: [exceptionFromError(stackParser, ex)],
    },
  };
}

/** Parses stack frames from an error */
function parseStackFrames(
  stackParser,
  ex,
) {
  // Access and store the stacktrace property before doing ANYTHING
  // else to it because Opera is not very good at providing it
  // reliably in other circumstances.
  const stacktrace = ex.stacktrace || ex.stack || '';

  const popSize = getPopSize(ex);

  try {
    return stackParser(stacktrace, popSize);
  } catch (e) {
    // no-empty
  }

  return [];
}

// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108
const reactMinifiedRegexp = /Minified React error #\d+;/i;

function getPopSize(ex) {
  if (ex) {
    if (typeof ex.framesToPop === 'number') {
      return ex.framesToPop;
    }

    if (reactMinifiedRegexp.test(ex.message)) {
      return 1;
    }
  }

  return 0;
}

/**
 * There are cases where stacktrace.message is an Event object
 * https://github.com/getsentry/sentry-javascript/issues/1949
 * In this specific case we try to extract stacktrace.message.error.message
 */
function extractMessage(ex) {
  const message = ex && ex.message;
  if (!message) {
    return 'No error message';
  }
  if (message.error && typeof message.error.message === 'string') {
    return message.error.message;
  }
  return message;
}

/**
 * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.
 * @hidden
 */
function eventFromException(
  stackParser,
  exception,
  hint,
  attachStacktrace,
) {
  const syntheticException = (hint && hint.syntheticException) || undefined;
  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionMechanism"])(event); // defaults to { type: 'generic', handled: true }
  event.level = 'error';
  if (hint && hint.event_id) {
    event.event_id = hint.event_id;
  }
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["resolvedSyncPromise"])(event);
}

/**
 * Builds and Event from a Message
 * @hidden
 */
function eventFromMessage(
  stackParser,
  message,
  // eslint-disable-next-line deprecation/deprecation
  level = 'info',
  hint,
  attachStacktrace,
) {
  const syntheticException = (hint && hint.syntheticException) || undefined;
  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);
  event.level = level;
  if (hint && hint.event_id) {
    event.event_id = hint.event_id;
  }
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["resolvedSyncPromise"])(event);
}

/**
 * @hidden
 */
function eventFromUnknownInput(
  stackParser,
  exception,
  syntheticException,
  attachStacktrace,
  isUnhandledRejection,
) {
  let event;

  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isErrorEvent"])(exception ) && (exception ).error) {
    // If it is an ErrorEvent with `error` property, extract it to get actual Error
    const errorEvent = exception ;
    return eventFromError(stackParser, errorEvent.error );
  }

  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name
  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be
  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.
  //
  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError
  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException
  // https://webidl.spec.whatwg.org/#es-DOMException-specialness
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isDOMError"])(exception ) || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isDOMException"])(exception )) {
    const domException = exception ;

    if ('stack' in (exception )) {
      event = eventFromError(stackParser, exception );
    } else {
      const name = domException.name || (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isDOMError"])(domException) ? 'DOMError' : 'DOMException');
      const message = domException.message ? `${name}: ${domException.message}` : name;
      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionTypeValue"])(event, message);
    }
    if ('code' in domException) {
      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };
    }

    return event;
  }
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isError"])(exception)) {
    // we have a real Error object, do nothing
    return eventFromError(stackParser, exception);
  }
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isPlainObject"])(exception) || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isEvent"])(exception)) {
    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize
    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new
    // group on any key/value change.
    const objectException = exception ;
    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionMechanism"])(event, {
      synthetic: true,
    });
    return event;
  }

  // If none of previous checks were valid, then it means that it's not:
  // - an instance of DOMError
  // - an instance of DOMException
  // - an instance of Event
  // - an instance of Error
  // - a valid ErrorEvent (one with an error property)
  // - a plain Object
  //
  // So bail out and capture it as a simple message:
  event = eventFromString(stackParser, exception , syntheticException, attachStacktrace);
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionTypeValue"])(event, `${exception}`, undefined);
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionMechanism"])(event, {
    synthetic: true,
  });

  return event;
}

/**
 * @hidden
 */
function eventFromString(
  stackParser,
  input,
  syntheticException,
  attachStacktrace,
) {
  const event = {
    message: input,
  };

  if (attachStacktrace && syntheticException) {
    const frames = parseStackFrames(stackParser, syntheticException);
    if (frames.length) {
      event.exception = {
        values: [{ value: input, stacktrace: { frames } }],
      };
    }
  }

  return event;
}


//# sourceMappingURL=eventbuilder.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/helpers.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/helpers.js ***!
  \*****************************************************/
/*! exports provided: WINDOW, ignoreNextOnError, shouldIgnoreOnError, wrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WINDOW", function() { return WINDOW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ignoreNextOnError", function() { return ignoreNextOnError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldIgnoreOnError", function() { return shouldIgnoreOnError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return wrap; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



const WINDOW = _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["GLOBAL_OBJ"] ;

let ignoreOnError = 0;

/**
 * @hidden
 */
function shouldIgnoreOnError() {
  return ignoreOnError > 0;
}

/**
 * @hidden
 */
function ignoreNextOnError() {
  // onerror should trigger before setTimeout
  ignoreOnError++;
  setTimeout(() => {
    ignoreOnError--;
  });
}

/**
 * Instruments the given function and sends an event to Sentry every time the
 * function throws an exception.
 *
 * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always
 * has a correct `this` context.
 * @returns The wrapped function.
 * @hidden
 */
function wrap(
  fn,
  options

 = {},
  before,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
) {
  // for future readers what this does is wrap a function and then create
  // a bi-directional wrapping between them.
  //
  // example: wrapped = wrap(original);
  //  original.__sentry_wrapped__ -> wrapped
  //  wrapped.__sentry_original__ -> original

  if (typeof fn !== 'function') {
    return fn;
  }

  try {
    // if we're dealing with a function that was previously wrapped, return
    // the original wrapper.
    const wrapper = fn.__sentry_wrapped__;
    if (wrapper) {
      return wrapper;
    }

    // We don't wanna wrap it twice
    if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getOriginalFunction"])(fn)) {
      return fn;
    }
  } catch (e) {
    // Just accessing custom props in some Selenium environments
    // can cause a "Permission denied" exception (see raven-js#495).
    // Bail on wrapping and return the function as-is (defers to window.onerror).
    return fn;
  }

  /* eslint-disable prefer-rest-params */
  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`
  const sentryWrapped = function () {
    const args = Array.prototype.slice.call(arguments);

    try {
      if (before && typeof before === 'function') {
        before.apply(this, arguments);
      }

      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
      const wrappedArguments = args.map((arg) => wrap(arg, options));

      // Attempt to invoke user-land function
      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
      //       means the sentry.javascript SDK caught an error invoking your application code. This
      //       is expected behavior and NOT indicative of a bug with sentry.javascript.
      return fn.apply(this, wrappedArguments);
    } catch (ex) {
      ignoreNextOnError();

      Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["withScope"])((scope) => {
        scope.addEventProcessor((event) => {
          if (options.mechanism) {
            Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionTypeValue"])(event, undefined, undefined);
            Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionMechanism"])(event, options.mechanism);
          }

          event.extra = {
            ...event.extra,
            arguments: args,
          };

          return event;
        });

        Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["captureException"])(ex);
      });

      throw ex;
    }
  };
  /* eslint-enable prefer-rest-params */

  // Accessing some objects may throw
  // ref: https://github.com/getsentry/sentry-javascript/issues/1168
  try {
    for (const property in fn) {
      if (Object.prototype.hasOwnProperty.call(fn, property)) {
        sentryWrapped[property] = fn[property];
      }
    }
  } catch (_oO) {} // eslint-disable-line no-empty

  // Signal that this function has been wrapped/filled already
  // for both debugging and to prevent it to being wrapped/filled twice
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["markFunctionWrapped"])(sentryWrapped, fn);

  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addNonEnumerableProperty"])(fn, '__sentry_wrapped__', sentryWrapped);

  // Restore original function name (not all browsers allow that)
  try {
    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') ;
    if (descriptor.configurable) {
      Object.defineProperty(sentryWrapped, 'name', {
        get() {
          return fn.name;
        },
      });
    }
    // eslint-disable-next-line no-empty
  } catch (_oO) {}

  return sentryWrapped;
}

/**
 * All properties the report dialog supports
 */


//# sourceMappingURL=helpers.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/index.js ***!
  \***************************************************/
/*! exports provided: FunctionToString, Hub, InboundFilters, SDK_VERSION, Scope, addBreadcrumb, addGlobalEventProcessor, addTracingExtensions, captureEvent, captureException, captureMessage, configureScope, createTransport, extractTraceparentData, getActiveTransaction, getCurrentHub, getHubFromCarrier, makeMain, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, startTransaction, trace, withScope, WINDOW, BrowserClient, makeFetchTransport, makeXHRTransport, chromeStackLineParser, defaultStackLineParsers, defaultStackParser, geckoStackLineParser, opera10StackLineParser, opera11StackLineParser, winjsStackLineParser, eventFromException, eventFromMessage, createUserFeedbackEnvelope, captureUserFeedback, close, defaultIntegrations, flush, forceLoad, init, lastEventId, onLoad, showReportDialog, wrap, Replay, BrowserTracing, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, makeBrowserOfflineTransport, onProfilingStartRouteTransaction, BrowserProfilingIntegration, GlobalHandlers, TryCatch, Breadcrumbs, LinkedErrors, HttpContext, Dedupe, Integrations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Integrations", function() { return INTEGRATIONS; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionToString", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["FunctionToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Hub", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["Hub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InboundFilters", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["InboundFilters"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SDK_VERSION", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["SDK_VERSION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Scope", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["Scope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addBreadcrumb", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["addBreadcrumb"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addGlobalEventProcessor", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["addGlobalEventProcessor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addTracingExtensions", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["addTracingExtensions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureEvent", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["captureEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureException", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["captureException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureMessage", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["captureMessage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "configureScope", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["configureScope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTransport", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["createTransport"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["extractTraceparentData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getActiveTransaction", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getCurrentHub", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getHubFromCarrier", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["getHubFromCarrier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeMain", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["makeMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setContext", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["setContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setExtra", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["setExtra"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setExtras", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["setExtras"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setTag", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["setTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setTags", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["setTags"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setUser", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["setUser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spanStatusfromHttpCode", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["spanStatusfromHttpCode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startTransaction", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["startTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["trace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withScope", function() { return _sentry_core__WEBPACK_IMPORTED_MODULE_0__["withScope"]; });

/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WINDOW", function() { return _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"]; });

/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client.js */ "./node_modules/@sentry/browser/esm/client.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserClient", function() { return _client_js__WEBPACK_IMPORTED_MODULE_2__["BrowserClient"]; });

/* harmony import */ var _transports_fetch_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transports/fetch.js */ "./node_modules/@sentry/browser/esm/transports/fetch.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeFetchTransport", function() { return _transports_fetch_js__WEBPACK_IMPORTED_MODULE_3__["makeFetchTransport"]; });

/* harmony import */ var _transports_xhr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transports/xhr.js */ "./node_modules/@sentry/browser/esm/transports/xhr.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeXHRTransport", function() { return _transports_xhr_js__WEBPACK_IMPORTED_MODULE_4__["makeXHRTransport"]; });

/* harmony import */ var _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stack-parsers.js */ "./node_modules/@sentry/browser/esm/stack-parsers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chromeStackLineParser", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["chromeStackLineParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultStackLineParsers", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["defaultStackLineParsers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultStackParser", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["defaultStackParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "geckoStackLineParser", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["geckoStackLineParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "opera10StackLineParser", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["opera10StackLineParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "opera11StackLineParser", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["opera11StackLineParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "winjsStackLineParser", function() { return _stack_parsers_js__WEBPACK_IMPORTED_MODULE_5__["winjsStackLineParser"]; });

/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./eventbuilder.js */ "./node_modules/@sentry/browser/esm/eventbuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventFromException", function() { return _eventbuilder_js__WEBPACK_IMPORTED_MODULE_6__["eventFromException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventFromMessage", function() { return _eventbuilder_js__WEBPACK_IMPORTED_MODULE_6__["eventFromMessage"]; });

/* harmony import */ var _userfeedback_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./userfeedback.js */ "./node_modules/@sentry/browser/esm/userfeedback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createUserFeedbackEnvelope", function() { return _userfeedback_js__WEBPACK_IMPORTED_MODULE_7__["createUserFeedbackEnvelope"]; });

/* harmony import */ var _sdk_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sdk.js */ "./node_modules/@sentry/browser/esm/sdk.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureUserFeedback", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["captureUserFeedback"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "close", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["close"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultIntegrations", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["defaultIntegrations"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flush", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["flush"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forceLoad", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["forceLoad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "init", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["init"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lastEventId", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["lastEventId"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onLoad", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["onLoad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "showReportDialog", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["showReportDialog"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_8__["wrap"]; });

/* harmony import */ var _integrations_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./integrations/index.js */ "./node_modules/@sentry/browser/esm/integrations/index.js");
/* harmony import */ var _sentry_replay__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/replay */ "./node_modules/@sentry/replay/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Replay", function() { return _sentry_replay__WEBPACK_IMPORTED_MODULE_10__["Replay"]; });

/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry-internal/tracing */ "./node_modules/@sentry-internal/tracing/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserTracing", function() { return _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_11__["BrowserTracing"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultRequestInstrumentationOptions", function() { return _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_11__["defaultRequestInstrumentationOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "instrumentOutgoingRequests", function() { return _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_11__["instrumentOutgoingRequests"]; });

/* harmony import */ var _transports_offline_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transports/offline.js */ "./node_modules/@sentry/browser/esm/transports/offline.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeBrowserOfflineTransport", function() { return _transports_offline_js__WEBPACK_IMPORTED_MODULE_12__["makeBrowserOfflineTransport"]; });

/* harmony import */ var _profiling_hubextensions_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./profiling/hubextensions.js */ "./node_modules/@sentry/browser/esm/profiling/hubextensions.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onProfilingStartRouteTransaction", function() { return _profiling_hubextensions_js__WEBPACK_IMPORTED_MODULE_13__["onProfilingStartRouteTransaction"]; });

/* harmony import */ var _profiling_integration_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./profiling/integration.js */ "./node_modules/@sentry/browser/esm/profiling/integration.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserProfilingIntegration", function() { return _profiling_integration_js__WEBPACK_IMPORTED_MODULE_14__["BrowserProfilingIntegration"]; });

/* harmony import */ var _integrations_globalhandlers_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./integrations/globalhandlers.js */ "./node_modules/@sentry/browser/esm/integrations/globalhandlers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GlobalHandlers", function() { return _integrations_globalhandlers_js__WEBPACK_IMPORTED_MODULE_15__["GlobalHandlers"]; });

/* harmony import */ var _integrations_trycatch_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./integrations/trycatch.js */ "./node_modules/@sentry/browser/esm/integrations/trycatch.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TryCatch", function() { return _integrations_trycatch_js__WEBPACK_IMPORTED_MODULE_16__["TryCatch"]; });

/* harmony import */ var _integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./integrations/breadcrumbs.js */ "./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Breadcrumbs", function() { return _integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_17__["Breadcrumbs"]; });

/* harmony import */ var _integrations_linkederrors_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./integrations/linkederrors.js */ "./node_modules/@sentry/browser/esm/integrations/linkederrors.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinkedErrors", function() { return _integrations_linkederrors_js__WEBPACK_IMPORTED_MODULE_18__["LinkedErrors"]; });

/* harmony import */ var _integrations_httpcontext_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./integrations/httpcontext.js */ "./node_modules/@sentry/browser/esm/integrations/httpcontext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpContext", function() { return _integrations_httpcontext_js__WEBPACK_IMPORTED_MODULE_19__["HttpContext"]; });

/* harmony import */ var _integrations_dedupe_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./integrations/dedupe.js */ "./node_modules/@sentry/browser/esm/integrations/dedupe.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dedupe", function() { return _integrations_dedupe_js__WEBPACK_IMPORTED_MODULE_20__["Dedupe"]; });

























let windowIntegrations = {};

// This block is needed to add compatibility with the integrations packages when used with a CDN
if (_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].Sentry && _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].Sentry.Integrations) {
  windowIntegrations = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].Sentry.Integrations;
}

const INTEGRATIONS = {
  ...windowIntegrations,
  ..._sentry_core__WEBPACK_IMPORTED_MODULE_0__["Integrations"],
  ..._integrations_index_js__WEBPACK_IMPORTED_MODULE_9__,
};


//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js ***!
  \**********************************************************************/
/*! exports provided: BREADCRUMB_INTEGRATION_ID, Breadcrumbs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREADCRUMB_INTEGRATION_ID", function() { return BREADCRUMB_INTEGRATION_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Breadcrumbs", function() { return Breadcrumbs; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");




/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */
const MAX_ALLOWED_STRING_LENGTH = 1024;

const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';

/**
 * Default Breadcrumbs instrumentations
 * TODO: Deprecated - with v6, this will be renamed to `Instrument`
 */
class Breadcrumbs  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = BREADCRUMB_INTEGRATION_ID;}

  /**
   * @inheritDoc
   */
   __init() {this.name = Breadcrumbs.id;}

  /**
   * Options of the breadcrumbs integration.
   */
  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.

  /**
   * @inheritDoc
   */
   constructor(options) {Breadcrumbs.prototype.__init.call(this);
    this.options = {
      console: true,
      dom: true,
      fetch: true,
      history: true,
      sentry: true,
      xhr: true,
      ...options,
    };
  }

  /**
   * Instrument browser built-ins w/ breadcrumb capturing
   *  - Console API
   *  - DOM API (click/typing)
   *  - XMLHttpRequest API
   *  - Fetch API
   *  - History API
   */
   setupOnce() {
    if (this.options.console) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('console', _consoleBreadcrumb);
    }
    if (this.options.dom) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('dom', _domBreadcrumb(this.options.dom));
    }
    if (this.options.xhr) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('xhr', _xhrBreadcrumb);
    }
    if (this.options.fetch) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('fetch', _fetchBreadcrumb);
    }
    if (this.options.history) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('history', _historyBreadcrumb);
    }
  }

  /**
   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.
   */
   addSentryBreadcrumb(event) {
    if (this.options.sentry) {
      Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(
        {
          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,
          event_id: event.event_id,
          level: event.level,
          message: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getEventDescription"])(event),
        },
        {
          event,
        },
      );
    }
  }
} Breadcrumbs.__initStatic();

/**
 * A HOC that creaes a function that creates breadcrumbs from DOM API calls.
 * This is a HOC so that we get access to dom options in the closure.
 */
function _domBreadcrumb(dom) {
  function _innerDomBreadcrumb(handlerData) {
    let target;
    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;

    let maxStringLength =
      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;
    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(
          `\`dom.maxStringLength\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,
        );
      maxStringLength = MAX_ALLOWED_STRING_LENGTH;
    }

    if (typeof keyAttrs === 'string') {
      keyAttrs = [keyAttrs];
    }

    // Accessing event.target can throw (see getsentry/raven-js#838, #768)
    try {
      const event = handlerData.event ;
      target = _isEvent(event)
        ? Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["htmlTreeAsString"])(event.target, { keyAttrs, maxStringLength })
        : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["htmlTreeAsString"])(event, { keyAttrs, maxStringLength });
    } catch (e) {
      target = '<unknown>';
    }

    if (target.length === 0) {
      return;
    }

    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(
      {
        category: `ui.${handlerData.name}`,
        message: target,
      },
      {
        event: handlerData.event,
        name: handlerData.name,
        global: handlerData.global,
      },
    );
  }

  return _innerDomBreadcrumb;
}

/**
 * Creates breadcrumbs from console API calls
 */
function _consoleBreadcrumb(handlerData) {
  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of
  // console warnings. This happens when a Vue template is rendered with
  // an undeclared variable, which we try to stringify, ultimately causing
  // Vue to issue another warning which repeats indefinitely.
  // see: https://github.com/getsentry/sentry-javascript/pull/6010
  // see: https://github.com/getsentry/sentry-javascript/issues/5916
  for (let i = 0; i < handlerData.args.length; i++) {
    if (handlerData.args[i] === 'ref=Ref<') {
      handlerData.args[i + 1] = 'viewRef';
      break;
    }
  }
  const breadcrumb = {
    category: 'console',
    data: {
      arguments: handlerData.args,
      logger: 'console',
    },
    level: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["severityLevelFromString"])(handlerData.level),
    message: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["safeJoin"])(handlerData.args, ' '),
  };

  if (handlerData.level === 'assert') {
    if (handlerData.args[0] === false) {
      breadcrumb.message = `Assertion failed: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["safeJoin"])(handlerData.args.slice(1), ' ') || 'console.assert'}`;
      breadcrumb.data.arguments = handlerData.args.slice(1);
    } else {
      // Don't capture a breadcrumb for passed assertions
      return;
    }
  }

  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(breadcrumb, {
    input: handlerData.args,
    level: handlerData.level,
  });
}

/**
 * Creates breadcrumbs from XHR API calls
 */
function _xhrBreadcrumb(handlerData) {
  const { startTimestamp, endTimestamp } = handlerData;

  const sentryXhrData = handlerData.xhr[_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["SENTRY_XHR_DATA_KEY"]];

  // We only capture complete, non-sentry requests
  if (!startTimestamp || !endTimestamp || !sentryXhrData) {
    return;
  }

  const { method, url, status_code, body } = sentryXhrData;

  const data = {
    method,
    url,
    status_code,
  };

  const hint = {
    xhr: handlerData.xhr,
    input: body,
    startTimestamp,
    endTimestamp,
  };

  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(
    {
      category: 'xhr',
      data,
      type: 'http',
    },
    hint,
  );
}

/**
 * Creates breadcrumbs from fetch API calls
 */
function _fetchBreadcrumb(handlerData) {
  const { startTimestamp, endTimestamp } = handlerData;

  // We only capture complete fetch requests
  if (!endTimestamp) {
    return;
  }

  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {
    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)
    return;
  }

  if (handlerData.error) {
    const data = handlerData.fetchData;
    const hint = {
      data: handlerData.error,
      input: handlerData.args,
      startTimestamp,
      endTimestamp,
    };

    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(
      {
        category: 'fetch',
        data,
        level: 'error',
        type: 'http',
      },
      hint,
    );
  } else {
    const data = {
      ...handlerData.fetchData,
      status_code: handlerData.response && handlerData.response.status,
    };
    const hint = {
      input: handlerData.args,
      response: handlerData.response,
      startTimestamp,
      endTimestamp,
    };
    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(
      {
        category: 'fetch',
        data,
        type: 'http',
      },
      hint,
    );
  }
}

/**
 * Creates breadcrumbs from history API calls
 */
function _historyBreadcrumb(handlerData) {
  let from = handlerData.from;
  let to = handlerData.to;
  const parsedLoc = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["parseUrl"])(_helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].location.href);
  let parsedFrom = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["parseUrl"])(from);
  const parsedTo = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["parseUrl"])(to);

  // Initial pushState doesn't provide `from` information
  if (!parsedFrom.path) {
    parsedFrom = parsedLoc;
  }

  // Use only the path component of the URL if the URL matches the current
  // document (almost all the time when using pushState)
  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
    to = parsedTo.relative;
  }
  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
    from = parsedFrom.relative;
  }

  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb({
    category: 'navigation',
    data: {
      from,
      to,
    },
  });
}

function _isEvent(event) {
  return event && !!(event ).target;
}


//# sourceMappingURL=breadcrumbs.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/dedupe.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/dedupe.js ***!
  \*****************************************************************/
/*! exports provided: Dedupe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dedupe", function() { return Dedupe; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


/** Deduplication filter */
class Dedupe  {constructor() { Dedupe.prototype.__init.call(this); }
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Dedupe';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Dedupe.id;}

  /**
   * @inheritDoc
   */

  /**
   * @inheritDoc
   */
   setupOnce(addGlobalEventProcessor, getCurrentHub) {
    const eventProcessor = currentEvent => {
      // We want to ignore any non-error type events, e.g. transactions or replays
      // These should never be deduped, and also not be compared against as _previousEvent.
      if (currentEvent.type) {
        return currentEvent;
      }

      const self = getCurrentHub().getIntegration(Dedupe);
      if (self) {
        // Juuust in case something goes wrong
        try {
          if (_shouldDropEvent(currentEvent, self._previousEvent)) {
            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('Event dropped due to being a duplicate of previously captured event.');
            return null;
          }
        } catch (_oO) {
          return (self._previousEvent = currentEvent);
        }

        return (self._previousEvent = currentEvent);
      }
      return currentEvent;
    };

    eventProcessor.id = this.name;
    addGlobalEventProcessor(eventProcessor);
  }
} Dedupe.__initStatic();

/** JSDoc */
function _shouldDropEvent(currentEvent, previousEvent) {
  if (!previousEvent) {
    return false;
  }

  if (_isSameMessageEvent(currentEvent, previousEvent)) {
    return true;
  }

  if (_isSameExceptionEvent(currentEvent, previousEvent)) {
    return true;
  }

  return false;
}

/** JSDoc */
function _isSameMessageEvent(currentEvent, previousEvent) {
  const currentMessage = currentEvent.message;
  const previousMessage = previousEvent.message;

  // If neither event has a message property, they were both exceptions, so bail out
  if (!currentMessage && !previousMessage) {
    return false;
  }

  // If only one event has a stacktrace, but not the other one, they are not the same
  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {
    return false;
  }

  if (currentMessage !== previousMessage) {
    return false;
  }

  if (!_isSameFingerprint(currentEvent, previousEvent)) {
    return false;
  }

  if (!_isSameStacktrace(currentEvent, previousEvent)) {
    return false;
  }

  return true;
}

/** JSDoc */
function _isSameExceptionEvent(currentEvent, previousEvent) {
  const previousException = _getExceptionFromEvent(previousEvent);
  const currentException = _getExceptionFromEvent(currentEvent);

  if (!previousException || !currentException) {
    return false;
  }

  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
    return false;
  }

  if (!_isSameFingerprint(currentEvent, previousEvent)) {
    return false;
  }

  if (!_isSameStacktrace(currentEvent, previousEvent)) {
    return false;
  }

  return true;
}

/** JSDoc */
function _isSameStacktrace(currentEvent, previousEvent) {
  let currentFrames = _getFramesFromEvent(currentEvent);
  let previousFrames = _getFramesFromEvent(previousEvent);

  // If neither event has a stacktrace, they are assumed to be the same
  if (!currentFrames && !previousFrames) {
    return true;
  }

  // If only one event has a stacktrace, but not the other one, they are not the same
  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {
    return false;
  }

  currentFrames = currentFrames ;
  previousFrames = previousFrames ;

  // If number of frames differ, they are not the same
  if (previousFrames.length !== currentFrames.length) {
    return false;
  }

  // Otherwise, compare the two
  for (let i = 0; i < previousFrames.length; i++) {
    const frameA = previousFrames[i];
    const frameB = currentFrames[i];

    if (
      frameA.filename !== frameB.filename ||
      frameA.lineno !== frameB.lineno ||
      frameA.colno !== frameB.colno ||
      frameA.function !== frameB.function
    ) {
      return false;
    }
  }

  return true;
}

/** JSDoc */
function _isSameFingerprint(currentEvent, previousEvent) {
  let currentFingerprint = currentEvent.fingerprint;
  let previousFingerprint = previousEvent.fingerprint;

  // If neither event has a fingerprint, they are assumed to be the same
  if (!currentFingerprint && !previousFingerprint) {
    return true;
  }

  // If only one event has a fingerprint, but not the other one, they are not the same
  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {
    return false;
  }

  currentFingerprint = currentFingerprint ;
  previousFingerprint = previousFingerprint ;

  // Otherwise, compare the two
  try {
    return !!(currentFingerprint.join('') === previousFingerprint.join(''));
  } catch (_oO) {
    return false;
  }
}

/** JSDoc */
function _getExceptionFromEvent(event) {
  return event.exception && event.exception.values && event.exception.values[0];
}

/** JSDoc */
function _getFramesFromEvent(event) {
  const exception = event.exception;

  if (exception) {
    try {
      // @ts-ignore Object could be undefined
      return exception.values[0].stacktrace.frames;
    } catch (_oO) {
      return undefined;
    }
  }
  return undefined;
}


//# sourceMappingURL=dedupe.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/globalhandlers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/globalhandlers.js ***!
  \*************************************************************************/
/*! exports provided: GlobalHandlers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalHandlers", function() { return GlobalHandlers; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../eventbuilder.js */ "./node_modules/@sentry/browser/esm/eventbuilder.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");





/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/** Global handlers */
class GlobalHandlers  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'GlobalHandlers';}

  /**
   * @inheritDoc
   */
   __init() {this.name = GlobalHandlers.id;}

  /** JSDoc */

  /**
   * Stores references functions to installing handlers. Will set to undefined
   * after they have been run so that they are not used twice.
   */
   __init2() {this._installFunc = {
    onerror: _installGlobalOnErrorHandler,
    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,
  };}

  /** JSDoc */
   constructor(options) {GlobalHandlers.prototype.__init.call(this);GlobalHandlers.prototype.__init2.call(this);
    this._options = {
      onerror: true,
      onunhandledrejection: true,
      ...options,
    };
  }
  /**
   * @inheritDoc
   */
   setupOnce() {
    Error.stackTraceLimit = 50;
    const options = this._options;

    // We can disable guard-for-in as we construct the options object above + do checks against
    // `this._installFunc` for the property.
    // eslint-disable-next-line guard-for-in
    for (const key in options) {
      const installFunc = this._installFunc[key ];
      if (installFunc && options[key ]) {
        globalHandlerLog(key);
        installFunc();
        this._installFunc[key ] = undefined;
      }
    }
  }
} GlobalHandlers.__initStatic();

/** JSDoc */
function _installGlobalOnErrorHandler() {
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])(
    'error',
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (data) => {
      const [hub, stackParser, attachStacktrace] = getHubAndOptions();
      if (!hub.getIntegration(GlobalHandlers)) {
        return;
      }
      const { msg, url, line, column, error } = data;
      if (Object(_helpers_js__WEBPACK_IMPORTED_MODULE_3__["shouldIgnoreOnError"])() || (error && error.__sentry_own_request__)) {
        return;
      }

      const event =
        error === undefined && Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isString"])(msg)
          ? _eventFromIncompleteOnError(msg, url, line, column)
          : _enhanceEventWithInitialFrame(
              Object(_eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__["eventFromUnknownInput"])(stackParser, error || msg, undefined, attachStacktrace, false),
              url,
              line,
              column,
            );

      event.level = 'error';

      addMechanismAndCapture(hub, error, event, 'onerror');
    },
  );
}

/** JSDoc */
function _installGlobalOnUnhandledRejectionHandler() {
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])(
    'unhandledrejection',
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (e) => {
      const [hub, stackParser, attachStacktrace] = getHubAndOptions();
      if (!hub.getIntegration(GlobalHandlers)) {
        return;
      }
      let error = e;

      // dig the object of the rejection out of known event types
      try {
        // PromiseRejectionEvents store the object of the rejection under 'reason'
        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
        if ('reason' in e) {
          error = e.reason;
        }
        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents
        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into
        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec
        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and
        // https://github.com/getsentry/sentry-javascript/issues/2380
        else if ('detail' in e && 'reason' in e.detail) {
          error = e.detail.reason;
        }
      } catch (_oO) {
        // no-empty
      }

      if (Object(_helpers_js__WEBPACK_IMPORTED_MODULE_3__["shouldIgnoreOnError"])() || (error && error.__sentry_own_request__)) {
        return true;
      }

      const event = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isPrimitive"])(error)
        ? _eventFromRejectionWithPrimitive(error)
        : Object(_eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__["eventFromUnknownInput"])(stackParser, error, undefined, attachStacktrace, true);

      event.level = 'error';

      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');
      return;
    },
  );
}

/**
 * Create an event from a promise rejection where the `reason` is a primitive.
 *
 * @param reason: The `reason` property of the promise rejection
 * @returns An Event object with an appropriate `exception` value
 */
function _eventFromRejectionWithPrimitive(reason) {
  return {
    exception: {
      values: [
        {
          type: 'UnhandledRejection',
          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
          value: `Non-Error promise rejection captured with value: ${String(reason)}`,
        },
      ],
    },
  };
}

/**
 * This function creates a stack from an old, error-less onerror handler.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _eventFromIncompleteOnError(msg, url, line, column) {
  const ERROR_TYPES_RE =
    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;

  // If 'message' is ErrorEvent, get real message from inside
  let message = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isErrorEvent"])(msg) ? msg.message : msg;
  let name = 'Error';

  const groups = message.match(ERROR_TYPES_RE);
  if (groups) {
    name = groups[1];
    message = groups[2];
  }

  const event = {
    exception: {
      values: [
        {
          type: name,
          value: message,
        },
      ],
    },
  };

  return _enhanceEventWithInitialFrame(event, url, line, column);
}

/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _enhanceEventWithInitialFrame(event, url, line, column) {
  // event.exception
  const e = (event.exception = event.exception || {});
  // event.exception.values
  const ev = (e.values = e.values || []);
  // event.exception.values[0]
  const ev0 = (ev[0] = ev[0] || {});
  // event.exception.values[0].stacktrace
  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});
  // event.exception.values[0].stacktrace.frames
  const ev0sf = (ev0s.frames = ev0s.frames || []);

  const colno = isNaN(parseInt(column, 10)) ? undefined : column;
  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;
  const filename = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isString"])(url) && url.length > 0 ? url : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getLocationHref"])();

  // event.exception.values[0].stacktrace.frames
  if (ev0sf.length === 0) {
    ev0sf.push({
      colno,
      filename,
      function: '?',
      in_app: true,
      lineno,
    });
  }

  return event;
}

function globalHandlerLog(type) {
  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`Global Handler attached: ${type}`);
}

function addMechanismAndCapture(hub, error, event, type) {
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addExceptionMechanism"])(event, {
    handled: false,
    type,
  });
  hub.captureEvent(event, {
    originalException: error,
  });
}

function getHubAndOptions() {
  const hub = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])();
  const client = hub.getClient();
  const options = (client && client.getOptions()) || {
    stackParser: () => [],
    attachStacktrace: false,
  };
  return [hub, options.stackParser, options.attachStacktrace];
}


//# sourceMappingURL=globalhandlers.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/httpcontext.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/httpcontext.js ***!
  \**********************************************************************/
/*! exports provided: HttpContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpContext", function() { return HttpContext; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");



/** HttpContext integration collects information about HTTP request headers */
class HttpContext  {constructor() { HttpContext.prototype.__init.call(this); }
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'HttpContext';}

  /**
   * @inheritDoc
   */
   __init() {this.name = HttpContext.id;}

  /**
   * @inheritDoc
   */
   setupOnce() {
    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["addGlobalEventProcessor"])((event) => {
      if (Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getIntegration(HttpContext)) {
        // if none of the information we want exists, don't bother
        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].navigator && !_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location && !_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].document) {
          return event;
        }

        // grab as much info as exists and add it to the event
        const url = (event.request && event.request.url) || (_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location && _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].location.href);
        const { referrer } = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].document || {};
        const { userAgent } = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].navigator || {};

        const headers = {
          ...(event.request && event.request.headers),
          ...(referrer && { Referer: referrer }),
          ...(userAgent && { 'User-Agent': userAgent }),
        };
        const request = { ...event.request, ...(url && { url }), headers };

        return { ...event, request };
      }
      return event;
    });
  }
} HttpContext.__initStatic();


//# sourceMappingURL=httpcontext.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/index.js ***!
  \****************************************************************/
/*! exports provided: GlobalHandlers, TryCatch, Breadcrumbs, LinkedErrors, HttpContext, Dedupe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _globalhandlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globalhandlers.js */ "./node_modules/@sentry/browser/esm/integrations/globalhandlers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GlobalHandlers", function() { return _globalhandlers_js__WEBPACK_IMPORTED_MODULE_0__["GlobalHandlers"]; });

/* harmony import */ var _trycatch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trycatch.js */ "./node_modules/@sentry/browser/esm/integrations/trycatch.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TryCatch", function() { return _trycatch_js__WEBPACK_IMPORTED_MODULE_1__["TryCatch"]; });

/* harmony import */ var _breadcrumbs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./breadcrumbs.js */ "./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Breadcrumbs", function() { return _breadcrumbs_js__WEBPACK_IMPORTED_MODULE_2__["Breadcrumbs"]; });

/* harmony import */ var _linkederrors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./linkederrors.js */ "./node_modules/@sentry/browser/esm/integrations/linkederrors.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinkedErrors", function() { return _linkederrors_js__WEBPACK_IMPORTED_MODULE_3__["LinkedErrors"]; });

/* harmony import */ var _httpcontext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpcontext.js */ "./node_modules/@sentry/browser/esm/integrations/httpcontext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpContext", function() { return _httpcontext_js__WEBPACK_IMPORTED_MODULE_4__["HttpContext"]; });

/* harmony import */ var _dedupe_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dedupe.js */ "./node_modules/@sentry/browser/esm/integrations/dedupe.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Dedupe", function() { return _dedupe_js__WEBPACK_IMPORTED_MODULE_5__["Dedupe"]; });







//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/linkederrors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/linkederrors.js ***!
  \***********************************************************************/
/*! exports provided: LinkedErrors, _handler, _walkErrorTree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkedErrors", function() { return LinkedErrors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_handler", function() { return _handler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_walkErrorTree", function() { return _walkErrorTree; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../eventbuilder.js */ "./node_modules/@sentry/browser/esm/eventbuilder.js");




const DEFAULT_KEY = 'cause';
const DEFAULT_LIMIT = 5;

/** Adds SDK info to an event. */
class LinkedErrors  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'LinkedErrors';}

  /**
   * @inheritDoc
   */
    __init() {this.name = LinkedErrors.id;}

  /**
   * @inheritDoc
   */

  /**
   * @inheritDoc
   */

  /**
   * @inheritDoc
   */
   constructor(options = {}) {LinkedErrors.prototype.__init.call(this);
    this._key = options.key || DEFAULT_KEY;
    this._limit = options.limit || DEFAULT_LIMIT;
  }

  /**
   * @inheritDoc
   */
   setupOnce() {
    const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
    if (!client) {
      return;
    }
    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["addGlobalEventProcessor"])((event, hint) => {
      const self = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getIntegration(LinkedErrors);
      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;
    });
  }
} LinkedErrors.__initStatic();

/**
 * @inheritDoc
 */
function _handler(
  parser,
  key,
  limit,
  event,
  hint,
) {
  if (!event.exception || !event.exception.values || !hint || !Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isInstanceOf"])(hint.originalException, Error)) {
    return event;
  }
  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException , key);
  event.exception.values = [...linkedErrors, ...event.exception.values];
  return event;
}

/**
 * JSDOC
 */
function _walkErrorTree(
  parser,
  limit,
  error,
  key,
  stack = [],
) {
  if (!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isInstanceOf"])(error[key], Error) || stack.length + 1 >= limit) {
    return stack;
  }
  const exception = Object(_eventbuilder_js__WEBPACK_IMPORTED_MODULE_2__["exceptionFromError"])(parser, error[key]);
  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);
}


//# sourceMappingURL=linkederrors.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/integrations/trycatch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/integrations/trycatch.js ***!
  \*******************************************************************/
/*! exports provided: TryCatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TryCatch", function() { return TryCatch; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");



const DEFAULT_EVENT_TARGET = [
  'EventTarget',
  'Window',
  'Node',
  'ApplicationCache',
  'AudioTrackList',
  'ChannelMergerNode',
  'CryptoOperation',
  'EventSource',
  'FileReader',
  'HTMLUnknownElement',
  'IDBDatabase',
  'IDBRequest',
  'IDBTransaction',
  'KeyOperation',
  'MediaController',
  'MessagePort',
  'ModalWindow',
  'Notification',
  'SVGElementInstance',
  'Screen',
  'TextTrack',
  'TextTrackCue',
  'TextTrackList',
  'WebSocket',
  'WebSocketWorker',
  'Worker',
  'XMLHttpRequest',
  'XMLHttpRequestEventTarget',
  'XMLHttpRequestUpload',
];

/** Wrap timer functions and event targets to catch errors and provide better meta data */
class TryCatch  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'TryCatch';}

  /**
   * @inheritDoc
   */
   __init() {this.name = TryCatch.id;}

  /** JSDoc */

  /**
   * @inheritDoc
   */
   constructor(options) {TryCatch.prototype.__init.call(this);
    this._options = {
      XMLHttpRequest: true,
      eventTarget: true,
      requestAnimationFrame: true,
      setInterval: true,
      setTimeout: true,
      ...options,
    };
  }

  /**
   * Wrap timer functions and event targets to catch errors
   * and provide better metadata.
   */
   setupOnce() {
    if (this._options.setTimeout) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"], 'setTimeout', _wrapTimeFunction);
    }

    if (this._options.setInterval) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"], 'setInterval', _wrapTimeFunction);
    }

    if (this._options.requestAnimationFrame) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"], 'requestAnimationFrame', _wrapRAF);
    }

    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"]) {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(XMLHttpRequest.prototype, 'send', _wrapXHR);
    }

    const eventTargetOption = this._options.eventTarget;
    if (eventTargetOption) {
      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;
      eventTarget.forEach(_wrapEventTarget);
    }
  }
} TryCatch.__initStatic();

/** JSDoc */
function _wrapTimeFunction(original) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return function ( ...args) {
    const originalCallback = args[0];
    args[0] = Object(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["wrap"])(originalCallback, {
      mechanism: {
        data: { function: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getFunctionName"])(original) },
        handled: true,
        type: 'instrument',
      },
    });
    return original.apply(this, args);
  };
}

/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _wrapRAF(original) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return function ( callback) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return original.apply(this, [
      Object(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["wrap"])(callback, {
        mechanism: {
          data: {
            function: 'requestAnimationFrame',
            handler: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getFunctionName"])(original),
          },
          handled: true,
          type: 'instrument',
        },
      }),
    ]);
  };
}

/** JSDoc */
function _wrapXHR(originalSend) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return function ( ...args) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const xhr = this;
    const xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];

    xmlHttpRequestProps.forEach(prop => {
      if (prop in xhr && typeof xhr[prop] === 'function') {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(xhr, prop, function (original) {
          const wrapOptions = {
            mechanism: {
              data: {
                function: prop,
                handler: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getFunctionName"])(original),
              },
              handled: true,
              type: 'instrument',
            },
          };

          // If Instrument integration has been called before TryCatch, get the name of original function
          const originalFunction = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getOriginalFunction"])(original);
          if (originalFunction) {
            wrapOptions.mechanism.data.handler = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getFunctionName"])(originalFunction);
          }

          // Otherwise wrap directly
          return Object(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["wrap"])(original, wrapOptions);
        });
      }
    });

    return originalSend.apply(this, args);
  };
}

/** JSDoc */
function _wrapEventTarget(target) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const globalObject = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"] ;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  const proto = globalObject[target] && globalObject[target].prototype;

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
    return;
  }

  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(proto, 'addEventListener', function (original)

 {
    return function (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      eventName,
      fn,
      options,
    ) {
      try {
        if (typeof fn.handleEvent === 'function') {
          // ESlint disable explanation:
          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would
          //  introduce a bug here, because bind returns a new function that doesn't have our
          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.
          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.
          // eslint-disable-next-line @typescript-eslint/unbound-method
          fn.handleEvent = Object(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["wrap"])(fn.handleEvent, {
            mechanism: {
              data: {
                function: 'handleEvent',
                handler: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getFunctionName"])(fn),
                target,
              },
              handled: true,
              type: 'instrument',
            },
          });
        }
      } catch (err) {
        // can sometimes get 'Permission denied to access property "handle Event'
      }

      return original.apply(this, [
        eventName,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["wrap"])(fn , {
          mechanism: {
            data: {
              function: 'addEventListener',
              handler: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getFunctionName"])(fn),
              target,
            },
            handled: true,
            type: 'instrument',
          },
        }),
        options,
      ]);
    };
  });

  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["fill"])(
    proto,
    'removeEventListener',
    function (
      originalRemoveEventListener,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ) {
      return function (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any

        eventName,
        fn,
        options,
      ) {
        /**
         * There are 2 possible scenarios here:
         *
         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified
         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function
         * as a pass-through, and call original `removeEventListener` with it.
         *
         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using
         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.
         * This helper "wraps" whole callback inside a try/catch statement, and attached appropriate metadata to it,
         * in order for us to make a distinction between wrapped/non-wrapped functions possible.
         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.
         *
         * When someone adds a handler prior to initialization, and then do it again, but after,
         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible
         * to get rid of the initial handler and it'd stick there forever.
         */
        const wrappedEventHandler = fn ;
        try {
          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;
          if (originalEventHandler) {
            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);
          }
        } catch (e) {
          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
        }
        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);
      };
    },
  );
}


//# sourceMappingURL=trycatch.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/profiling/cache.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/profiling/cache.js ***!
  \*************************************************************/
/*! exports provided: PROFILING_EVENT_CACHE, makeProfilingCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PROFILING_EVENT_CACHE", function() { return PROFILING_EVENT_CACHE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeProfilingCache", function() { return makeProfilingCache; });
/**
 * Creates a cache that evicts keys in fifo order
 * @param size {Number}
 */
function makeProfilingCache(
  size,
)

 {
  // Maintain a fifo queue of keys, we cannot rely on Object.keys as the browser may not support it.
  let evictionOrder = [];
  let cache = {};

  return {
    add(key, value) {
      while (evictionOrder.length >= size) {
        // shift is O(n) but this is small size and only happens if we are
        // exceeding the cache size so it should be fine.
        const evictCandidate = evictionOrder.shift();

        if (evictCandidate !== undefined) {
          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
          delete cache[evictCandidate];
        }
      }

      // in case we have a collision, delete the old key.
      if (cache[key]) {
        this.delete(key);
      }

      evictionOrder.push(key);
      cache[key] = value;
    },
    clear() {
      cache = {};
      evictionOrder = [];
    },
    get(key) {
      return cache[key];
    },
    size() {
      return evictionOrder.length;
    },
    // Delete cache key and return true if it existed, false otherwise.
    delete(key) {
      if (!cache[key]) {
        return false;
      }

      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete cache[key];

      for (let i = 0; i < evictionOrder.length; i++) {
        if (evictionOrder[i] === key) {
          evictionOrder.splice(i, 1);
          break;
        }
      }

      return true;
    },
  };
}

const PROFILING_EVENT_CACHE = makeProfilingCache(20);


//# sourceMappingURL=cache.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/profiling/hubextensions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/profiling/hubextensions.js ***!
  \*********************************************************************/
/*! exports provided: addProfilingExtensionMethods, onProfilingStartRouteTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addProfilingExtensionMethods", function() { return addProfilingExtensionMethods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onProfilingStartRouteTransaction", function() { return onProfilingStartRouteTransaction; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");
/* harmony import */ var _sendProfile_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sendProfile.js */ "./node_modules/@sentry/browser/esm/profiling/sendProfile.js");





// Max profile duration.
const MAX_PROFILE_DURATION_MS = 30000;
// Keep a flag value to avoid re-initializing the profiler constructor. If it fails
// once, it will always fail and this allows us to early return.
let PROFILING_CONSTRUCTOR_FAILED = false;

// While we experiment, per transaction sampling interval will be more flexible to work with.

/**
 * Check if profiler constructor is available.
 * @param maybeProfiler
 */
function isJSProfilerSupported(maybeProfiler) {
  return typeof maybeProfiler === 'function';
}

/**
 * Safety wrapper for startTransaction for the unlikely case that transaction starts before tracing is imported -
 * if that happens we want to avoid throwing an error from profiling code.
 * see https://github.com/getsentry/sentry-javascript/issues/4731.
 *
 * @experimental
 */
function onProfilingStartRouteTransaction(transaction) {
  if (!transaction) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Transaction is undefined, skipping profiling');
    }
    return transaction;
  }

  return wrapTransactionWithProfiling(transaction);
}

/**
 * Wraps startTransaction and stopTransaction with profiling related logic.
 * startProfiling is called after the call to startTransaction in order to avoid our own code from
 * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.
 */
function wrapTransactionWithProfiling(transaction) {
  // Feature support check first
  const JSProfilerConstructor = _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].Profiler;

  if (!isJSProfilerSupported(JSProfilerConstructor)) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        '[Profiling] Profiling is not supported by this browser, Profiler interface missing on window object.',
      );
    }
    return transaction;
  }

  // profilesSampleRate is multiplied with tracesSampleRate to get the final sampling rate.
  if (!transaction.sampled) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Transaction is not sampled, skipping profiling');
    }
    return transaction;
  }

  // If constructor failed once, it will always fail, so we can early return.
  if (PROFILING_CONSTRUCTOR_FAILED) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Profiling has been disabled for the duration of the current user session.');
    }
    return transaction;
  }

  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  const options = client && client.getOptions();

  // @ts-ignore not part of the browser options yet
  const profilesSampleRate = (options && options.profilesSampleRate) || 0;
  if (profilesSampleRate === undefined) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Profiling disabled, enable it by setting `profilesSampleRate` option to SDK init call.');
    }
    return transaction;
  }

  // Check if we should sample this profile
  if (Math.random() > profilesSampleRate) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Skip profiling transaction due to sampling.');
    }
    return transaction;
  }

  // From initial testing, it seems that the minimum value for sampleInterval is 10ms.
  const samplingIntervalMS = 10;
  // Start the profiler
  const maxSamples = Math.floor(MAX_PROFILE_DURATION_MS / samplingIntervalMS);
  let profiler;

  // Attempt to initialize the profiler constructor, if it fails, we disable profiling for the current user session.
  // This is likely due to a missing 'Document-Policy': 'js-profiling' header. We do not want to throw an error if this happens
  // as we risk breaking the user's application, so just disable profiling and log an error.
  try {
    profiler = new JSProfilerConstructor({ sampleInterval: samplingIntervalMS, maxBufferSize: maxSamples });
  } catch (e) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        "[Profiling] Failed to initialize the Profiling constructor, this is likely due to a missing 'Document-Policy': 'js-profiling' header.",
      );
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Disabling profiling for current user session.');
    }
    PROFILING_CONSTRUCTOR_FAILED = true;
  }

  // We failed to construct the profiler, fallback to original transaction - there is no need to log
  // anything as we already did that in the try/catch block.
  if (!profiler) {
    return transaction;
  }

  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Profiling] started profiling transaction: ${transaction.name || transaction.description}`);
  }

  // We create "unique" transaction names to avoid concurrent transactions with same names
  // from being ignored by the profiler. From here on, only this transaction name should be used when
  // calling the profiler methods. Note: we log the original name to the user to avoid confusion.
  const profileId = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["uuid4"])();

  // A couple of important things to note here:
  // `CpuProfilerBindings.stopProfiling` will be scheduled to run in 30seconds in order to exceed max profile duration.
  // Whichever of the two (transaction.finish/timeout) is first to run, the profiling will be stopped and the gathered profile
  // will be processed when the original transaction is finished. Since onProfileHandler can be invoked multiple times in the
  // event of an error or user mistake (calling transaction.finish multiple times), it is important that the behavior of onProfileHandler
  // is idempotent as we do not want any timings or profiles to be overriden by the last call to onProfileHandler.
  // After the original finish method is called, the event will be reported through the integration and delegated to transport.
  let processedProfile = null;

  /**
   * Idempotent handler for profile stop
   */
  function onProfileHandler() {
    // Check if the profile exists and return it the behavior has to be idempotent as users may call transaction.finish multiple times.
    if (!transaction) {
      return;
    }
    // Satisfy the type checker, but profiler will always be defined here.
    if (!profiler) {
      return;
    }
    if (processedProfile) {
      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
          '[Profiling] profile for:',
          transaction.name || transaction.description,
          'already exists, returning early',
        );
      }
      return;
    }

    profiler
      .stop()
      .then((p) => {
        if (maxDurationTimeoutID) {
          _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].clearTimeout(maxDurationTimeoutID);
          maxDurationTimeoutID = undefined;
        }

        if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Profiling] stopped profiling of transaction: ${transaction.name || transaction.description}`);
        }

        // In case of an overlapping transaction, stopProfiling may return null and silently ignore the overlapping profile.
        if (!p) {
          if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
            _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
              `[Profiling] profiler returned null profile for: ${transaction.name || transaction.description}`,
              'this may indicate an overlapping transaction or a call to stopProfiling with a profile title that was never started',
            );
          }
          return;
        }

        // If a profile has less than 2 samples, it is not useful and should be discarded.
        if (p.samples.length < 2) {
          return;
        }

        processedProfile = { ...p, profile_id: profileId };
        Object(_sendProfile_js__WEBPACK_IMPORTED_MODULE_3__["sendProfile"])(profileId, processedProfile);
      })
      .catch(error => {
        if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] error while stopping profiler:', error);
        }
        return null;
      });
  }

  // Enqueue a timeout to prevent profiles from running over max duration.
  let maxDurationTimeoutID = _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].setTimeout(() => {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        '[Profiling] max profile duration elapsed, stopping profiling for:',
        transaction.name || transaction.description,
      );
    }
    void onProfileHandler();
  }, MAX_PROFILE_DURATION_MS);

  // We need to reference the original finish call to avoid creating an infinite loop
  const originalFinish = transaction.finish.bind(transaction);

  /**
   * Wraps startTransaction and stopTransaction with profiling related logic.
   * startProfiling is called after the call to startTransaction in order to avoid our own code from
   * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.
   */
  function profilingWrappedTransactionFinish() {
    if (!transaction) {
      return originalFinish();
    }
    // onProfileHandler should always return the same profile even if this is called multiple times.
    // Always call onProfileHandler to ensure stopProfiling is called and the timeout is cleared.
    onProfileHandler();

    // Set profile context
    transaction.setContext('profile', { profile_id: profileId });

    return originalFinish();
  }

  transaction.finish = profilingWrappedTransactionFinish;
  return transaction;
}

/**
 * Wraps startTransaction with profiling logic. This is done automatically by the profiling integration.
 */
function __PRIVATE__wrapStartTransactionWithProfiling(startTransaction) {
  return function wrappedStartTransaction(

    transactionContext,
    customSamplingContext,
  ) {
    const transaction = startTransaction.call(this, transactionContext, customSamplingContext);
    if (transaction === undefined) {
      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Transaction is undefined, skipping profiling');
      }
      return transaction;
    }

    return wrapTransactionWithProfiling(transaction);
  };
}

/**
 * Patches startTransaction and stopTransaction with profiling logic.
 */
function addProfilingExtensionMethods() {
  const carrier = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getMainCarrier"])();
  if (!carrier.__SENTRY__) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log("[Profiling] Can't find main carrier, profiling won't work.");
    }
    return;
  }
  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};

  if (!carrier.__SENTRY__.extensions['startTransaction']) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        '[Profiling] startTransaction does not exists, profiling will not work. Make sure you import @sentry/tracing package before @sentry/profiling-node as import order matters.',
      );
    }
    return;
  }

  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] startTransaction exists, patching it with profiling functionality...');
  }

  carrier.__SENTRY__.extensions['startTransaction'] = __PRIVATE__wrapStartTransactionWithProfiling(
    // This is already patched by sentry/tracing, we are going to re-patch it...
    carrier.__SENTRY__.extensions['startTransaction'] ,
  );
}


//# sourceMappingURL=hubextensions.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/profiling/integration.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/profiling/integration.js ***!
  \*******************************************************************/
/*! exports provided: BrowserProfilingIntegration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserProfilingIntegration", function() { return BrowserProfilingIntegration; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache.js */ "./node_modules/@sentry/browser/esm/profiling/cache.js");
/* harmony import */ var _hubextensions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hubextensions.js */ "./node_modules/@sentry/browser/esm/profiling/hubextensions.js");




/**
 * Browser profiling integration. Stores any event that has contexts["profile"]["profile_id"]
 * This exists because we do not want to await async profiler.stop calls as transaction.finish is called
 * in a synchronous context. Instead, we handle sending the profile async from the promise callback and
 * rely on being able to pull the event from the cache when we need to construct the envelope. This makes the
 * integration less reliable as we might be dropping profiles when the cache is full.
 *
 * @experimental
 */
class BrowserProfilingIntegration  {constructor() { BrowserProfilingIntegration.prototype.__init.call(this); }
    __init() {this.name = 'BrowserProfilingIntegration';}

  /**
   * @inheritDoc
   */
   setupOnce(addGlobalEventProcessor) {
    // Patching the hub to add the extension methods.
    // Warning: we have an implicit dependency on import order and we will fail patching if the constructor of
    // BrowserProfilingIntegration is called before @sentry/tracing is imported. This is because we need to patch
    // the methods of @sentry/tracing which are patched as a side effect of importing @sentry/tracing.
    Object(_hubextensions_js__WEBPACK_IMPORTED_MODULE_2__["addProfilingExtensionMethods"])();

    // Add our event processor
    addGlobalEventProcessor(this.handleGlobalEvent.bind(this));
  }

  /**
   * @inheritDoc
   */
   handleGlobalEvent(event) {
    const profileId = event.contexts && event.contexts['profile'] && event.contexts['profile']['profile_id'];

    if (profileId && typeof profileId === 'string') {
      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Profiling] Profiling event found, caching it.');
      }
      _cache_js__WEBPACK_IMPORTED_MODULE_1__["PROFILING_EVENT_CACHE"].add(profileId, event);
    }

    return event;
  }
}


//# sourceMappingURL=integration.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/profiling/sendProfile.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/profiling/sendProfile.js ***!
  \*******************************************************************/
/*! exports provided: sendProfile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendProfile", function() { return sendProfile; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cache.js */ "./node_modules/@sentry/browser/esm/profiling/cache.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@sentry/browser/esm/profiling/utils.js");





/**
 * Performs lookup in the event cache and sends the profile to Sentry.
 * If the profiled transaction event is found, we use the profiled transaction event and profile
 * to construct a profile type envelope and send it to Sentry.
 */
function sendProfile(profileId, profile) {
  const event = _cache_js__WEBPACK_IMPORTED_MODULE_2__["PROFILING_EVENT_CACHE"].get(profileId);

  if (!event) {
    // We could not find a corresponding transaction event for this profile.
    // Opt to do nothing for now, but in the future we should implement a simple retry mechanism.
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log("[Profiling] Couldn't find a transaction event for this profile, dropping it.");
    }
    return;
  }

  event.sdkProcessingMetadata = event.sdkProcessingMetadata || {};
  if (event.sdkProcessingMetadata && !event.sdkProcessingMetadata['profile']) {
    event.sdkProcessingMetadata['profile'] = profile;
  }

  // Client, Dsn and Transport are all required to be able to send the profiling event to Sentry.
  // If either of them is not available, we remove the profile from the transaction event.
  // and forward it to the next event processor.
  const hub = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])();
  const client = hub.getClient();

  if (!client) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        '[Profiling] getClient did not return a Client, removing profile from event and forwarding to next event processors.',
      );
    }
    return;
  }

  const dsn = client.getDsn();
  if (!dsn) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        '[Profiling] getDsn did not return a Dsn, removing profile from event and forwarding to next event processors.',
      );
    }
    return;
  }

  const transport = client.getTransport();
  if (!transport) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(
        '[Profiling] getTransport did not return a Transport, removing profile from event and forwarding to next event processors.',
      );
    }
    return;
  }

  // If all required components are available, we construct a profiling event envelope and send it to Sentry.
  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Preparing envelope and sending a profiling event');
  }
  const envelope = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["createProfilingEventEnvelope"])(event , dsn);

  // Evict event from the cache - we want to prevent the LRU cache from prioritizing already sent events over new ones.
  _cache_js__WEBPACK_IMPORTED_MODULE_2__["PROFILING_EVENT_CACHE"].delete(profileId);

  if (!envelope) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Failed to construct envelope');
    }
    return;
  }

  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Envelope constructed, sending it');
  }

  // Wrap in try/catch because send will throw in case of a network error.
  transport.send(envelope).then(null, reason => {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Error while sending event:', reason);
  });
}


//# sourceMappingURL=sendProfile.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/profiling/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/profiling/utils.js ***!
  \*************************************************************/
/*! exports provided: convertJSSelfProfileToSampledFormat, createProfilingEventEnvelope, enrichWithThreadInformation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertJSSelfProfileToSampledFormat", function() { return convertJSSelfProfileToSampledFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createProfilingEventEnvelope", function() { return createProfilingEventEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enrichWithThreadInformation", function() { return enrichWithThreadInformation; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");




const MS_TO_NS = 1e6;
// Use 0 as main thread id which is identical to threadId in node:worker_threads
// where main logs 0 and workers seem to log in increments of 1
const THREAD_ID_STRING = String(0);
const THREAD_NAME = 'main';

// Machine properties (eval only once)
let OS_PLATFORM = ''; // macos
let OS_PLATFORM_VERSION = ''; // 13.2
let OS_ARCH = ''; // arm64
let OS_BROWSER = (_helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator && _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator.userAgent) || '';
let OS_MODEL = '';
const OS_LOCALE =
  (_helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator && _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator.language) ||
  (_helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator && _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator.languages && _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator.languages[0]) ||
  '';

function isUserAgentData(data) {
  return typeof data === 'object' && data !== null && 'getHighEntropyValues' in data;
}

// @ts-ignore userAgentData is not part of the navigator interface yet
const userAgentData = _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator && _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator.userAgentData;

if (isUserAgentData(userAgentData)) {
  userAgentData
    .getHighEntropyValues(['architecture', 'model', 'platform', 'platformVersion', 'fullVersionList'])
    .then((ua) => {
      OS_PLATFORM = ua.platform || '';
      OS_ARCH = ua.architecture || '';
      OS_MODEL = ua.model || '';
      OS_PLATFORM_VERSION = ua.platformVersion || '';

      if (ua.fullVersionList && ua.fullVersionList.length > 0) {
        const firstUa = ua.fullVersionList[ua.fullVersionList.length - 1];
        OS_BROWSER = `${firstUa.brand} ${firstUa.version}`;
      }
    })
    .catch(e => void e);
}

function isRawThreadCpuProfile(profile) {
  return !('thread_metadata' in profile);
}

// Enriches the profile with threadId of the current thread.
// This is done in node as we seem to not be able to get the info from C native code.
/**
 *
 */
function enrichWithThreadInformation(profile) {
  if (!isRawThreadCpuProfile(profile)) {
    return profile;
  }

  return convertJSSelfProfileToSampledFormat(profile);
}

// Profile is marked as optional because it is deleted from the metadata
// by the integration before the event is processed by other integrations.

/** Extract sdk info from from the API metadata */
function getSdkMetadataForEnvelopeHeader(metadata) {
  if (!metadata || !metadata.sdk) {
    return undefined;
  }

  return { name: metadata.sdk.name, version: metadata.sdk.version } ;
}

/**
 * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.
 * Merge with existing data if any.
 **/
function enhanceEventWithSdkInfo(event, sdkInfo) {
  if (!sdkInfo) {
    return event;
  }
  event.sdk = event.sdk || {};
  event.sdk.name = event.sdk.name || sdkInfo.name || 'unknown sdk';
  event.sdk.version = event.sdk.version || sdkInfo.version || 'unknown sdk version';
  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];
  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];
  return event;
}

function createEventEnvelopeHeaders(
  event,
  sdkInfo,
  tunnel,
  dsn,
) {
  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata['dynamicSamplingContext'];

  return {
    event_id: event.event_id ,
    sent_at: new Date().toISOString(),
    ...(sdkInfo && { sdk: sdkInfo }),
    ...(!!tunnel && { dsn: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dsnToString"])(dsn) }),
    ...(event.type === 'transaction' &&
      dynamicSamplingContext && {
        trace: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dropUndefinedKeys"])({ ...dynamicSamplingContext }) ,
      }),
  };
}

function getTraceId(event) {
  const traceId = event && event.contexts && event.contexts['trace'] && event.contexts['trace']['trace_id'];
  // Log a warning if the profile has an invalid traceId (should be uuidv4).
  // All profiles and transactions are rejected if this is the case and we want to
  // warn users that this is happening if they enable debug flag
  if (typeof traceId === 'string' && traceId.length !== 32) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Profiling] Invalid traceId: ${traceId} on profiled event`);
    }
  }
  if (typeof traceId !== 'string') {
    return '';
  }

  return traceId;
}
/**
 * Creates a profiling event envelope from a Sentry event. If profile does not pass
 * validation, returns null.
 * @param event
 * @param dsn
 * @param metadata
 * @param tunnel
 * @returns {EventEnvelope | null}
 */

/**
 * Creates a profiling event envelope from a Sentry event.
 */
function createProfilingEventEnvelope(
  event,
  dsn,
  metadata,
  tunnel,
) {
  if (event.type !== 'transaction') {
    // createProfilingEventEnvelope should only be called for transactions,
    // we type guard this behavior with isProfiledTransactionEvent.
    throw new TypeError('Profiling events may only be attached to transactions, this should never occur.');
  }

  const rawProfile = event.sdkProcessingMetadata['profile'];

  if (rawProfile === undefined || rawProfile === null) {
    throw new TypeError(
      `Cannot construct profiling event envelope without a valid profile. Got ${rawProfile} instead.`,
    );
  }

  if (!rawProfile.profile_id) {
    throw new TypeError('Profile is missing profile_id');
  }

  if (rawProfile.samples.length <= 1) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      // Log a warning if the profile has less than 2 samples so users can know why
      // they are not seeing any profiling data and we cant avoid the back and forth
      // of asking them to provide us with a dump of the profile data.
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Profiling] Discarding profile because it contains less than 2 samples');
    }
    return null;
  }

  const traceId = getTraceId(event);
  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);
  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);
  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);
  const enrichedThreadProfile = enrichWithThreadInformation(rawProfile);
  const transactionStartMs = typeof event.start_timestamp === 'number' ? event.start_timestamp * 1000 : Date.now();
  const transactionEndMs = typeof event.timestamp === 'number' ? event.timestamp * 1000 : Date.now();

  const profile = {
    event_id: rawProfile.profile_id,
    timestamp: new Date(transactionStartMs).toISOString(),
    platform: 'javascript',
    version: '1',
    release: event.release || '',
    environment: event.environment || _sentry_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_ENVIRONMENT"],
    runtime: {
      name: 'javascript',
      version: _helpers_js__WEBPACK_IMPORTED_MODULE_2__["WINDOW"].navigator.userAgent,
    },
    os: {
      name: OS_PLATFORM,
      version: OS_PLATFORM_VERSION,
      build_number: OS_BROWSER,
    },
    device: {
      locale: OS_LOCALE,
      model: OS_MODEL,
      manufacturer: OS_BROWSER,
      architecture: OS_ARCH,
      is_emulator: false,
    },
    profile: enrichedThreadProfile,
    transactions: [
      {
        name: event.transaction || '',
        id: event.event_id || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["uuid4"])(),
        trace_id: traceId,
        active_thread_id: THREAD_ID_STRING,
        relative_start_ns: '0',
        relative_end_ns: ((transactionEndMs - transactionStartMs) * 1e6).toFixed(0),
      },
    ],
  };

  const envelopeItem = [
    {
      type: 'profile',
    },
    // @ts-ignore this is missing in typedef
    profile,
  ];

  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["createEnvelope"])(envelopeHeaders, [envelopeItem]);
}

/**
 * Converts a JSSelfProfile to a our sampled format.
 * Does not currently perform stack indexing.
 */
function convertJSSelfProfileToSampledFormat(input) {
  let EMPTY_STACK_ID = undefined;
  let STACK_ID = 0;

  // Initialize the profile that we will fill with data
  const profile = {
    samples: [],
    stacks: [],
    frames: [],
    thread_metadata: {
      [THREAD_ID_STRING]: { name: THREAD_NAME },
    },
  };

  if (!input.samples.length) {
    return profile;
  }

  // We assert samples.length > 0 above and timestamp should always be present
  const start = input.samples[0].timestamp;

  for (let i = 0; i < input.samples.length; i++) {
    const jsSample = input.samples[i];

    // If sample has no stack, add an empty sample
    if (jsSample.stackId === undefined) {
      if (EMPTY_STACK_ID === undefined) {
        EMPTY_STACK_ID = STACK_ID;
        profile.stacks[EMPTY_STACK_ID] = [];
        STACK_ID++;
      }

      profile['samples'][i] = {
        // convert ms timestamp to ns
        elapsed_since_start_ns: ((jsSample.timestamp - start) * MS_TO_NS).toFixed(0),
        stack_id: EMPTY_STACK_ID,
        thread_id: THREAD_ID_STRING,
      };
      continue;
    }

    let stackTop = input.stacks[jsSample.stackId];

    // Functions in top->down order (root is last)
    // We follow the stackTop.parentId trail and collect each visited frameId
    const stack = [];

    while (stackTop) {
      stack.push(stackTop.frameId);

      const frame = input.frames[stackTop.frameId];

      // If our frame has not been indexed yet, index it
      if (profile.frames[stackTop.frameId] === undefined) {
        profile.frames[stackTop.frameId] = {
          function: frame.name,
          file: frame.resourceId ? input.resources[frame.resourceId] : undefined,
          line: frame.line,
          column: frame.column,
        };
      }

      stackTop = stackTop.parentId === undefined ? undefined : input.stacks[stackTop.parentId];
    }

    const sample = {
      // convert ms timestamp to ns
      elapsed_since_start_ns: ((jsSample.timestamp - start) * MS_TO_NS).toFixed(0),
      stack_id: STACK_ID,
      thread_id: THREAD_ID_STRING,
    };

    profile['stacks'][STACK_ID] = stack;
    profile['samples'][i] = sample;
    STACK_ID++;
  }

  return profile;
}


//# sourceMappingURL=utils.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/sdk.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/sdk.js ***!
  \*************************************************/
/*! exports provided: captureUserFeedback, close, defaultIntegrations, flush, forceLoad, init, lastEventId, onLoad, showReportDialog, wrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "captureUserFeedback", function() { return captureUserFeedback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "close", function() { return close; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultIntegrations", function() { return defaultIntegrations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flush", function() { return flush; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceLoad", function() { return forceLoad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lastEventId", function() { return lastEventId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onLoad", function() { return onLoad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showReportDialog", function() { return showReportDialog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return wrap; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client.js */ "./node_modules/@sentry/browser/esm/client.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");
/* harmony import */ var _integrations_globalhandlers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./integrations/globalhandlers.js */ "./node_modules/@sentry/browser/esm/integrations/globalhandlers.js");
/* harmony import */ var _integrations_trycatch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./integrations/trycatch.js */ "./node_modules/@sentry/browser/esm/integrations/trycatch.js");
/* harmony import */ var _integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./integrations/breadcrumbs.js */ "./node_modules/@sentry/browser/esm/integrations/breadcrumbs.js");
/* harmony import */ var _integrations_linkederrors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./integrations/linkederrors.js */ "./node_modules/@sentry/browser/esm/integrations/linkederrors.js");
/* harmony import */ var _integrations_httpcontext_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./integrations/httpcontext.js */ "./node_modules/@sentry/browser/esm/integrations/httpcontext.js");
/* harmony import */ var _integrations_dedupe_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./integrations/dedupe.js */ "./node_modules/@sentry/browser/esm/integrations/dedupe.js");
/* harmony import */ var _stack_parsers_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./stack-parsers.js */ "./node_modules/@sentry/browser/esm/stack-parsers.js");
/* harmony import */ var _transports_fetch_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transports/fetch.js */ "./node_modules/@sentry/browser/esm/transports/fetch.js");
/* harmony import */ var _transports_xhr_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transports/xhr.js */ "./node_modules/@sentry/browser/esm/transports/xhr.js");














const defaultIntegrations = [
  new _sentry_core__WEBPACK_IMPORTED_MODULE_0__["Integrations"].InboundFilters(),
  new _sentry_core__WEBPACK_IMPORTED_MODULE_0__["Integrations"].FunctionToString(),
  new _integrations_trycatch_js__WEBPACK_IMPORTED_MODULE_5__["TryCatch"](),
  new _integrations_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_6__["Breadcrumbs"](),
  new _integrations_globalhandlers_js__WEBPACK_IMPORTED_MODULE_4__["GlobalHandlers"](),
  new _integrations_linkederrors_js__WEBPACK_IMPORTED_MODULE_7__["LinkedErrors"](),
  new _integrations_dedupe_js__WEBPACK_IMPORTED_MODULE_9__["Dedupe"](),
  new _integrations_httpcontext_js__WEBPACK_IMPORTED_MODULE_8__["HttpContext"](),
];

/**
 * A magic string that build tooling can leverage in order to inject a release value into the SDK.
 */

/**
 * The Sentry Browser SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible when
 * loading the web page. To set context information or send manual events, use
 * the provided methods.
 *
 * @example
 *
 * ```
 *
 * import { init } from '@sentry/browser';
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { configureScope } from '@sentry/browser';
 * configureScope((scope: Scope) => {
 *   scope.setExtra({ battery: 0.7 });
 *   scope.setTag({ user_mode: 'admin' });
 *   scope.setUser({ id: '4711' });
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { addBreadcrumb } from '@sentry/browser';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * ```
 *
 * @example
 *
 * ```
 *
 * import * as Sentry from '@sentry/browser';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * ```
 *
 * @see {@link BrowserOptions} for documentation on configuration options.
 */
function init(options = {}) {
  if (options.defaultIntegrations === undefined) {
    options.defaultIntegrations = defaultIntegrations;
  }
  if (options.release === undefined) {
    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value
    if (typeof __SENTRY_RELEASE__ === 'string') {
      options.release = __SENTRY_RELEASE__;
    }

    // This supports the variable that sentry-webpack-plugin injects
    if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].SENTRY_RELEASE && _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].SENTRY_RELEASE.id) {
      options.release = _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].SENTRY_RELEASE.id;
    }
  }
  if (options.autoSessionTracking === undefined) {
    options.autoSessionTracking = true;
  }
  if (options.sendClientReports === undefined) {
    options.sendClientReports = true;
  }

  const clientOptions = {
    ...options,
    stackParser: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["stackParserFromStackParserOptions"])(options.stackParser || _stack_parsers_js__WEBPACK_IMPORTED_MODULE_10__["defaultStackParser"]),
    integrations: Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getIntegrationsToSetup"])(options),
    transport: options.transport || (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["supportsFetch"])() ? _transports_fetch_js__WEBPACK_IMPORTED_MODULE_11__["makeFetchTransport"] : _transports_xhr_js__WEBPACK_IMPORTED_MODULE_12__["makeXHRTransport"]),
  };

  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["initAndBind"])(_client_js__WEBPACK_IMPORTED_MODULE_2__["BrowserClient"], clientOptions);

  if (options.autoSessionTracking) {
    startSessionTracking();
  }
}

/**
 * Present the user with a report dialog.
 *
 * @param options Everything is optional, we try to fetch all info need from the global scope.
 */
function showReportDialog(options = {}, hub = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])()) {
  // doesn't work without a document (React Native)
  if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Global document not defined in showReportDialog call');
    return;
  }

  const { client, scope } = hub.getStackTop();
  const dsn = options.dsn || (client && client.getDsn());
  if (!dsn) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('DSN not configured for showReportDialog call');
    return;
  }

  if (scope) {
    options.user = {
      ...scope.getUser(),
      ...options.user,
    };
  }

  if (!options.eventId) {
    options.eventId = hub.lastEventId();
  }

  const script = _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document.createElement('script');
  script.async = true;
  script.src = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getReportDialogEndpoint"])(dsn, options);

  if (options.onLoad) {
    script.onload = options.onLoad;
  }

  const injectionPoint = _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document.head || _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document.body;
  if (injectionPoint) {
    injectionPoint.appendChild(script);
  } else {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('Not injecting report dialog. No injection point found in HTML');
  }
}

/**
 * This is the getter for lastEventId.
 *
 * @returns The last event id of a captured event.
 */
function lastEventId() {
  return Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().lastEventId();
}

/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */
function forceLoad() {
  // Noop
}

/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */
function onLoad(callback) {
  callback();
}

/**
 * Call `flush()` on the current client, if there is one. See {@link Client.flush}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause
 * the client to wait until all events are sent before resolving the promise.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */
function flush(timeout) {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  if (client) {
    return client.flush(timeout);
  }
  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('Cannot flush events. No client defined.');
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["resolvedSyncPromise"])(false);
}

/**
 * Call `close()` on the current client, if there is one. See {@link Client.close}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this
 * parameter will cause the client to wait until all events are sent before disabling itself.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */
function close(timeout) {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  if (client) {
    return client.close(timeout);
  }
  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('Cannot flush events and disable SDK. No client defined.');
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["resolvedSyncPromise"])(false);
}

/**
 * Wrap code within a try/catch block so the SDK is able to capture errors.
 *
 * @param fn A function to wrap.
 *
 * @returns The result of wrapped function call.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function wrap(fn) {
  return Object(_helpers_js__WEBPACK_IMPORTED_MODULE_3__["wrap"])(fn)();
}

function startSessionOnHub(hub) {
  hub.startSession({ ignoreDuration: true });
  hub.captureSession();
}

/**
 * Enable automatic Session Tracking for the initial page load.
 */
function startSessionTracking() {
  if (typeof _helpers_js__WEBPACK_IMPORTED_MODULE_3__["WINDOW"].document === 'undefined') {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('Session tracking in non-browser environment with @sentry/browser is not supported.');
    return;
  }

  const hub = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])();

  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and
  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are
  // pinned at the same version in package.json, but there are edge cases where it's possible. See
  // https://github.com/getsentry/sentry-javascript/issues/3207 and
  // https://github.com/getsentry/sentry-javascript/issues/3234 and
  // https://github.com/getsentry/sentry-javascript/issues/3278.
  if (!hub.captureSession) {
    return;
  }

  // The session duration for browser sessions does not track a meaningful
  // concept that can be used as a metric.
  // Automatically captured sessions are akin to page views, and thus we
  // discard their duration.
  startSessionOnHub(hub);

  // We want to create a session for every navigation as well
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('history', ({ from, to }) => {
    // Don't create an additional session for the initial route or if the location did not change
    if (!(from === undefined || from === to)) {
      startSessionOnHub(Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])());
    }
  });
}

/**
 * Captures user feedback and sends it to Sentry.
 */
function captureUserFeedback(feedback) {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  if (client) {
    client.captureUserFeedback(feedback);
  }
}


//# sourceMappingURL=sdk.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/stack-parsers.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/stack-parsers.js ***!
  \***********************************************************/
/*! exports provided: chromeStackLineParser, defaultStackLineParsers, defaultStackParser, geckoStackLineParser, opera10StackLineParser, opera11StackLineParser, winjsStackLineParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chromeStackLineParser", function() { return chromeStackLineParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultStackLineParsers", function() { return defaultStackLineParsers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultStackParser", function() { return defaultStackParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "geckoStackLineParser", function() { return geckoStackLineParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "opera10StackLineParser", function() { return opera10StackLineParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "opera11StackLineParser", function() { return opera11StackLineParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "winjsStackLineParser", function() { return winjsStackLineParser; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


// global reference to slice
const UNKNOWN_FUNCTION = '?';

const OPERA10_PRIORITY = 10;
const OPERA11_PRIORITY = 20;
const CHROME_PRIORITY = 30;
const WINJS_PRIORITY = 40;
const GECKO_PRIORITY = 50;

function createFrame(filename, func, lineno, colno) {
  const frame = {
    filename,
    function: func,
    in_app: true, // All browser frames are considered in_app
  };

  if (lineno !== undefined) {
    frame.lineno = lineno;
  }

  if (colno !== undefined) {
    frame.colno = colno;
  }

  return frame;
}

// Chromium based browsers: Chrome, Brave, new Opera, new Edge
const chromeRegex =
  /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
const chromeEvalRegex = /\((\S*)(?::(\d+))(?::(\d+))\)/;

const chrome = line => {
  const parts = chromeRegex.exec(line);

  if (parts) {
    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line

    if (isEval) {
      const subMatch = chromeEvalRegex.exec(parts[2]);

      if (subMatch) {
        // throw out eval line/column and use top-most line/column number
        parts[2] = subMatch[1]; // url
        parts[3] = subMatch[2]; // line
        parts[4] = subMatch[3]; // column
      }
    }

    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now
    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)
    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);

    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);
  }

  return;
};

const chromeStackLineParser = [CHROME_PRIORITY, chrome];

// gecko regex: `(?:bundle|\d+\.js)`: `bundle` is for react native, `\d+\.js` also but specifically for ram bundles because it
// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js
// We need this specific case for now because we want no other regex to match.
const geckoREgex =
  /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
const geckoEvalRegex = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;

const gecko = line => {
  const parts = geckoREgex.exec(line);

  if (parts) {
    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    if (isEval) {
      const subMatch = geckoEvalRegex.exec(parts[3]);

      if (subMatch) {
        // throw out eval line/column and use top-most line number
        parts[1] = parts[1] || 'eval';
        parts[3] = subMatch[1];
        parts[4] = subMatch[2];
        parts[5] = ''; // no column when eval
      }
    }

    let filename = parts[3];
    let func = parts[1] || UNKNOWN_FUNCTION;
    [func, filename] = extractSafariExtensionDetails(func, filename);

    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);
  }

  return;
};

const geckoStackLineParser = [GECKO_PRIORITY, gecko];

const winjsRegex = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:[-a-z]+):.*?):(\d+)(?::(\d+))?\)?\s*$/i;

const winjs = line => {
  const parts = winjsRegex.exec(line);

  return parts
    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)
    : undefined;
};

const winjsStackLineParser = [WINJS_PRIORITY, winjs];

const opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i;

const opera10 = line => {
  const parts = opera10Regex.exec(line);
  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;
};

const opera10StackLineParser = [OPERA10_PRIORITY, opera10];

const opera11Regex =
  / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\(.*\))? in (.*):\s*$/i;

const opera11 = line => {
  const parts = opera11Regex.exec(line);
  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;
};

const opera11StackLineParser = [OPERA11_PRIORITY, opera11];

const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];

const defaultStackParser = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createStackParser"])(...defaultStackLineParsers);

/**
 * Safari web extensions, starting version unknown, can produce "frames-only" stacktraces.
 * What it means, is that instead of format like:
 *
 * Error: wat
 *   at function@url:row:col
 *   at function@url:row:col
 *   at function@url:row:col
 *
 * it produces something like:
 *
 *   function@url:row:col
 *   function@url:row:col
 *   function@url:row:col
 *
 * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.
 * This function is extracted so that we can use it in both places without duplicating the logic.
 * Unfortunately "just" changing RegExp is too complicated now and making it pass all tests
 * and fix this case seems like an impossible, or at least way too time-consuming task.
 */
const extractSafariExtensionDetails = (func, filename) => {
  const isSafariExtension = func.indexOf('safari-extension') !== -1;
  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;

  return isSafariExtension || isSafariWebExtension
    ? [
        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,
        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,
      ]
    : [func, filename];
};


//# sourceMappingURL=stack-parsers.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/transports/fetch.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/transports/fetch.js ***!
  \**************************************************************/
/*! exports provided: makeFetchTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeFetchTransport", function() { return makeFetchTransport; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@sentry/browser/esm/transports/utils.js");




/**
 * Creates a Transport that uses the Fetch API to send events to Sentry.
 */
function makeFetchTransport(
  options,
  nativeFetch = Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["getNativeFetchImplementation"])(),
) {
  let pendingBodySize = 0;
  let pendingCount = 0;

  function makeRequest(request) {
    const requestSize = request.body.length;
    pendingBodySize += requestSize;
    pendingCount++;

    const requestOptions = {
      body: request.body,
      method: 'POST',
      referrerPolicy: 'origin',
      headers: options.headers,
      // Outgoing requests are usually cancelled when navigating to a different page, causing a "TypeError: Failed to
      // fetch" error and sending a "network_error" client-outcome - in Chrome, the request status shows "(cancelled)".
      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're
      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).
      // Gotchas:
      // - `keepalive` isn't supported by Firefox
      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):
      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.
      //   We will therefore only activate the flag when we're below that limit.
      // There is also a limit of requests that can be open at the same time, so we also limit this to 15
      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details
      keepalive: pendingBodySize <= 60000 && pendingCount < 15,
      ...options.fetchOptions,
    };

    try {
      return nativeFetch(options.url, requestOptions).then(response => {
        pendingBodySize -= requestSize;
        pendingCount--;
        return {
          statusCode: response.status,
          headers: {
            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),
            'retry-after': response.headers.get('Retry-After'),
          },
        };
      });
    } catch (e) {
      Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["clearCachedFetchImplementation"])();
      pendingBodySize -= requestSize;
      pendingCount--;
      return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["rejectedSyncPromise"])(e);
    }
  }

  return Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["createTransport"])(options, makeRequest);
}


//# sourceMappingURL=fetch.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/transports/offline.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/transports/offline.js ***!
  \****************************************************************/
/*! exports provided: createStore, insert, makeBrowserOfflineTransport, pop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createStore", function() { return createStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insert", function() { return insert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeBrowserOfflineTransport", function() { return makeBrowserOfflineTransport; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pop", function() { return pop; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being
// modified and simplified: https://github.com/jakearchibald/idb-keyval
//
// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca
// Original licence:

// Copyright 2016, Jake Archibald
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    // @ts-ignore - file size hacks
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    // @ts-ignore - file size hacks
    request.onabort = request.onerror = () => reject(request.error);
  });
}

/** Create or open an IndexedDb store */
function createStore(dbName, storeName) {
  const request = indexedDB.open(dbName);
  request.onupgradeneeded = () => request.result.createObjectStore(storeName);
  const dbp = promisifyRequest(request);

  return callback => dbp.then(db => callback(db.transaction(storeName, 'readwrite').objectStore(storeName)));
}

function keys(store) {
  return promisifyRequest(store.getAllKeys() );
}

/** Insert into the store */
function insert(store, value, maxQueueSize) {
  return store(store => {
    return keys(store).then(keys => {
      if (keys.length >= maxQueueSize) {
        return;
      }

      // We insert with an incremented key so that the entries are popped in order
      store.put(value, Math.max(...keys, 0) + 1);
      return promisifyRequest(store.transaction);
    });
  });
}

/** Pop the oldest value from the store */
function pop(store) {
  return store(store => {
    return keys(store).then(keys => {
      if (keys.length === 0) {
        return undefined;
      }

      return promisifyRequest(store.get(keys[0])).then(value => {
        store.delete(keys[0]);
        return promisifyRequest(store.transaction).then(() => value);
      });
    });
  });
}

function createIndexedDbStore(options) {
  let store;

  // Lazily create the store only when it's needed
  function getStore() {
    if (store == undefined) {
      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');
    }

    return store;
  }

  return {
    insert: async (env) => {
      try {
        const serialized = await Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["serializeEnvelope"])(env, options.textEncoder);
        await insert(getStore(), serialized, options.maxQueueSize || 30);
      } catch (_) {
        //
      }
    },
    pop: async () => {
      try {
        const deserialized = await pop(getStore());
        if (deserialized) {
          return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["parseEnvelope"])(
            deserialized,
            options.textEncoder || new TextEncoder(),
            options.textDecoder || new TextDecoder(),
          );
        }
      } catch (_) {
        //
      }

      return undefined;
    },
  };
}

function makeIndexedDbOfflineTransport(
  createTransport,
) {
  return options => createTransport({ ...options, createStore: createIndexedDbStore });
}

/**
 * Creates a transport that uses IndexedDb to store events when offline.
 */
function makeBrowserOfflineTransport(
  createTransport,
) {
  return makeIndexedDbOfflineTransport(Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["makeOfflineTransport"])(createTransport));
}


//# sourceMappingURL=offline.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/transports/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/transports/utils.js ***!
  \**************************************************************/
/*! exports provided: clearCachedFetchImplementation, getNativeFetchImplementation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearCachedFetchImplementation", function() { return clearCachedFetchImplementation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNativeFetchImplementation", function() { return getNativeFetchImplementation; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers.js */ "./node_modules/@sentry/browser/esm/helpers.js");



let cachedFetchImpl = undefined;

/**
 * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.
 * Whenever someone wraps the Fetch API and returns the wrong promise chain,
 * this chain becomes orphaned and there is no possible way to capture it's rejections
 * other than allowing it bubble up to this very handler. eg.
 *
 * const f = window.fetch;
 * window.fetch = function () {
 *   const p = f.apply(this, arguments);
 *
 *   p.then(function() {
 *     console.log('hi.');
 *   });
 *
 *   return p;
 * }
 *
 * `p.then(function () { ... })` is producing a completely separate promise chain,
 * however, what's returned is `p` - the result of original `fetch` call.
 *
 * This mean, that whenever we use the Fetch API to send our own requests, _and_
 * some ad-blocker blocks it, this orphaned chain will _always_ reject,
 * effectively causing another event to be captured.
 * This makes a whole process become an infinite loop, which we need to somehow
 * deal with, and break it in one way or another.
 *
 * To deal with this issue, we are making sure that we _always_ use the real
 * browser Fetch API, instead of relying on what `window.fetch` exposes.
 * The only downside to this would be missing our own requests as breadcrumbs,
 * but because we are already not doing this, it should be just fine.
 *
 * Possible failed fetch error messages per-browser:
 *
 * Chrome:  Failed to fetch
 * Edge:    Failed to Fetch
 * Firefox: NetworkError when attempting to fetch resource
 * Safari:  resource blocked by content blocker
 */
function getNativeFetchImplementation() {
  if (cachedFetchImpl) {
    return cachedFetchImpl;
  }

  /* eslint-disable @typescript-eslint/unbound-method */

  // Fast path to avoid DOM I/O
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isNativeFetch"])(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].fetch)) {
    return (cachedFetchImpl = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].fetch.bind(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"]));
  }

  const document = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].document;
  let fetchImpl = _helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"].fetch;
  // eslint-disable-next-line deprecation/deprecation
  if (document && typeof document.createElement === 'function') {
    try {
      const sandbox = document.createElement('iframe');
      sandbox.hidden = true;
      document.head.appendChild(sandbox);
      const contentWindow = sandbox.contentWindow;
      if (contentWindow && contentWindow.fetch) {
        fetchImpl = contentWindow.fetch;
      }
      document.head.removeChild(sandbox);
    } catch (e) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);
    }
  }

  return (cachedFetchImpl = fetchImpl.bind(_helpers_js__WEBPACK_IMPORTED_MODULE_1__["WINDOW"]));
  /* eslint-enable @typescript-eslint/unbound-method */
}

/** Clears cached fetch impl */
function clearCachedFetchImplementation() {
  cachedFetchImpl = undefined;
}


//# sourceMappingURL=utils.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/transports/xhr.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/transports/xhr.js ***!
  \************************************************************/
/*! exports provided: makeXHRTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeXHRTransport", function() { return makeXHRTransport; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



/**
 * The DONE ready state for XmlHttpRequest
 *
 * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined
 * (e.g. during testing, it is `undefined`)
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}
 */
const XHR_READYSTATE_DONE = 4;

/**
 * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.
 */
function makeXHRTransport(options) {
  function makeRequest(request) {
    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["SyncPromise"]((resolve, reject) => {
      const xhr = new XMLHttpRequest();

      xhr.onerror = reject;

      xhr.onreadystatechange = () => {
        if (xhr.readyState === XHR_READYSTATE_DONE) {
          resolve({
            statusCode: xhr.status,
            headers: {
              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),
              'retry-after': xhr.getResponseHeader('Retry-After'),
            },
          });
        }
      };

      xhr.open('POST', options.url);

      for (const header in options.headers) {
        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {
          xhr.setRequestHeader(header, options.headers[header]);
        }
      }

      xhr.send(request.body);
    });
  }

  return Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["createTransport"])(options, makeRequest);
}


//# sourceMappingURL=xhr.js.map


/***/ }),

/***/ "./node_modules/@sentry/browser/esm/userfeedback.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/browser/esm/userfeedback.js ***!
  \**********************************************************/
/*! exports provided: createUserFeedbackEnvelope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createUserFeedbackEnvelope", function() { return createUserFeedbackEnvelope; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


/**
 * Creates an envelope from a user feedback.
 */
function createUserFeedbackEnvelope(
  feedback,
  {
    metadata,
    tunnel,
    dsn,
  }

,
) {
  const headers = {
    event_id: feedback.event_id,
    sent_at: new Date().toISOString(),
    ...(metadata &&
      metadata.sdk && {
        sdk: {
          name: metadata.sdk.name,
          version: metadata.sdk.version,
        },
      }),
    ...(!!tunnel && !!dsn && { dsn: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dsnToString"])(dsn) }),
  };
  const item = createUserFeedbackEnvelopeItem(feedback);

  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createEnvelope"])(headers, [item]);
}

function createUserFeedbackEnvelopeItem(feedback) {
  const feedbackHeaders = {
    type: 'user_report',
  };
  return [feedbackHeaders, feedback];
}


//# sourceMappingURL=userfeedback.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/api.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/api.js ***!
  \**********************************************/
/*! exports provided: getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnvelopeEndpointWithUrlEncodedAuth", function() { return getEnvelopeEndpointWithUrlEncodedAuth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReportDialogEndpoint", function() { return getReportDialogEndpoint; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


const SENTRY_API_VERSION = '7';

/** Returns the prefix to construct Sentry ingestion API endpoints. */
function getBaseApiEndpoint(dsn) {
  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';
  const port = dsn.port ? `:${dsn.port}` : '';
  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;
}

/** Returns the ingest API endpoint for target. */
function _getIngestEndpoint(dsn) {
  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;
}

/** Returns a URL-encoded string with auth config suitable for a query string. */
function _encodedAuth(dsn, sdkInfo) {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["urlEncode"])({
    // We send only the minimum set of required information. See
    // https://github.com/getsentry/sentry-javascript/issues/2572.
    sentry_key: dsn.publicKey,
    sentry_version: SENTRY_API_VERSION,
    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),
  });
}

/**
 * Returns the envelope endpoint URL with auth in the query string.
 *
 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
 */
function getEnvelopeEndpointWithUrlEncodedAuth(
  dsn,
  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below
  // options: ClientOptions = {} as ClientOptions,
  tunnelOrOptions = {} ,
) {
  // TODO (v8): Use this code instead
  // const { tunnel, _metadata = {} } = options;
  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;

  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;
  const sdkInfo =
    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;

  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;
}

/** Returns the url to the report dialog endpoint. */
function getReportDialogEndpoint(
  dsnLike,
  dialogOptions

,
) {
  const dsn = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["makeDsn"])(dsnLike);
  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;

  let encodedOptions = `dsn=${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dsnToString"])(dsn)}`;
  for (const key in dialogOptions) {
    if (key === 'dsn') {
      continue;
    }

    if (key === 'user') {
      const user = dialogOptions.user;
      if (!user) {
        continue;
      }
      if (user.name) {
        encodedOptions += `&name=${encodeURIComponent(user.name)}`;
      }
      if (user.email) {
        encodedOptions += `&email=${encodeURIComponent(user.email)}`;
      }
    } else {
      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] )}`;
    }
  }

  return `${endpoint}?${encodedOptions}`;
}


//# sourceMappingURL=api.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/baseclient.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/esm/baseclient.js ***!
  \*****************************************************/
/*! exports provided: BaseClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseClient", function() { return BaseClient; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ "./node_modules/@sentry/core/esm/api.js");
/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./envelope.js */ "./node_modules/@sentry/core/esm/envelope.js");
/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./integration.js */ "./node_modules/@sentry/core/esm/integration.js");
/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./session.js */ "./node_modules/@sentry/core/esm/session.js");
/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/prepareEvent.js */ "./node_modules/@sentry/core/esm/utils/prepareEvent.js");







const ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";

/**
 * Base implementation for all JavaScript SDK clients.
 *
 * Call the constructor with the corresponding options
 * specific to the client subclass. To access these options later, use
 * {@link Client.getOptions}.
 *
 * If a Dsn is specified in the options, it will be parsed and stored. Use
 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
 * invalid, the constructor will throw a {@link SentryException}. Note that
 * without a valid Dsn, the SDK will not send any events to Sentry.
 *
 * Before sending an event, it is passed through
 * {@link BaseClient._prepareEvent} to add SDK information and scope data
 * (breadcrumbs and context). To add more custom information, override this
 * method and extend the resulting prepared event.
 *
 * To issue automatically created events (e.g. via instrumentation), use
 * {@link Client.captureEvent}. It will prepare the event and pass it through
 * the callback lifecycle. To issue auto-breadcrumbs, use
 * {@link Client.addBreadcrumb}.
 *
 * @example
 * class NodeClient extends BaseClient<NodeOptions> {
 *   public constructor(options: NodeOptions) {
 *     super(options);
 *   }
 *
 *   // ...
 * }
 */
class BaseClient {
  /** Options passed to the SDK. */

  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */

  /** Array of set up integrations. */
   __init() {this._integrations = {};}

  /** Indicates whether this client's integrations have been set up. */
   __init2() {this._integrationsInitialized = false;}

  /** Number of calls being processed */
   __init3() {this._numProcessing = 0;}

  /** Holds flushable  */
   __init4() {this._outcomes = {};}

  // eslint-disable-next-line @typescript-eslint/ban-types
   __init5() {this._hooks = {};}

  /**
   * Initializes this client instance.
   *
   * @param options Options for the client.
   */
   constructor(options) {BaseClient.prototype.__init.call(this);BaseClient.prototype.__init2.call(this);BaseClient.prototype.__init3.call(this);BaseClient.prototype.__init4.call(this);BaseClient.prototype.__init5.call(this);
    this._options = options;
    if (options.dsn) {
      this._dsn = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["makeDsn"])(options.dsn);
      const url = Object(_api_js__WEBPACK_IMPORTED_MODULE_1__["getEnvelopeEndpointWithUrlEncodedAuth"])(this._dsn, options);
      this._transport = options.transport({
        recordDroppedEvent: this.recordDroppedEvent.bind(this),
        ...options.transportOptions,
        url,
      });
    } else {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('No DSN provided, client will not do anything.');
    }
  }

  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
   captureException(exception, hint, scope) {
    // ensure we haven't captured this very object before
    if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["checkOrSetAlreadyCaught"])(exception)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(ALREADY_SEEN_ERROR);
      return;
    }

    let eventId = hint && hint.event_id;

    this._process(
      this.eventFromException(exception, hint)
        .then(event => this._captureEvent(event, hint, scope))
        .then(result => {
          eventId = result;
        }),
    );

    return eventId;
  }

  /**
   * @inheritDoc
   */
   captureMessage(
    message,
    // eslint-disable-next-line deprecation/deprecation
    level,
    hint,
    scope,
  ) {
    let eventId = hint && hint.event_id;

    const promisedEvent = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isPrimitive"])(message)
      ? this.eventFromMessage(String(message), level, hint)
      : this.eventFromException(message, hint);

    this._process(
      promisedEvent
        .then(event => this._captureEvent(event, hint, scope))
        .then(result => {
          eventId = result;
        }),
    );

    return eventId;
  }

  /**
   * @inheritDoc
   */
   captureEvent(event, hint, scope) {
    // ensure we haven't captured this very object before
    if (hint && hint.originalException && Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["checkOrSetAlreadyCaught"])(hint.originalException)) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(ALREADY_SEEN_ERROR);
      return;
    }

    let eventId = hint && hint.event_id;

    this._process(
      this._captureEvent(event, hint, scope).then(result => {
        eventId = result;
      }),
    );

    return eventId;
  }

  /**
   * @inheritDoc
   */
   captureSession(session) {
    if (!this._isEnabled()) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('SDK not enabled, will not capture session.');
      return;
    }

    if (!(typeof session.release === 'string')) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('Discarded session because of missing or non-string release');
    } else {
      this.sendSession(session);
      // After sending, we set init false to indicate it's not the first occurrence
      Object(_session_js__WEBPACK_IMPORTED_MODULE_4__["updateSession"])(session, { init: false });
    }
  }

  /**
   * @inheritDoc
   */
   getDsn() {
    return this._dsn;
  }

  /**
   * @inheritDoc
   */
   getOptions() {
    return this._options;
  }

  /**
   * @see SdkMetadata in @sentry/types
   *
   * @return The metadata of the SDK
   */
   getSdkMetadata() {
    return this._options._metadata;
  }

  /**
   * @inheritDoc
   */
   getTransport() {
    return this._transport;
  }

  /**
   * @inheritDoc
   */
   flush(timeout) {
    const transport = this._transport;
    if (transport) {
      return this._isClientDoneProcessing(timeout).then(clientFinished => {
        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);
      });
    } else {
      return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["resolvedSyncPromise"])(true);
    }
  }

  /**
   * @inheritDoc
   */
   close(timeout) {
    return this.flush(timeout).then(result => {
      this.getOptions().enabled = false;
      return result;
    });
  }

  /**
   * Sets up the integrations
   */
   setupIntegrations() {
    if (this._isEnabled() && !this._integrationsInitialized) {
      this._integrations = Object(_integration_js__WEBPACK_IMPORTED_MODULE_3__["setupIntegrations"])(this._options.integrations);
      this._integrationsInitialized = true;
    }
  }

  /**
   * Gets an installed integration by its `id`.
   *
   * @returns The installed integration or `undefined` if no integration with that `id` was installed.
   */
   getIntegrationById(integrationId) {
    return this._integrations[integrationId];
  }

  /**
   * @inheritDoc
   */
   getIntegration(integration) {
    try {
      return (this._integrations[integration.id] ) || null;
    } catch (_oO) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(`Cannot retrieve integration ${integration.id} from the current Client`);
      return null;
    }
  }

  /**
   * @inheritDoc
   */
   addIntegration(integration) {
    Object(_integration_js__WEBPACK_IMPORTED_MODULE_3__["setupIntegration"])(integration, this._integrations);
  }

  /**
   * @inheritDoc
   */
   sendEvent(event, hint = {}) {
    if (this._dsn) {
      let env = Object(_envelope_js__WEBPACK_IMPORTED_MODULE_2__["createEventEnvelope"])(event, this._dsn, this._options._metadata, this._options.tunnel);

      for (const attachment of hint.attachments || []) {
        env = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["addItemToEnvelope"])(
          env,
          Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createAttachmentEnvelopeItem"])(
            attachment,
            this._options.transportOptions && this._options.transportOptions.textEncoder,
          ),
        );
      }

      const promise = this._sendEnvelope(env);
      if (promise) {
        promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);
      }
    }
  }

  /**
   * @inheritDoc
   */
   sendSession(session) {
    if (this._dsn) {
      const env = Object(_envelope_js__WEBPACK_IMPORTED_MODULE_2__["createSessionEnvelope"])(session, this._dsn, this._options._metadata, this._options.tunnel);
      void this._sendEnvelope(env);
    }
  }

  /**
   * @inheritDoc
   */
   recordDroppedEvent(reason, category, _event) {
    // Note: we use `event` in replay, where we overwrite this hook.

    if (this._options.sendClientReports) {
      // We want to track each category (error, transaction, session, replay_event) separately
      // but still keep the distinction between different type of outcomes.
      // We could use nested maps, but it's much easier to read and type this way.
      // A correct type for map-based implementation if we want to go that route
      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`
      // With typescript 4.1 we could even use template literal types
      const key = `${reason}:${category}`;
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`Adding outcome: "${key}"`);

      // The following works because undefined + 1 === NaN and NaN is falsy
      this._outcomes[key] = this._outcomes[key] + 1 || 1;
    }
  }

  // Keep on() & emit() signatures in sync with types' client.ts interface

  /** @inheritdoc */

  /** @inheritdoc */
   on(hook, callback) {
    if (!this._hooks[hook]) {
      this._hooks[hook] = [];
    }

    // @ts-ignore We assue the types are correct
    this._hooks[hook].push(callback);
  }

  /** @inheritdoc */

  /** @inheritdoc */
   emit(hook, ...rest) {
    if (this._hooks[hook]) {
      // @ts-ignore we cannot enforce the callback to match the hook
      this._hooks[hook].forEach(callback => callback(...rest));
    }
  }

  /** Updates existing session based on the provided event */
   _updateSessionFromEvent(session, event) {
    let crashed = false;
    let errored = false;
    const exceptions = event.exception && event.exception.values;

    if (exceptions) {
      errored = true;

      for (const ex of exceptions) {
        const mechanism = ex.mechanism;
        if (mechanism && mechanism.handled === false) {
          crashed = true;
          break;
        }
      }
    }

    // A session is updated and that session update is sent in only one of the two following scenarios:
    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update
    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update
    const sessionNonTerminal = session.status === 'ok';
    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);

    if (shouldUpdateAndSend) {
      Object(_session_js__WEBPACK_IMPORTED_MODULE_4__["updateSession"])(session, {
        ...(crashed && { status: 'crashed' }),
        errors: session.errors || Number(errored || crashed),
      });
      this.captureSession(session);
    }
  }

  /**
   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
   * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
   * `false` otherwise
   */
   _isClientDoneProcessing(timeout) {
    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SyncPromise"](resolve => {
      let ticked = 0;
      const tick = 1;

      const interval = setInterval(() => {
        if (this._numProcessing == 0) {
          clearInterval(interval);
          resolve(true);
        } else {
          ticked += tick;
          if (timeout && ticked >= timeout) {
            clearInterval(interval);
            resolve(false);
          }
        }
      }, tick);
    });
  }

  /** Determines whether this SDK is enabled and a valid Dsn is present. */
   _isEnabled() {
    return this.getOptions().enabled !== false && this._dsn !== undefined;
  }

  /**
   * Adds common information to events.
   *
   * The information includes release and environment from `options`,
   * breadcrumbs and context (extra, tags and user) from the scope.
   *
   * Information that is already present in the event is never overwritten. For
   * nested objects, such as the context, keys are merged.
   *
   * @param event The original event.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A new event with more information.
   */
   _prepareEvent(event, hint, scope) {
    const options = this.getOptions();
    const integrations = Object.keys(this._integrations);
    if (!hint.integrations && integrations.length > 0) {
      hint.integrations = integrations;
    }
    return Object(_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_5__["prepareEvent"])(options, event, hint, scope);
  }

  /**
   * Processes the event and logs an error in case of rejection
   * @param event
   * @param hint
   * @param scope
   */
   _captureEvent(event, hint = {}, scope) {
    return this._processEvent(event, hint, scope).then(
      finalEvent => {
        return finalEvent.event_id;
      },
      reason => {
        if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for
          // control flow, log just the message (no stack) as a log-level log.
          const sentryError = reason ;
          if (sentryError.logLevel === 'log') {
            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(sentryError.message);
          } else {
            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(sentryError);
          }
        }
        return undefined;
      },
    );
  }

  /**
   * Processes an event (either error or message) and sends it to Sentry.
   *
   * This also adds breadcrumbs and context information to the event. However,
   * platform specific meta data (such as the User's IP address) must be added
   * by the SDK implementor.
   *
   *
   * @param event The event to send to Sentry.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
   */
   _processEvent(event, hint, scope) {
    const options = this.getOptions();
    const { sampleRate } = options;

    if (!this._isEnabled()) {
      return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["rejectedSyncPromise"])(new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"]('SDK not enabled, will not capture event.', 'log'));
    }

    const isTransaction = isTransactionEvent(event);
    const isError = isErrorEvent(event);
    const eventType = event.type || 'error';
    const beforeSendLabel = `before send for type \`${eventType}\``;

    // 1.0 === 100% events are sent
    // 0.0 === 0% events are sent
    // Sampling for transaction happens somewhere else
    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {
      this.recordDroppedEvent('sample_rate', 'error', event);
      return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["rejectedSyncPromise"])(
        new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"](
          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,
          'log',
        ),
      );
    }

    const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;

    return this._prepareEvent(event, hint, scope)
      .then(prepared => {
        if (prepared === null) {
          this.recordDroppedEvent('event_processor', dataCategory, event);
          throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"]('An event processor returned `null`, will not send event.', 'log');
        }

        const isInternalException = hint.data && (hint.data ).__sentry__ === true;
        if (isInternalException) {
          return prepared;
        }

        const result = processBeforeSend(options, prepared, hint);
        return _validateBeforeSendResult(result, beforeSendLabel);
      })
      .then(processedEvent => {
        if (processedEvent === null) {
          this.recordDroppedEvent('before_send', dataCategory, event);
          throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`${beforeSendLabel} returned \`null\`, will not send event.`, 'log');
        }

        const session = scope && scope.getSession();
        if (!isTransaction && session) {
          this._updateSessionFromEvent(session, processedEvent);
        }

        // None of the Sentry built event processor will update transaction name,
        // so if the transaction name has been changed by an event processor, we know
        // it has to come from custom event processor added by a user
        const transactionInfo = processedEvent.transaction_info;
        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {
          const source = 'custom';
          processedEvent.transaction_info = {
            ...transactionInfo,
            source,
          };
        }

        this.sendEvent(processedEvent, hint);
        return processedEvent;
      })
      .then(null, reason => {
        if (reason instanceof _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"]) {
          throw reason;
        }

        this.captureException(reason, {
          data: {
            __sentry__: true,
          },
          originalException: reason,
        });
        throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"](
          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: ${reason}`,
        );
      });
  }

  /**
   * Occupies the client with processing and event
   */
   _process(promise) {
    this._numProcessing++;
    void promise.then(
      value => {
        this._numProcessing--;
        return value;
      },
      reason => {
        this._numProcessing--;
        return reason;
      },
    );
  }

  /**
   * @inheritdoc
   */
   _sendEnvelope(envelope) {
    if (this._transport && this._dsn) {
      this.emit('beforeEnvelope', envelope);

      return this._transport.send(envelope).then(null, reason => {
        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].error('Error while sending event:', reason);
      });
    } else {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].error('Transport disabled');
    }
  }

  /**
   * Clears outcomes on this client and returns them.
   */
   _clearOutcomes() {
    const outcomes = this._outcomes;
    this._outcomes = {};
    return Object.keys(outcomes).map(key => {
      const [reason, category] = key.split(':') ;
      return {
        reason,
        category,
        quantity: outcomes[key],
      };
    });
  }

  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types

}

/**
 * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.
 */
function _validateBeforeSendResult(
  beforeSendResult,
  beforeSendLabel,
) {
  const invalidValueError = `${beforeSendLabel} must return \`null\` or a valid event.`;
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isThenable"])(beforeSendResult)) {
    return beforeSendResult.then(
      event => {
        if (!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isPlainObject"])(event) && event !== null) {
          throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"](invalidValueError);
        }
        return event;
      },
      e => {
        throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`${beforeSendLabel} rejected with ${e}`);
      },
    );
  } else if (!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isPlainObject"])(beforeSendResult) && beforeSendResult !== null) {
    throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"](invalidValueError);
  }
  return beforeSendResult;
}

/**
 * Process the matching `beforeSendXXX` callback.
 */
function processBeforeSend(
  options,
  event,
  hint,
) {
  const { beforeSend, beforeSendTransaction } = options;

  if (isErrorEvent(event) && beforeSend) {
    return beforeSend(event, hint);
  }

  if (isTransactionEvent(event) && beforeSendTransaction) {
    return beforeSendTransaction(event, hint);
  }

  return event;
}

function isErrorEvent(event) {
  return event.type === undefined;
}

function isTransactionEvent(event) {
  return event.type === 'transaction';
}


//# sourceMappingURL=baseclient.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/esm/constants.js ***!
  \****************************************************/
/*! exports provided: DEFAULT_ENVIRONMENT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_ENVIRONMENT", function() { return DEFAULT_ENVIRONMENT; });
const DEFAULT_ENVIRONMENT = 'production';


//# sourceMappingURL=constants.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/envelope.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/core/esm/envelope.js ***!
  \***************************************************/
/*! exports provided: createEventEnvelope, createSessionEnvelope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEventEnvelope", function() { return createEventEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSessionEnvelope", function() { return createSessionEnvelope; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


/**
 * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.
 * Merge with existing data if any.
 **/
function enhanceEventWithSdkInfo(event, sdkInfo) {
  if (!sdkInfo) {
    return event;
  }
  event.sdk = event.sdk || {};
  event.sdk.name = event.sdk.name || sdkInfo.name;
  event.sdk.version = event.sdk.version || sdkInfo.version;
  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];
  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];
  return event;
}

/** Creates an envelope from a Session */
function createSessionEnvelope(
  session,
  dsn,
  metadata,
  tunnel,
) {
  const sdkInfo = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getSdkMetadataForEnvelopeHeader"])(metadata);
  const envelopeHeaders = {
    sent_at: new Date().toISOString(),
    ...(sdkInfo && { sdk: sdkInfo }),
    ...(!!tunnel && { dsn: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dsnToString"])(dsn) }),
  };

  const envelopeItem =
    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session];

  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createEnvelope"])(envelopeHeaders, [envelopeItem]);
}

/**
 * Create an Envelope from an event.
 */
function createEventEnvelope(
  event,
  dsn,
  metadata,
  tunnel,
) {
  const sdkInfo = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getSdkMetadataForEnvelopeHeader"])(metadata);

  /*
    Note: Due to TS, event.type may be `replay_event`, theoretically.
    In practice, we never call `createEventEnvelope` with `replay_event` type,
    and we'd have to adjut a looot of types to make this work properly.
    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)
    So the safe choice is to really guard against the replay_event type here.
  */
  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';

  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);

  const envelopeHeaders = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createEventEnvelopeHeaders"])(event, sdkInfo, tunnel, dsn);

  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to
  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may
  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid
  // of this `delete`, lest we miss putting it back in the next time the property is in use.)
  delete event.sdkProcessingMetadata;

  const eventItem = [{ type: eventType }, event];
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createEnvelope"])(envelopeHeaders, [eventItem]);
}


//# sourceMappingURL=envelope.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/exports.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/exports.js ***!
  \**************************************************/
/*! exports provided: addBreadcrumb, captureEvent, captureException, captureMessage, configureScope, setContext, setExtra, setExtras, setTag, setTags, setUser, startTransaction, withScope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addBreadcrumb", function() { return addBreadcrumb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "captureEvent", function() { return captureEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "captureException", function() { return captureException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "captureMessage", function() { return captureMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configureScope", function() { return configureScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setContext", function() { return setContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setExtra", function() { return setExtra; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setExtras", function() { return setExtras; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTag", function() { return setTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTags", function() { return setTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUser", function() { return setUser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTransaction", function() { return startTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withScope", function() { return withScope; });
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hub.js */ "./node_modules/@sentry/core/esm/hub.js");


// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,
// where HUB_FUNCTION is some method on the Hub class.
//
// This is done to make sure the top level SDK methods stay in sync with the hub methods.
// Although every method here has an explicit return type, some of them (that map to void returns) do not
// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.

/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception An exception-like object.
 * @param captureContext Additional scope data to apply to exception event.
 * @returns The generated eventId.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function captureException(exception, captureContext) {
  return Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().captureException(exception, { captureContext });
}

/**
 * Captures a message event and sends it to Sentry.
 *
 * @param message The message to send to Sentry.
 * @param Severity Define the level of the message.
 * @returns The generated eventId.
 */
function captureMessage(
  message,
  // eslint-disable-next-line deprecation/deprecation
  captureContext,
) {
  // This is necessary to provide explicit scopes upgrade, without changing the original
  // arity of the `captureMessage(message, level)` method.
  const level = typeof captureContext === 'string' ? captureContext : undefined;
  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;
  return Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().captureMessage(message, level, context);
}

/**
 * Captures a manually created event and sends it to Sentry.
 *
 * @param event The event to send to Sentry.
 * @returns The generated eventId.
 */
function captureEvent(event, hint) {
  return Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().captureEvent(event, hint);
}

/**
 * Callback to set context information onto the scope.
 * @param callback Callback function that receives Scope.
 */
function configureScope(callback) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().configureScope(callback);
}

/**
 * Records a new breadcrumb which will be attached to future events.
 *
 * Breadcrumbs will be added to subsequent events to provide more context on
 * user's actions prior to an error or crash.
 *
 * @param breadcrumb The breadcrumb to record.
 */
function addBreadcrumb(breadcrumb) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().addBreadcrumb(breadcrumb);
}

/**
 * Sets context data with the given name.
 * @param name of the context
 * @param context Any kind of data. This data will be normalized.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setContext(name, context) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().setContext(name, context);
}

/**
 * Set an object that will be merged sent as extra data with the event.
 * @param extras Extras object to merge into current context.
 */
function setExtras(extras) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().setExtras(extras);
}

/**
 * Set key:value that will be sent as extra data with the event.
 * @param key String of extra
 * @param extra Any kind of data. This data will be normalized.
 */
function setExtra(key, extra) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().setExtra(key, extra);
}

/**
 * Set an object that will be merged sent as tags data with the event.
 * @param tags Tags context object to merge into current context.
 */
function setTags(tags) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().setTags(tags);
}

/**
 * Set key:value that will be sent as tags data with the event.
 *
 * Can also be used to unset a tag, by passing `undefined`.
 *
 * @param key String key of tag
 * @param value Value of tag
 */
function setTag(key, value) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().setTag(key, value);
}

/**
 * Updates user context information for future events.
 *
 * @param user User context object to be set in the current context. Pass `null` to unset the user.
 */
function setUser(user) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().setUser(user);
}

/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 *
 * This is essentially a convenience function for:
 *
 *     pushScope();
 *     callback();
 *     popScope();
 *
 * @param callback that will be enclosed into push/popScope.
 */
function withScope(callback) {
  Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().withScope(callback);
}

/**
 * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.
 *
 * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
 * new child span within the transaction or any span, call the respective `.startChild()` method.
 *
 * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
 *
 * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its
 * finished child spans will be sent to Sentry.
 *
 * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call
 * `startTransaction` directly on the hub.
 *
 * @param context Properties of the new `Transaction`.
 * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
 * default values). See {@link Options.tracesSampler}.
 *
 * @returns The transaction which was just started
 */
function startTransaction(
  context,
  customSamplingContext,
) {
  return Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().startTransaction({ ...context }, customSamplingContext);
}


//# sourceMappingURL=exports.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/hub.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/hub.js ***!
  \**********************************************/
/*! exports provided: API_VERSION, Hub, ensureHubOnCarrier, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, runWithAsyncContext, setAsyncContextStrategy, setHubOnCarrier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_VERSION", function() { return API_VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hub", function() { return Hub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureHubOnCarrier", function() { return ensureHubOnCarrier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentHub", function() { return getCurrentHub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHubFromCarrier", function() { return getHubFromCarrier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMainCarrier", function() { return getMainCarrier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeMain", function() { return makeMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runWithAsyncContext", function() { return runWithAsyncContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAsyncContextStrategy", function() { return setAsyncContextStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setHubOnCarrier", function() { return setHubOnCarrier; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@sentry/core/esm/constants.js");
/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scope.js */ "./node_modules/@sentry/core/esm/scope.js");
/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./session.js */ "./node_modules/@sentry/core/esm/session.js");





/**
 * API compatibility version of this hub.
 *
 * WARNING: This number should only be increased when the global interface
 * changes and new methods are introduced.
 *
 * @hidden
 */
const API_VERSION = 4;

/**
 * Default maximum number of breadcrumbs added to an event. Can be overwritten
 * with {@link Options.maxBreadcrumbs}.
 */
const DEFAULT_BREADCRUMBS = 100;

/**
 * @inheritDoc
 */
class Hub  {
  /** Is a {@link Layer}[] containing the client and scope */

  /** Contains the last event id of a captured event.  */

  /**
   * Creates a new instance of the hub, will push one {@link Layer} into the
   * internal stack on creation.
   *
   * @param client bound to the hub.
   * @param scope bound to the hub.
   * @param version number, higher number means higher priority.
   */
   constructor(client, scope = new _scope_js__WEBPACK_IMPORTED_MODULE_2__["Scope"](),   _version = API_VERSION) {this._version = _version;
    this._stack = [{ scope }];
    if (client) {
      this.bindClient(client);
    }
  }

  /**
   * @inheritDoc
   */
   isOlderThan(version) {
    return this._version < version;
  }

  /**
   * @inheritDoc
   */
   bindClient(client) {
    const top = this.getStackTop();
    top.client = client;
    if (client && client.setupIntegrations) {
      client.setupIntegrations();
    }
  }

  /**
   * @inheritDoc
   */
   pushScope() {
    // We want to clone the content of prev scope
    const scope = _scope_js__WEBPACK_IMPORTED_MODULE_2__["Scope"].clone(this.getScope());
    this.getStack().push({
      client: this.getClient(),
      scope,
    });
    return scope;
  }

  /**
   * @inheritDoc
   */
   popScope() {
    if (this.getStack().length <= 1) return false;
    return !!this.getStack().pop();
  }

  /**
   * @inheritDoc
   */
   withScope(callback) {
    const scope = this.pushScope();
    try {
      callback(scope);
    } finally {
      this.popScope();
    }
  }

  /**
   * @inheritDoc
   */
   getClient() {
    return this.getStackTop().client ;
  }

  /** Returns the scope of the top stack. */
   getScope() {
    return this.getStackTop().scope;
  }

  /** Returns the scope stack for domains or the process. */
   getStack() {
    return this._stack;
  }

  /** Returns the topmost scope layer in the order domain > local > process. */
   getStackTop() {
    return this._stack[this._stack.length - 1];
  }

  /**
   * @inheritDoc
   */
   captureException(exception, hint) {
    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])());
    const syntheticException = new Error('Sentry syntheticException');
    this._withClient((client, scope) => {
      client.captureException(
        exception,
        {
          originalException: exception,
          syntheticException,
          ...hint,
          event_id: eventId,
        },
        scope,
      );
    });
    return eventId;
  }

  /**
   * @inheritDoc
   */
   captureMessage(
    message,
    // eslint-disable-next-line deprecation/deprecation
    level,
    hint,
  ) {
    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])());
    const syntheticException = new Error(message);
    this._withClient((client, scope) => {
      client.captureMessage(
        message,
        level,
        {
          originalException: message,
          syntheticException,
          ...hint,
          event_id: eventId,
        },
        scope,
      );
    });
    return eventId;
  }

  /**
   * @inheritDoc
   */
   captureEvent(event, hint) {
    const eventId = hint && hint.event_id ? hint.event_id : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])();
    if (!event.type) {
      this._lastEventId = eventId;
    }

    this._withClient((client, scope) => {
      client.captureEvent(event, { ...hint, event_id: eventId }, scope);
    });
    return eventId;
  }

  /**
   * @inheritDoc
   */
   lastEventId() {
    return this._lastEventId;
  }

  /**
   * @inheritDoc
   */
   addBreadcrumb(breadcrumb, hint) {
    const { scope, client } = this.getStackTop();

    if (!client) return;

    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =
      (client.getOptions && client.getOptions()) || {};

    if (maxBreadcrumbs <= 0) return;

    const timestamp = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dateTimestampInSeconds"])();
    const mergedBreadcrumb = { timestamp, ...breadcrumb };
    const finalBreadcrumb = beforeBreadcrumb
      ? (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["consoleSandbox"])(() => beforeBreadcrumb(mergedBreadcrumb, hint)) )
      : mergedBreadcrumb;

    if (finalBreadcrumb === null) return;

    if (client.emit) {
      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);
    }

    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
  }

  /**
   * @inheritDoc
   */
   setUser(user) {
    this.getScope().setUser(user);
  }

  /**
   * @inheritDoc
   */
   setTags(tags) {
    this.getScope().setTags(tags);
  }

  /**
   * @inheritDoc
   */
   setExtras(extras) {
    this.getScope().setExtras(extras);
  }

  /**
   * @inheritDoc
   */
   setTag(key, value) {
    this.getScope().setTag(key, value);
  }

  /**
   * @inheritDoc
   */
   setExtra(key, extra) {
    this.getScope().setExtra(key, extra);
  }

  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
   setContext(name, context) {
    this.getScope().setContext(name, context);
  }

  /**
   * @inheritDoc
   */
   configureScope(callback) {
    const { scope, client } = this.getStackTop();
    if (client) {
      callback(scope);
    }
  }

  /**
   * @inheritDoc
   */
   run(callback) {
    const oldHub = makeMain(this);
    try {
      callback(this);
    } finally {
      makeMain(oldHub);
    }
  }

  /**
   * @inheritDoc
   */
   getIntegration(integration) {
    const client = this.getClient();
    if (!client) return null;
    try {
      return client.getIntegration(integration);
    } catch (_oO) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(`Cannot retrieve integration ${integration.id} from the current Hub`);
      return null;
    }
  }

  /**
   * @inheritDoc
   */
   startTransaction(context, customSamplingContext) {
    const result = this._callExtensionMethod('startTransaction', context, customSamplingContext);

    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && !result) {
      // eslint-disable-next-line no-console
      console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':
Sentry.addTracingExtensions();
Sentry.init({...});
`);
    }

    return result;
  }

  /**
   * @inheritDoc
   */
   traceHeaders() {
    return this._callExtensionMethod('traceHeaders');
  }

  /**
   * @inheritDoc
   */
   captureSession(endSession = false) {
    // both send the update and pull the session from the scope
    if (endSession) {
      return this.endSession();
    }

    // only send the update
    this._sendSessionUpdate();
  }

  /**
   * @inheritDoc
   */
   endSession() {
    const layer = this.getStackTop();
    const scope = layer.scope;
    const session = scope.getSession();
    if (session) {
      Object(_session_js__WEBPACK_IMPORTED_MODULE_3__["closeSession"])(session);
    }
    this._sendSessionUpdate();

    // the session is over; take it off of the scope
    scope.setSession();
  }

  /**
   * @inheritDoc
   */
   startSession(context) {
    const { scope, client } = this.getStackTop();
    const { release, environment = _constants_js__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_ENVIRONMENT"] } = (client && client.getOptions()) || {};

    // Will fetch userAgent if called from browser sdk
    const { userAgent } = _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"].navigator || {};

    const session = Object(_session_js__WEBPACK_IMPORTED_MODULE_3__["makeSession"])({
      release,
      environment,
      user: scope.getUser(),
      ...(userAgent && { userAgent }),
      ...context,
    });

    // End existing session if there's one
    const currentSession = scope.getSession && scope.getSession();
    if (currentSession && currentSession.status === 'ok') {
      Object(_session_js__WEBPACK_IMPORTED_MODULE_3__["updateSession"])(currentSession, { status: 'exited' });
    }
    this.endSession();

    // Afterwards we set the new session on the scope
    scope.setSession(session);

    return session;
  }

  /**
   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests
   * when Tracing is used.
   */
   shouldSendDefaultPii() {
    const client = this.getClient();
    const options = client && client.getOptions();
    return Boolean(options && options.sendDefaultPii);
  }

  /**
   * Sends the current Session on the scope
   */
   _sendSessionUpdate() {
    const { scope, client } = this.getStackTop();

    const session = scope.getSession();
    if (session && client && client.captureSession) {
      client.captureSession(session);
    }
  }

  /**
   * Internal helper function to call a method on the top client if it exists.
   *
   * @param method The method to call on the client.
   * @param args Arguments to pass to the client function.
   */
   _withClient(callback) {
    const { scope, client } = this.getStackTop();
    if (client) {
      callback(client, scope);
    }
  }

  /**
   * Calls global extension method and binding current instance to the function call
   */
  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
   _callExtensionMethod(method, ...args) {
    const carrier = getMainCarrier();
    const sentry = carrier.__SENTRY__;
    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {
      return sentry.extensions[method].apply(this, args);
    }
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(`Extension method ${method} couldn't be found, doing nothing.`);
  }
}

/**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/
function getMainCarrier() {
  _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"].__SENTRY__ = _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"].__SENTRY__ || {
    extensions: {},
    hub: undefined,
  };
  return _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"];
}

/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */
function makeMain(hub) {
  const registry = getMainCarrier();
  const oldHub = getHubFromCarrier(registry);
  setHubOnCarrier(registry, hub);
  return oldHub;
}

/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */
function getCurrentHub() {
  // Get main carrier (global for every environment)
  const registry = getMainCarrier();

  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {
    const hub = registry.__SENTRY__.acs.getCurrentHub();

    if (hub) {
      return hub;
    }
  }

  // Return hub that lives on a global object
  return getGlobalHub(registry);
}

function getGlobalHub(registry = getMainCarrier()) {
  // If there's no hub, or its an old API, assign a new one
  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {
    setHubOnCarrier(registry, new Hub());
  }

  // Return hub that lives on a global object
  return getHubFromCarrier(registry);
}

/**
 * @private Private API with no semver guarantees!
 *
 * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.
 */
function ensureHubOnCarrier(carrier, parent = getGlobalHub()) {
  // If there's no hub on current domain, or it's an old API, assign a new one
  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {
    const globalHubTopStack = parent.getStackTop();
    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, _scope_js__WEBPACK_IMPORTED_MODULE_2__["Scope"].clone(globalHubTopStack.scope)));
  }
}

/**
 * @private Private API with no semver guarantees!
 *
 * Sets the global async context strategy
 */
function setAsyncContextStrategy(strategy) {
  // Get main carrier (global for every environment)
  const registry = getMainCarrier();
  registry.__SENTRY__ = registry.__SENTRY__ || {};
  registry.__SENTRY__.acs = strategy;
}

/**
 * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.
 *
 * @param callback The callback to run in its own async context
 * @param options Options to pass to the async context strategy
 * @returns The result of the callback
 */
function runWithAsyncContext(callback, options = {}) {
  const registry = getMainCarrier();

  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {
    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);
  }

  // if there was no strategy, fallback to just calling the callback
  return callback();
}

/**
 * This will tell whether a carrier has a hub on it or not
 * @param carrier object
 */
function hasHubOnCarrier(carrier) {
  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);
}

/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */
function getHubFromCarrier(carrier) {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getGlobalSingleton"])('hub', () => new Hub(), carrier);
}

/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 * @returns A boolean indicating success or failure
 */
function setHubOnCarrier(carrier, hub) {
  if (!carrier) return false;
  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});
  __SENTRY__.hub = hub;
  return true;
}


//# sourceMappingURL=hub.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/core/esm/index.js ***!
  \************************************************/
/*! exports provided: addTracingExtensions, startIdleTransaction, IdleTransaction, TRACING_DEFAULTS, Span, spanStatusfromHttpCode, Transaction, getActiveTransaction, SpanStatus, trace, addBreadcrumb, captureEvent, captureException, captureMessage, configureScope, setContext, setExtra, setExtras, setTag, setTags, setUser, startTransaction, withScope, Hub, ensureHubOnCarrier, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, runWithAsyncContext, setAsyncContextStrategy, setHubOnCarrier, closeSession, makeSession, updateSession, SessionFlusher, Scope, addGlobalEventProcessor, getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint, BaseClient, initAndBind, createTransport, makeOfflineTransport, makeMultiplexedTransport, SDK_VERSION, getIntegrationsToSetup, Integrations, prepareEvent, hasTracingEnabled, DEFAULT_ENVIRONMENT, FunctionToString, InboundFilters, extractTraceparentData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tracing_hubextensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracing/hubextensions.js */ "./node_modules/@sentry/core/esm/tracing/hubextensions.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addTracingExtensions", function() { return _tracing_hubextensions_js__WEBPACK_IMPORTED_MODULE_0__["addTracingExtensions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startIdleTransaction", function() { return _tracing_hubextensions_js__WEBPACK_IMPORTED_MODULE_0__["startIdleTransaction"]; });

/* harmony import */ var _tracing_idletransaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracing/idletransaction.js */ "./node_modules/@sentry/core/esm/tracing/idletransaction.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IdleTransaction", function() { return _tracing_idletransaction_js__WEBPACK_IMPORTED_MODULE_1__["IdleTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TRACING_DEFAULTS", function() { return _tracing_idletransaction_js__WEBPACK_IMPORTED_MODULE_1__["TRACING_DEFAULTS"]; });

/* harmony import */ var _tracing_span_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracing/span.js */ "./node_modules/@sentry/core/esm/tracing/span.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Span", function() { return _tracing_span_js__WEBPACK_IMPORTED_MODULE_2__["Span"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spanStatusfromHttpCode", function() { return _tracing_span_js__WEBPACK_IMPORTED_MODULE_2__["spanStatusfromHttpCode"]; });

/* harmony import */ var _tracing_transaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tracing/transaction.js */ "./node_modules/@sentry/core/esm/tracing/transaction.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return _tracing_transaction_js__WEBPACK_IMPORTED_MODULE_3__["Transaction"]; });

/* harmony import */ var _tracing_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tracing/utils.js */ "./node_modules/@sentry/core/esm/tracing/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getActiveTransaction", function() { return _tracing_utils_js__WEBPACK_IMPORTED_MODULE_4__["getActiveTransaction"]; });

/* harmony import */ var _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tracing/spanstatus.js */ "./node_modules/@sentry/core/esm/tracing/spanstatus.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpanStatus", function() { return _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_5__["SpanStatus"]; });

/* harmony import */ var _tracing_trace_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tracing/trace.js */ "./node_modules/@sentry/core/esm/tracing/trace.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return _tracing_trace_js__WEBPACK_IMPORTED_MODULE_6__["trace"]; });

/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exports.js */ "./node_modules/@sentry/core/esm/exports.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addBreadcrumb", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["addBreadcrumb"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureEvent", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["captureEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureException", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["captureException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "captureMessage", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["captureMessage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "configureScope", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["configureScope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setContext", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["setContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setExtra", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["setExtra"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setExtras", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["setExtras"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setTag", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["setTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setTags", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["setTags"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setUser", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["setUser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startTransaction", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["startTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withScope", function() { return _exports_js__WEBPACK_IMPORTED_MODULE_7__["withScope"]; });

/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hub.js */ "./node_modules/@sentry/core/esm/hub.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Hub", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["Hub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ensureHubOnCarrier", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["ensureHubOnCarrier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getCurrentHub", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["getCurrentHub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getHubFromCarrier", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["getHubFromCarrier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMainCarrier", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["getMainCarrier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeMain", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["makeMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "runWithAsyncContext", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["runWithAsyncContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setAsyncContextStrategy", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["setAsyncContextStrategy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setHubOnCarrier", function() { return _hub_js__WEBPACK_IMPORTED_MODULE_8__["setHubOnCarrier"]; });

/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ "./node_modules/@sentry/core/esm/session.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "closeSession", function() { return _session_js__WEBPACK_IMPORTED_MODULE_9__["closeSession"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeSession", function() { return _session_js__WEBPACK_IMPORTED_MODULE_9__["makeSession"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "updateSession", function() { return _session_js__WEBPACK_IMPORTED_MODULE_9__["updateSession"]; });

/* harmony import */ var _sessionflusher_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sessionflusher.js */ "./node_modules/@sentry/core/esm/sessionflusher.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SessionFlusher", function() { return _sessionflusher_js__WEBPACK_IMPORTED_MODULE_10__["SessionFlusher"]; });

/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./scope.js */ "./node_modules/@sentry/core/esm/scope.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Scope", function() { return _scope_js__WEBPACK_IMPORTED_MODULE_11__["Scope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addGlobalEventProcessor", function() { return _scope_js__WEBPACK_IMPORTED_MODULE_11__["addGlobalEventProcessor"]; });

/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./api.js */ "./node_modules/@sentry/core/esm/api.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getEnvelopeEndpointWithUrlEncodedAuth", function() { return _api_js__WEBPACK_IMPORTED_MODULE_12__["getEnvelopeEndpointWithUrlEncodedAuth"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getReportDialogEndpoint", function() { return _api_js__WEBPACK_IMPORTED_MODULE_12__["getReportDialogEndpoint"]; });

/* harmony import */ var _baseclient_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./baseclient.js */ "./node_modules/@sentry/core/esm/baseclient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseClient", function() { return _baseclient_js__WEBPACK_IMPORTED_MODULE_13__["BaseClient"]; });

/* harmony import */ var _sdk_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./sdk.js */ "./node_modules/@sentry/core/esm/sdk.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initAndBind", function() { return _sdk_js__WEBPACK_IMPORTED_MODULE_14__["initAndBind"]; });

/* harmony import */ var _transports_base_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./transports/base.js */ "./node_modules/@sentry/core/esm/transports/base.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTransport", function() { return _transports_base_js__WEBPACK_IMPORTED_MODULE_15__["createTransport"]; });

/* harmony import */ var _transports_offline_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./transports/offline.js */ "./node_modules/@sentry/core/esm/transports/offline.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeOfflineTransport", function() { return _transports_offline_js__WEBPACK_IMPORTED_MODULE_16__["makeOfflineTransport"]; });

/* harmony import */ var _transports_multiplexed_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./transports/multiplexed.js */ "./node_modules/@sentry/core/esm/transports/multiplexed.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeMultiplexedTransport", function() { return _transports_multiplexed_js__WEBPACK_IMPORTED_MODULE_17__["makeMultiplexedTransport"]; });

/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./version.js */ "./node_modules/@sentry/core/esm/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SDK_VERSION", function() { return _version_js__WEBPACK_IMPORTED_MODULE_18__["SDK_VERSION"]; });

/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./integration.js */ "./node_modules/@sentry/core/esm/integration.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getIntegrationsToSetup", function() { return _integration_js__WEBPACK_IMPORTED_MODULE_19__["getIntegrationsToSetup"]; });

/* harmony import */ var _integrations_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./integrations/index.js */ "./node_modules/@sentry/core/esm/integrations/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "Integrations", function() { return _integrations_index_js__WEBPACK_IMPORTED_MODULE_20__; });
/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/prepareEvent.js */ "./node_modules/@sentry/core/esm/utils/prepareEvent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prepareEvent", function() { return _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_21__["prepareEvent"]; });

/* harmony import */ var _utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/hasTracingEnabled.js */ "./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasTracingEnabled", function() { return _utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_22__["hasTracingEnabled"]; });

/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@sentry/core/esm/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_ENVIRONMENT", function() { return _constants_js__WEBPACK_IMPORTED_MODULE_23__["DEFAULT_ENVIRONMENT"]; });

/* harmony import */ var _integrations_functiontostring_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./integrations/functiontostring.js */ "./node_modules/@sentry/core/esm/integrations/functiontostring.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionToString", function() { return _integrations_functiontostring_js__WEBPACK_IMPORTED_MODULE_24__["FunctionToString"]; });

/* harmony import */ var _integrations_inboundfilters_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./integrations/inboundfilters.js */ "./node_modules/@sentry/core/esm/integrations/inboundfilters.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InboundFilters", function() { return _integrations_inboundfilters_js__WEBPACK_IMPORTED_MODULE_25__["InboundFilters"]; });

/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_26__["extractTraceparentData"]; });





























//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/integration.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integration.js ***!
  \******************************************************/
/*! exports provided: getIntegrationsToSetup, installedIntegrations, setupIntegration, setupIntegrations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntegrationsToSetup", function() { return getIntegrationsToSetup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "installedIntegrations", function() { return installedIntegrations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupIntegration", function() { return setupIntegration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupIntegrations", function() { return setupIntegrations; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hub.js */ "./node_modules/@sentry/core/esm/hub.js");
/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scope.js */ "./node_modules/@sentry/core/esm/scope.js");




const installedIntegrations = [];

/** Map of integrations assigned to a client */

/**
 * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to
 * preseve the order of integrations in the array.
 *
 * @private
 */
function filterDuplicates(integrations) {
  const integrationsByName = {};

  integrations.forEach(currentInstance => {
    const { name } = currentInstance;

    const existingInstance = integrationsByName[name];

    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a
    // default instance to overwrite an existing user instance
    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {
      return;
    }

    integrationsByName[name] = currentInstance;
  });

  return Object.keys(integrationsByName).map(k => integrationsByName[k]);
}

/** Gets integrations to install */
function getIntegrationsToSetup(options) {
  const defaultIntegrations = options.defaultIntegrations || [];
  const userIntegrations = options.integrations;

  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class
  defaultIntegrations.forEach(integration => {
    integration.isDefaultInstance = true;
  });

  let integrations;

  if (Array.isArray(userIntegrations)) {
    integrations = [...defaultIntegrations, ...userIntegrations];
  } else if (typeof userIntegrations === 'function') {
    integrations = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["arrayify"])(userIntegrations(defaultIntegrations));
  } else {
    integrations = defaultIntegrations;
  }

  const finalIntegrations = filterDuplicates(integrations);

  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or
  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event
  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore
  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.
  const debugIndex = findIndex(finalIntegrations, integration => integration.name === 'Debug');
  if (debugIndex !== -1) {
    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);
    finalIntegrations.push(debugInstance);
  }

  return finalIntegrations;
}

/**
 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
 * integrations are added unless they were already provided before.
 * @param integrations array of integration instances
 * @param withDefault should enable default integrations
 */
function setupIntegrations(integrations) {
  const integrationIndex = {};

  integrations.forEach(integration => {
    // guard against empty provided integrations
    if (integration) {
      setupIntegration(integration, integrationIndex);
    }
  });

  return integrationIndex;
}

/** Setup a single integration.  */
function setupIntegration(integration, integrationIndex) {
  integrationIndex[integration.name] = integration;

  if (installedIntegrations.indexOf(integration.name) === -1) {
    integration.setupOnce(_scope_js__WEBPACK_IMPORTED_MODULE_2__["addGlobalEventProcessor"], _hub_js__WEBPACK_IMPORTED_MODULE_1__["getCurrentHub"]);
    installedIntegrations.push(integration.name);
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`Integration installed: ${integration.name}`);
  }
}

// Polyfill for Array.findIndex(), which is not supported in ES5
function findIndex(arr, callback) {
  for (let i = 0; i < arr.length; i++) {
    if (callback(arr[i]) === true) {
      return i;
    }
  }

  return -1;
}


//# sourceMappingURL=integration.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/integrations/functiontostring.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/functiontostring.js ***!
  \************************************************************************/
/*! exports provided: FunctionToString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionToString", function() { return FunctionToString; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


let originalFunctionToString;

/** Patch toString calls to return proper name for wrapped functions */
class FunctionToString  {constructor() { FunctionToString.prototype.__init.call(this); }
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'FunctionToString';}

  /**
   * @inheritDoc
   */
   __init() {this.name = FunctionToString.id;}

  /**
   * @inheritDoc
   */
   setupOnce() {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    originalFunctionToString = Function.prototype.toString;

    // intrinsics (like Function.prototype) might be immutable in some environments
    // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)
    try {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      Function.prototype.toString = function ( ...args) {
        const context = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getOriginalFunction"])(this) || this;
        return originalFunctionToString.apply(context, args);
      };
    } catch (e) {
      // ignore errors here, just don't patch this
    }
  }
} FunctionToString.__initStatic();


//# sourceMappingURL=functiontostring.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/integrations/inboundfilters.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/inboundfilters.js ***!
  \**********************************************************************/
/*! exports provided: InboundFilters, _mergeOptions, _shouldDropEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InboundFilters", function() { return InboundFilters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_mergeOptions", function() { return _mergeOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_shouldDropEvent", function() { return _shouldDropEvent; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


// "Script error." is hard coded into browsers for errors that it can't read.
// this is the result of a script being pulled in from an external domain and CORS.
const DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];

/** Options for the InboundFilters integration */

/** Inbound filters configurable by the user */
class InboundFilters  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'InboundFilters';}

  /**
   * @inheritDoc
   */
   __init() {this.name = InboundFilters.id;}

   constructor(  _options = {}) {this._options = _options;InboundFilters.prototype.__init.call(this);}

  /**
   * @inheritDoc
   */
   setupOnce(addGlobalEventProcessor, getCurrentHub) {
    const eventProcess = (event) => {
      const hub = getCurrentHub();
      if (hub) {
        const self = hub.getIntegration(InboundFilters);
        if (self) {
          const client = hub.getClient();
          const clientOptions = client ? client.getOptions() : {};
          const options = _mergeOptions(self._options, clientOptions);
          return _shouldDropEvent(event, options) ? null : event;
        }
      }
      return event;
    };

    eventProcess.id = this.name;
    addGlobalEventProcessor(eventProcess);
  }
} InboundFilters.__initStatic();

/** JSDoc */
function _mergeOptions(
  internalOptions = {},
  clientOptions = {},
) {
  return {
    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],
    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],
    ignoreErrors: [
      ...(internalOptions.ignoreErrors || []),
      ...(clientOptions.ignoreErrors || []),
      ...DEFAULT_IGNORE_ERRORS,
    ],
    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],
    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,
  };
}

/** JSDoc */
function _shouldDropEvent(event, options) {
  if (options.ignoreInternal && _isSentryError(event)) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(`Event dropped due to being internal Sentry Error.\nEvent: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(event)}`);
    return true;
  }
  if (_isIgnoredError(event, options.ignoreErrors)) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(
        `Event dropped due to being matched by \`ignoreErrors\` option.\nEvent: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(event)}`,
      );
    return true;
  }
  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(
        `Event dropped due to being matched by \`ignoreTransactions\` option.\nEvent: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(event)}`,
      );
    return true;
  }
  if (_isDeniedUrl(event, options.denyUrls)) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(
        `Event dropped due to being matched by \`denyUrls\` option.\nEvent: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(
          event,
        )}.\nUrl: ${_getEventFilterUrl(event)}`,
      );
    return true;
  }
  if (!_isAllowedUrl(event, options.allowUrls)) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(
        `Event dropped due to not being matched by \`allowUrls\` option.\nEvent: ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(
          event,
        )}.\nUrl: ${_getEventFilterUrl(event)}`,
      );
    return true;
  }
  return false;
}

function _isIgnoredError(event, ignoreErrors) {
  // If event.type, this is not an error
  if (event.type || !ignoreErrors || !ignoreErrors.length) {
    return false;
  }

  return _getPossibleEventMessages(event).some(message => Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["stringMatchesSomePattern"])(message, ignoreErrors));
}

function _isIgnoredTransaction(event, ignoreTransactions) {
  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {
    return false;
  }

  const name = event.transaction;
  return name ? Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["stringMatchesSomePattern"])(name, ignoreTransactions) : false;
}

function _isDeniedUrl(event, denyUrls) {
  // TODO: Use Glob instead?
  if (!denyUrls || !denyUrls.length) {
    return false;
  }
  const url = _getEventFilterUrl(event);
  return !url ? false : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["stringMatchesSomePattern"])(url, denyUrls);
}

function _isAllowedUrl(event, allowUrls) {
  // TODO: Use Glob instead?
  if (!allowUrls || !allowUrls.length) {
    return true;
  }
  const url = _getEventFilterUrl(event);
  return !url ? true : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["stringMatchesSomePattern"])(url, allowUrls);
}

function _getPossibleEventMessages(event) {
  if (event.message) {
    return [event.message];
  }
  if (event.exception) {
    try {
      const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};
      return [`${value}`, `${type}: ${value}`];
    } catch (oO) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].error(`Cannot extract message for event ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(event)}`);
      return [];
    }
  }
  return [];
}

function _isSentryError(event) {
  try {
    // @ts-ignore can't be a sentry error if undefined
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return event.exception.values[0].type === 'SentryError';
  } catch (e) {
    // ignore
  }
  return false;
}

function _getLastValidUrl(frames = []) {
  for (let i = frames.length - 1; i >= 0; i--) {
    const frame = frames[i];

    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {
      return frame.filename || null;
    }
  }

  return null;
}

function _getEventFilterUrl(event) {
  try {
    let frames;
    try {
      // @ts-ignore we only care about frames if the whole thing here is defined
      frames = event.exception.values[0].stacktrace.frames;
    } catch (e) {
      // ignore
    }
    return frames ? _getLastValidUrl(frames) : null;
  } catch (oO) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].error(`Cannot extract url for event ${Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getEventDescription"])(event)}`);
    return null;
  }
}


//# sourceMappingURL=inboundfilters.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/integrations/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/index.js ***!
  \*************************************************************/
/*! exports provided: FunctionToString, InboundFilters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _functiontostring_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functiontostring.js */ "./node_modules/@sentry/core/esm/integrations/functiontostring.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionToString", function() { return _functiontostring_js__WEBPACK_IMPORTED_MODULE_0__["FunctionToString"]; });

/* harmony import */ var _inboundfilters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inboundfilters.js */ "./node_modules/@sentry/core/esm/integrations/inboundfilters.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InboundFilters", function() { return _inboundfilters_js__WEBPACK_IMPORTED_MODULE_1__["InboundFilters"]; });



//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/scope.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/core/esm/scope.js ***!
  \************************************************/
/*! exports provided: Scope, addGlobalEventProcessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scope", function() { return Scope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addGlobalEventProcessor", function() { return addGlobalEventProcessor; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session.js */ "./node_modules/@sentry/core/esm/session.js");



/**
 * Default value for maximum number of breadcrumbs added to an event.
 */
const DEFAULT_MAX_BREADCRUMBS = 100;

/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */
class Scope  {
  /** Flag if notifying is happening. */

  /** Callback for client to receive scope changes. */

  /** Callback list that will be called after {@link applyToEvent}. */

  /** Array of breadcrumbs. */

  /** User */

  /** Tags */

  /** Extra */

  /** Contexts */

  /** Attachments */

  /**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   */

  /** Fingerprint */

  /** Severity */
  // eslint-disable-next-line deprecation/deprecation

  /** Transaction Name */

  /** Span */

  /** Session */

  /** Request Mode Session Status */

  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.

   constructor() {
    this._notifyingListeners = false;
    this._scopeListeners = [];
    this._eventProcessors = [];
    this._breadcrumbs = [];
    this._attachments = [];
    this._user = {};
    this._tags = {};
    this._extra = {};
    this._contexts = {};
    this._sdkProcessingMetadata = {};
  }

  /**
   * Inherit values from the parent scope.
   * @param scope to clone.
   */
   static clone(scope) {
    const newScope = new Scope();
    if (scope) {
      newScope._breadcrumbs = [...scope._breadcrumbs];
      newScope._tags = { ...scope._tags };
      newScope._extra = { ...scope._extra };
      newScope._contexts = { ...scope._contexts };
      newScope._user = scope._user;
      newScope._level = scope._level;
      newScope._span = scope._span;
      newScope._session = scope._session;
      newScope._transactionName = scope._transactionName;
      newScope._fingerprint = scope._fingerprint;
      newScope._eventProcessors = [...scope._eventProcessors];
      newScope._requestSession = scope._requestSession;
      newScope._attachments = [...scope._attachments];
      newScope._sdkProcessingMetadata = { ...scope._sdkProcessingMetadata };
    }
    return newScope;
  }

  /**
   * Add internal on change listener. Used for sub SDKs that need to store the scope.
   * @hidden
   */
   addScopeListener(callback) {
    this._scopeListeners.push(callback);
  }

  /**
   * @inheritDoc
   */
   addEventProcessor(callback) {
    this._eventProcessors.push(callback);
    return this;
  }

  /**
   * @inheritDoc
   */
   setUser(user) {
    this._user = user || {};
    if (this._session) {
      Object(_session_js__WEBPACK_IMPORTED_MODULE_1__["updateSession"])(this._session, { user });
    }
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   getUser() {
    return this._user;
  }

  /**
   * @inheritDoc
   */
   getRequestSession() {
    return this._requestSession;
  }

  /**
   * @inheritDoc
   */
   setRequestSession(requestSession) {
    this._requestSession = requestSession;
    return this;
  }

  /**
   * @inheritDoc
   */
   setTags(tags) {
    this._tags = {
      ...this._tags,
      ...tags,
    };
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setTag(key, value) {
    this._tags = { ...this._tags, [key]: value };
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setExtras(extras) {
    this._extra = {
      ...this._extra,
      ...extras,
    };
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setExtra(key, extra) {
    this._extra = { ...this._extra, [key]: extra };
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setFingerprint(fingerprint) {
    this._fingerprint = fingerprint;
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setLevel(
    // eslint-disable-next-line deprecation/deprecation
    level,
  ) {
    this._level = level;
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setTransactionName(name) {
    this._transactionName = name;
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setContext(key, context) {
    if (context === null) {
      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete this._contexts[key];
    } else {
      this._contexts[key] = context;
    }

    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   setSpan(span) {
    this._span = span;
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   getSpan() {
    return this._span;
  }

  /**
   * @inheritDoc
   */
   getTransaction() {
    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will
    // have a pointer to the currently-active transaction.
    const span = this.getSpan();
    return span && span.transaction;
  }

  /**
   * @inheritDoc
   */
   setSession(session) {
    if (!session) {
      delete this._session;
    } else {
      this._session = session;
    }
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   getSession() {
    return this._session;
  }

  /**
   * @inheritDoc
   */
   update(captureContext) {
    if (!captureContext) {
      return this;
    }

    if (typeof captureContext === 'function') {
      const updatedScope = (captureContext )(this);
      return updatedScope instanceof Scope ? updatedScope : this;
    }

    if (captureContext instanceof Scope) {
      this._tags = { ...this._tags, ...captureContext._tags };
      this._extra = { ...this._extra, ...captureContext._extra };
      this._contexts = { ...this._contexts, ...captureContext._contexts };
      if (captureContext._user && Object.keys(captureContext._user).length) {
        this._user = captureContext._user;
      }
      if (captureContext._level) {
        this._level = captureContext._level;
      }
      if (captureContext._fingerprint) {
        this._fingerprint = captureContext._fingerprint;
      }
      if (captureContext._requestSession) {
        this._requestSession = captureContext._requestSession;
      }
    } else if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isPlainObject"])(captureContext)) {
      // eslint-disable-next-line no-param-reassign
      captureContext = captureContext ;
      this._tags = { ...this._tags, ...captureContext.tags };
      this._extra = { ...this._extra, ...captureContext.extra };
      this._contexts = { ...this._contexts, ...captureContext.contexts };
      if (captureContext.user) {
        this._user = captureContext.user;
      }
      if (captureContext.level) {
        this._level = captureContext.level;
      }
      if (captureContext.fingerprint) {
        this._fingerprint = captureContext.fingerprint;
      }
      if (captureContext.requestSession) {
        this._requestSession = captureContext.requestSession;
      }
    }

    return this;
  }

  /**
   * @inheritDoc
   */
   clear() {
    this._breadcrumbs = [];
    this._tags = {};
    this._extra = {};
    this._user = {};
    this._contexts = {};
    this._level = undefined;
    this._transactionName = undefined;
    this._fingerprint = undefined;
    this._requestSession = undefined;
    this._span = undefined;
    this._session = undefined;
    this._notifyScopeListeners();
    this._attachments = [];
    return this;
  }

  /**
   * @inheritDoc
   */
   addBreadcrumb(breadcrumb, maxBreadcrumbs) {
    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;

    // No data has been changed, so don't notify scope listeners
    if (maxCrumbs <= 0) {
      return this;
    }

    const mergedBreadcrumb = {
      timestamp: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dateTimestampInSeconds"])(),
      ...breadcrumb,
    };
    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);
    this._notifyScopeListeners();

    return this;
  }

  /**
   * @inheritDoc
   */
   getLastBreadcrumb() {
    return this._breadcrumbs[this._breadcrumbs.length - 1];
  }

  /**
   * @inheritDoc
   */
   clearBreadcrumbs() {
    this._breadcrumbs = [];
    this._notifyScopeListeners();
    return this;
  }

  /**
   * @inheritDoc
   */
   addAttachment(attachment) {
    this._attachments.push(attachment);
    return this;
  }

  /**
   * @inheritDoc
   */
   getAttachments() {
    return this._attachments;
  }

  /**
   * @inheritDoc
   */
   clearAttachments() {
    this._attachments = [];
    return this;
  }

  /**
   * Applies data from the scope to the event and runs all event processors on it.
   *
   * @param event Event
   * @param hint Object containing additional information about the original exception, for use by the event processors.
   * @hidden
   */
   applyToEvent(event, hint = {}) {
    if (this._extra && Object.keys(this._extra).length) {
      event.extra = { ...this._extra, ...event.extra };
    }
    if (this._tags && Object.keys(this._tags).length) {
      event.tags = { ...this._tags, ...event.tags };
    }
    if (this._user && Object.keys(this._user).length) {
      event.user = { ...this._user, ...event.user };
    }
    if (this._contexts && Object.keys(this._contexts).length) {
      event.contexts = { ...this._contexts, ...event.contexts };
    }
    if (this._level) {
      event.level = this._level;
    }
    if (this._transactionName) {
      event.transaction = this._transactionName;
    }

    // We want to set the trace context for normal events only if there isn't already
    // a trace context on the event. There is a product feature in place where we link
    // errors with transaction and it relies on that.
    if (this._span) {
      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };
      const transaction = this._span.transaction;
      if (transaction) {
        event.sdkProcessingMetadata = {
          dynamicSamplingContext: transaction.getDynamicSamplingContext(),
          ...event.sdkProcessingMetadata,
        };
        const transactionName = transaction.name;
        if (transactionName) {
          event.tags = { transaction: transactionName, ...event.tags };
        }
      }
    }

    this._applyFingerprint(event);

    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];
    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;

    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };

    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);
  }

  /**
   * Add data which will be accessible during event processing but won't get sent to Sentry
   */
   setSDKProcessingMetadata(newData) {
    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };

    return this;
  }

  /**
   * This will be called after {@link applyToEvent} is finished.
   */
   _notifyEventProcessors(
    processors,
    event,
    hint,
    index = 0,
  ) {
    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SyncPromise"]((resolve, reject) => {
      const processor = processors[index];
      if (event === null || typeof processor !== 'function') {
        resolve(event);
      } else {
        const result = processor({ ...event }, hint) ;

        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
          processor.id &&
          result === null &&
          _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`Event processor "${processor.id}" dropped event`);

        if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isThenable"])(result)) {
          void result
            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))
            .then(null, reject);
        } else {
          void this._notifyEventProcessors(processors, result, hint, index + 1)
            .then(resolve)
            .then(null, reject);
        }
      }
    });
  }

  /**
   * This will be called on every set call.
   */
   _notifyScopeListeners() {
    // We need this check for this._notifyingListeners to be able to work on scope during updates
    // If this check is not here we'll produce endless recursion when something is done with the scope
    // during the callback.
    if (!this._notifyingListeners) {
      this._notifyingListeners = true;
      this._scopeListeners.forEach(callback => {
        callback(this);
      });
      this._notifyingListeners = false;
    }
  }

  /**
   * Applies fingerprint from the scope to the event if there's one,
   * uses message if there's one instead or get rid of empty fingerprint
   */
   _applyFingerprint(event) {
    // Make sure it's an array first and we actually have something in place
    event.fingerprint = event.fingerprint ? Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["arrayify"])(event.fingerprint) : [];

    // If we have something on the scope, then merge it with event
    if (this._fingerprint) {
      event.fingerprint = event.fingerprint.concat(this._fingerprint);
    }

    // If we have no data at all, remove empty array default
    if (event.fingerprint && !event.fingerprint.length) {
      delete event.fingerprint;
    }
  }
}

/**
 * Returns the global event processors.
 */
function getGlobalEventProcessors() {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["getGlobalSingleton"])('globalEventProcessors', () => []);
}

/**
 * Add a EventProcessor to be kept globally.
 * @param callback EventProcessor to add
 */
function addGlobalEventProcessor(callback) {
  getGlobalEventProcessors().push(callback);
}


//# sourceMappingURL=scope.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/sdk.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/sdk.js ***!
  \**********************************************/
/*! exports provided: initAndBind */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAndBind", function() { return initAndBind; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hub.js */ "./node_modules/@sentry/core/esm/hub.js");



/** A class object that can instantiate Client objects. */

/**
 * Internal function to create a new SDK client instance. The client is
 * installed and then bound to the current scope.
 *
 * @param clientClass The client class to instantiate.
 * @param options Options to pass to the client.
 */
function initAndBind(
  clientClass,
  options,
) {
  if (options.debug === true) {
    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].enable();
    } else {
      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped
      // eslint-disable-next-line no-console
      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');
    }
  }
  const hub = Object(_hub_js__WEBPACK_IMPORTED_MODULE_1__["getCurrentHub"])();
  const scope = hub.getScope();
  scope.update(options.initialScope);

  const client = new clientClass(options);
  hub.bindClient(client);
}


//# sourceMappingURL=sdk.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/session.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/session.js ***!
  \**************************************************/
/*! exports provided: closeSession, makeSession, updateSession */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeSession", function() { return closeSession; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeSession", function() { return makeSession; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateSession", function() { return updateSession; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


/**
 * Creates a new `Session` object by setting certain default parameters. If optional @param context
 * is passed, the passed properties are applied to the session object.
 *
 * @param context (optional) additional properties to be applied to the returned session object
 *
 * @returns a new `Session` object
 */
function makeSession(context) {
  // Both timestamp and started are in seconds since the UNIX epoch.
  const startingTime = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])();

  const session = {
    sid: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])(),
    init: true,
    timestamp: startingTime,
    started: startingTime,
    duration: 0,
    status: 'ok',
    errors: 0,
    ignoreDuration: false,
    toJSON: () => sessionToJSON(session),
  };

  if (context) {
    updateSession(session, context);
  }

  return session;
}

/**
 * Updates a session object with the properties passed in the context.
 *
 * Note that this function mutates the passed object and returns void.
 * (Had to do this instead of returning a new and updated session because closing and sending a session
 * makes an update to the session after it was passed to the sending logic.
 * @see BaseClient.captureSession )
 *
 * @param session the `Session` to update
 * @param context the `SessionContext` holding the properties that should be updated in @param session
 */
// eslint-disable-next-line complexity
function updateSession(session, context = {}) {
  if (context.user) {
    if (!session.ipAddress && context.user.ip_address) {
      session.ipAddress = context.user.ip_address;
    }

    if (!session.did && !context.did) {
      session.did = context.user.id || context.user.email || context.user.username;
    }
  }

  session.timestamp = context.timestamp || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])();

  if (context.ignoreDuration) {
    session.ignoreDuration = context.ignoreDuration;
  }
  if (context.sid) {
    // Good enough uuid validation. — Kamil
    session.sid = context.sid.length === 32 ? context.sid : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])();
  }
  if (context.init !== undefined) {
    session.init = context.init;
  }
  if (!session.did && context.did) {
    session.did = `${context.did}`;
  }
  if (typeof context.started === 'number') {
    session.started = context.started;
  }
  if (session.ignoreDuration) {
    session.duration = undefined;
  } else if (typeof context.duration === 'number') {
    session.duration = context.duration;
  } else {
    const duration = session.timestamp - session.started;
    session.duration = duration >= 0 ? duration : 0;
  }
  if (context.release) {
    session.release = context.release;
  }
  if (context.environment) {
    session.environment = context.environment;
  }
  if (!session.ipAddress && context.ipAddress) {
    session.ipAddress = context.ipAddress;
  }
  if (!session.userAgent && context.userAgent) {
    session.userAgent = context.userAgent;
  }
  if (typeof context.errors === 'number') {
    session.errors = context.errors;
  }
  if (context.status) {
    session.status = context.status;
  }
}

/**
 * Closes a session by setting its status and updating the session object with it.
 * Internally calls `updateSession` to update the passed session object.
 *
 * Note that this function mutates the passed session (@see updateSession for explanation).
 *
 * @param session the `Session` object to be closed
 * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,
 *               this function will keep the previously set status, unless it was `'ok'` in which case
 *               it is changed to `'exited'`.
 */
function closeSession(session, status) {
  let context = {};
  if (status) {
    context = { status };
  } else if (session.status === 'ok') {
    context = { status: 'exited' };
  }

  updateSession(session, context);
}

/**
 * Serializes a passed session object to a JSON object with a slightly different structure.
 * This is necessary because the Sentry backend requires a slightly different schema of a session
 * than the one the JS SDKs use internally.
 *
 * @param session the session to be converted
 *
 * @returns a JSON object of the passed session
 */
function sessionToJSON(session) {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])({
    sid: `${session.sid}`,
    init: session.init,
    // Make sure that sec is converted to ms for date constructor
    started: new Date(session.started * 1000).toISOString(),
    timestamp: new Date(session.timestamp * 1000).toISOString(),
    status: session.status,
    errors: session.errors,
    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,
    duration: session.duration,
    attrs: {
      release: session.release,
      environment: session.environment,
      ip_address: session.ipAddress,
      user_agent: session.userAgent,
    },
  });
}


//# sourceMappingURL=session.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/sessionflusher.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/sessionflusher.js ***!
  \*********************************************************/
/*! exports provided: SessionFlusher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionFlusher", function() { return SessionFlusher; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hub.js */ "./node_modules/@sentry/core/esm/hub.js");



/**
 * @inheritdoc
 */
class SessionFlusher  {
    __init() {this.flushTimeout = 60;}
   __init2() {this._pendingAggregates = {};}

   __init3() {this._isEnabled = true;}

   constructor(client, attrs) {SessionFlusher.prototype.__init.call(this);SessionFlusher.prototype.__init2.call(this);SessionFlusher.prototype.__init3.call(this);
    this._client = client;
    // Call to setInterval, so that flush is called every 60 seconds
    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);
    this._sessionAttrs = attrs;
  }

  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */
   flush() {
    const sessionAggregates = this.getSessionAggregates();
    if (sessionAggregates.aggregates.length === 0) {
      return;
    }
    this._pendingAggregates = {};
    this._client.sendSession(sessionAggregates);
  }

  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */
   getSessionAggregates() {
    const aggregates = Object.keys(this._pendingAggregates).map((key) => {
      return this._pendingAggregates[parseInt(key)];
    });

    const sessionAggregates = {
      attrs: this._sessionAttrs,
      aggregates,
    };
    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])(sessionAggregates);
  }

  /** JSDoc */
   close() {
    clearInterval(this._intervalId);
    this._isEnabled = false;
    this.flush();
  }

  /**
   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then
   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to
   * `_incrementSessionStatusCount` along with the start date
   */
   incrementSessionStatusCount() {
    if (!this._isEnabled) {
      return;
    }
    const scope = Object(_hub_js__WEBPACK_IMPORTED_MODULE_1__["getCurrentHub"])().getScope();
    const requestSession = scope.getRequestSession();

    if (requestSession && requestSession.status) {
      this._incrementSessionStatusCount(requestSession.status, new Date());
      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in
      // case captureRequestSession is called more than once to prevent double count
      scope.setRequestSession(undefined);
      /* eslint-enable @typescript-eslint/no-unsafe-member-access */
    }
  }

  /**
   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of
   * the session received
   */
   _incrementSessionStatusCount(status, date) {
    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys
    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);
    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};

    // corresponds to aggregated sessions in one specific minute bucket
    // for example, {"started":"2021-03-16T08:00:00.000Z","exited":4, "errored": 1}
    const aggregationCounts = this._pendingAggregates[sessionStartedTrunc];
    if (!aggregationCounts.started) {
      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();
    }

    switch (status) {
      case 'errored':
        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;
        return aggregationCounts.errored;
      case 'ok':
        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;
        return aggregationCounts.exited;
      default:
        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;
        return aggregationCounts.crashed;
    }
  }
}


//# sourceMappingURL=sessionflusher.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/errors.js ***!
  \*********************************************************/
/*! exports provided: registerErrorInstrumentation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerErrorInstrumentation", function() { return registerErrorInstrumentation; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@sentry/core/esm/tracing/utils.js");



let errorsInstrumented = false;

/**
 * Configures global error listeners
 */
function registerErrorInstrumentation() {
  if (errorsInstrumented) {
    return;
  }

  errorsInstrumented = true;
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["addInstrumentationHandler"])('error', errorCallback);
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["addInstrumentationHandler"])('unhandledrejection', errorCallback);
}

/**
 * If an error or unhandled promise occurs, we mark the active transaction as failed
 */
function errorCallback() {
  const activeTransaction = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["getActiveTransaction"])();
  if (activeTransaction) {
    const status = 'internal_error';
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`[Tracing] Transaction: ${status} -> Global error occured`);
    activeTransaction.setStatus(status);
  }
}

// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the
// node.js default exit behaviour
errorCallback.tag = 'sentry_tracingErrorCallback';


//# sourceMappingURL=errors.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/hubextensions.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/hubextensions.js ***!
  \****************************************************************/
/*! exports provided: addTracingExtensions, startIdleTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTracingExtensions", function() { return addTracingExtensions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startIdleTransaction", function() { return startIdleTransaction; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hub.js */ "./node_modules/@sentry/core/esm/hub.js");
/* harmony import */ var _utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ "./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ "./node_modules/@sentry/core/esm/tracing/errors.js");
/* harmony import */ var _idletransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./idletransaction.js */ "./node_modules/@sentry/core/esm/tracing/idletransaction.js");
/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transaction.js */ "./node_modules/@sentry/core/esm/tracing/transaction.js");







/** Returns all trace headers that are currently on the top scope. */
function traceHeaders() {
  const scope = this.getScope();
  const span = scope.getSpan();

  return span
    ? {
        'sentry-trace': span.toTraceparent(),
      }
    : {};
}

/**
 * Makes a sampling decision for the given transaction and stores it on the transaction.
 *
 * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be
 * sent to Sentry.
 *
 * @param transaction: The transaction needing a sampling decision
 * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`
 * @param samplingContext: Default and user-provided data which may be used to help make the decision
 *
 * @returns The given transaction with its `sampled` value set
 */
function sample(
  transaction,
  options,
  samplingContext,
) {
  // nothing to do if tracing is not enabled
  if (!Object(_utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_2__["hasTracingEnabled"])(options)) {
    transaction.sampled = false;
    return transaction;
  }

  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that
  if (transaction.sampled !== undefined) {
    transaction.setMetadata({
      sampleRate: Number(transaction.sampled),
    });
    return transaction;
  }

  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should
  // work; prefer the hook if so
  let sampleRate;
  if (typeof options.tracesSampler === 'function') {
    sampleRate = options.tracesSampler(samplingContext);
    transaction.setMetadata({
      sampleRate: Number(sampleRate),
    });
  } else if (samplingContext.parentSampled !== undefined) {
    sampleRate = samplingContext.parentSampled;
  } else if (typeof options.tracesSampleRate !== 'undefined') {
    sampleRate = options.tracesSampleRate;
    transaction.setMetadata({
      sampleRate: Number(sampleRate),
    });
  } else {
    // When `enableTracing === true`, we use a sample rate of 100%
    sampleRate = 1;
    transaction.setMetadata({
      sampleRate,
    });
  }

  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The
  // only valid values are booleans or numbers between 0 and 1.)
  if (!isValidSampleRate(sampleRate)) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('[Tracing] Discarding transaction because of invalid sample rate.');
    transaction.sampled = false;
    return transaction;
  }

  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped
  if (!sampleRate) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(
        `[Tracing] Discarding transaction because ${
          typeof options.tracesSampler === 'function'
            ? 'tracesSampler returned 0 or false'
            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'
        }`,
      );
    transaction.sampled = false;
    return transaction;
  }

  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
  transaction.sampled = Math.random() < (sampleRate );

  // if we're not going to keep it, we're done
  if (!transaction.sampled) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(
        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(
          sampleRate,
        )})`,
      );
    return transaction;
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);
  return transaction;
}

/**
 * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).
 */
function isValidSampleRate(rate) {
  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isNaN"])(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(
        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(
          rate,
        )} of type ${JSON.stringify(typeof rate)}.`,
      );
    return false;
  }

  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false
  if (rate < 0 || rate > 1) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);
    return false;
  }
  return true;
}

/**
 * Creates a new transaction and adds a sampling decision if it doesn't yet have one.
 *
 * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if
 * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an
 * "extension method."
 *
 * @param this: The Hub starting the transaction
 * @param transactionContext: Data used to configure the transaction
 * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)
 *
 * @returns The new transaction
 *
 * @see {@link Hub.startTransaction}
 */
function _startTransaction(

  transactionContext,
  customSamplingContext,
) {
  const client = this.getClient();
  const options = (client && client.getOptions()) || {};

  const configInstrumenter = options.instrumenter || 'sentry';
  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';

  if (configInstrumenter !== transactionInstrumenter) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].error(
        `A transaction was started with instrumenter=\`${transactionInstrumenter}\`, but the SDK is configured with the \`${configInstrumenter}\` instrumenter.
The transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,
      );

    transactionContext.sampled = false;
  }

  let transaction = new _transaction_js__WEBPACK_IMPORTED_MODULE_5__["Transaction"](transactionContext, this);
  transaction = sample(transaction, options, {
    parentSampled: transactionContext.parentSampled,
    transactionContext,
    ...customSamplingContext,
  });
  if (transaction.sampled) {
    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans ));
  }
  if (client && client.emit) {
    client.emit('startTransaction', transaction);
  }
  return transaction;
}

/**
 * Create new idle transaction.
 */
function startIdleTransaction(
  hub,
  transactionContext,
  idleTimeout,
  finalTimeout,
  onScope,
  customSamplingContext,
  heartbeatInterval,
) {
  const client = hub.getClient();
  const options = (client && client.getOptions()) || {};

  let transaction = new _idletransaction_js__WEBPACK_IMPORTED_MODULE_4__["IdleTransaction"](transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);
  transaction = sample(transaction, options, {
    parentSampled: transactionContext.parentSampled,
    transactionContext,
    ...customSamplingContext,
  });
  if (transaction.sampled) {
    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans ));
  }
  if (client && client.emit) {
    client.emit('startTransaction', transaction);
  }
  return transaction;
}

/**
 * Adds tracing extensions to the global hub.
 */
function addTracingExtensions() {
  const carrier = Object(_hub_js__WEBPACK_IMPORTED_MODULE_1__["getMainCarrier"])();
  if (!carrier.__SENTRY__) {
    return;
  }
  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
  if (!carrier.__SENTRY__.extensions.startTransaction) {
    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;
  }
  if (!carrier.__SENTRY__.extensions.traceHeaders) {
    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
  }

  Object(_errors_js__WEBPACK_IMPORTED_MODULE_3__["registerErrorInstrumentation"])();
}


//# sourceMappingURL=hubextensions.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/idletransaction.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/idletransaction.js ***!
  \******************************************************************/
/*! exports provided: IdleTransaction, IdleTransactionSpanRecorder, TRACING_DEFAULTS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IdleTransaction", function() { return IdleTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IdleTransactionSpanRecorder", function() { return IdleTransactionSpanRecorder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRACING_DEFAULTS", function() { return TRACING_DEFAULTS; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _span_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./span.js */ "./node_modules/@sentry/core/esm/tracing/span.js");
/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction.js */ "./node_modules/@sentry/core/esm/tracing/transaction.js");




const TRACING_DEFAULTS = {
  idleTimeout: 1000,
  finalTimeout: 30000,
  heartbeatInterval: 5000,
};

const FINISH_REASON_TAG = 'finishReason';

const IDLE_TRANSACTION_FINISH_REASONS = [
  'heartbeatFailed',
  'idleTimeout',
  'documentHidden',
  'finalTimeout',
  'externalFinish',
  'cancelled',
];

/**
 * @inheritDoc
 */
class IdleTransactionSpanRecorder extends _span_js__WEBPACK_IMPORTED_MODULE_1__["SpanRecorder"] {
   constructor(
      _pushActivity,
      _popActivity,
     transactionSpanId,
    maxlen,
  ) {
    super(maxlen);this._pushActivity = _pushActivity;this._popActivity = _popActivity;this.transactionSpanId = transactionSpanId;  }

  /**
   * @inheritDoc
   */
   add(span) {
    // We should make sure we do not push and pop activities for
    // the transaction that this span recorder belongs to.
    if (span.spanId !== this.transactionSpanId) {
      // We patch span.finish() to pop an activity after setting an endTimestamp.
      span.finish = (endTimestamp) => {
        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])();
        this._popActivity(span.spanId);
      };

      // We should only push new activities if the span does not have an end timestamp.
      if (span.endTimestamp === undefined) {
        this._pushActivity(span.spanId);
      }
    }

    super.add(span);
  }
}

/**
 * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.
 * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will
 * put itself on the scope on creation.
 */
class IdleTransaction extends _transaction_js__WEBPACK_IMPORTED_MODULE_2__["Transaction"] {
  // Activities store a list of active spans
   __init() {this.activities = {};}

  // Track state of activities in previous heartbeat

  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.
   __init2() {this._heartbeatCounter = 0;}

  // We should not use heartbeat if we finished a transaction
   __init3() {this._finished = false;}

  // Idle timeout was canceled and we should finish the transaction with the last span end.
   __init4() {this._idleTimeoutCanceledPermanently = false;}

    __init5() {this._beforeFinishCallbacks = [];}

  /**
   * Timer that tracks Transaction idleTimeout
   */

   __init6() {this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[4];}

   constructor(
    transactionContext,
      _idleHub,
    /**
     * The time to wait in ms until the idle transaction will be finished. This timer is started each time
     * there are no active spans on this transaction.
     */
      _idleTimeout = TRACING_DEFAULTS.idleTimeout,
    /**
     * The final value in ms that a transaction cannot exceed
     */
      _finalTimeout = TRACING_DEFAULTS.finalTimeout,
      _heartbeatInterval = TRACING_DEFAULTS.heartbeatInterval,
    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends
      _onScope = false,
  ) {
    super(transactionContext, _idleHub);this._idleHub = _idleHub;this._idleTimeout = _idleTimeout;this._finalTimeout = _finalTimeout;this._heartbeatInterval = _heartbeatInterval;this._onScope = _onScope;IdleTransaction.prototype.__init.call(this);IdleTransaction.prototype.__init2.call(this);IdleTransaction.prototype.__init3.call(this);IdleTransaction.prototype.__init4.call(this);IdleTransaction.prototype.__init5.call(this);IdleTransaction.prototype.__init6.call(this);
    if (_onScope) {
      // We set the transaction here on the scope so error events pick up the trace
      // context and attach it to the error.
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);
      _idleHub.configureScope(scope => scope.setSpan(this));
    }

    this._restartIdleTimeout();
    setTimeout(() => {
      if (!this._finished) {
        this.setStatus('deadline_exceeded');
        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[3];
        this.finish();
      }
    }, this._finalTimeout);
  }

  /** {@inheritDoc} */
   finish(endTimestamp = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])()) {
    this._finished = true;
    this.activities = {};

    if (this.op === 'ui.action.click') {
      this.setTag(FINISH_REASON_TAG, this._finishReason);
    }

    if (this.spanRecorder) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);

      for (const callback of this._beforeFinishCallbacks) {
        callback(this, endTimestamp);
      }

      this.spanRecorder.spans = this.spanRecorder.spans.filter((span) => {
        // If we are dealing with the transaction itself, we just return it
        if (span.spanId === this.spanId) {
          return true;
        }

        // We cancel all pending spans with status "cancelled" to indicate the idle transaction was finished early
        if (!span.endTimestamp) {
          span.endTimestamp = endTimestamp;
          span.setStatus('cancelled');
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));
        }

        const keepSpan = span.startTimestamp < endTimestamp;
        if (!keepSpan) {
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(
              '[Tracing] discarding Span since it happened after Transaction was finished',
              JSON.stringify(span, undefined, 2),
            );
        }
        return keepSpan;
      });

      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] flushing IdleTransaction');
    } else {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] No active IdleTransaction');
    }

    // if `this._onScope` is `true`, the transaction put itself on the scope when it started
    if (this._onScope) {
      const scope = this._idleHub.getScope();
      if (scope.getTransaction() === this) {
        scope.setSpan(undefined);
      }
    }

    return super.finish(endTimestamp);
  }

  /**
   * Register a callback function that gets excecuted before the transaction finishes.
   * Useful for cleanup or if you want to add any additional spans based on current context.
   *
   * This is exposed because users have no other way of running something before an idle transaction
   * finishes.
   */
   registerBeforeFinishCallback(callback) {
    this._beforeFinishCallbacks.push(callback);
  }

  /**
   * @inheritDoc
   */
   initSpanRecorder(maxlen) {
    if (!this.spanRecorder) {
      const pushActivity = (id) => {
        if (this._finished) {
          return;
        }
        this._pushActivity(id);
      };
      const popActivity = (id) => {
        if (this._finished) {
          return;
        }
        this._popActivity(id);
      };

      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);

      // Start heartbeat so that transactions do not run forever.
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('Starting heartbeat');
      this._pingHeartbeat();
    }
    this.spanRecorder.add(this);
  }

  /**
   * Cancels the existing idle timeout, if there is one.
   * @param restartOnChildSpanChange Default is `true`.
   *                                 If set to false the transaction will end
   *                                 with the last child span.
   */
   cancelIdleTimeout(
    endTimestamp,
    {
      restartOnChildSpanChange,
    }

 = {
      restartOnChildSpanChange: true,
    },
  ) {
    this._idleTimeoutCanceledPermanently = restartOnChildSpanChange === false;
    if (this._idleTimeoutID) {
      clearTimeout(this._idleTimeoutID);
      this._idleTimeoutID = undefined;

      if (Object.keys(this.activities).length === 0 && this._idleTimeoutCanceledPermanently) {
        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];
        this.finish(endTimestamp);
      }
    }
  }

  /**
   * Temporary method used to externally set the transaction's `finishReason`
   *
   * ** WARNING**
   * This is for the purpose of experimentation only and will be removed in the near future, do not use!
   *
   * @internal
   *
   */
   setFinishReason(reason) {
    this._finishReason = reason;
  }

  /**
   * Restarts idle timeout, if there is no running idle timeout it will start one.
   */
   _restartIdleTimeout(endTimestamp) {
    this.cancelIdleTimeout();
    this._idleTimeoutID = setTimeout(() => {
      if (!this._finished && Object.keys(this.activities).length === 0) {
        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[1];
        this.finish(endTimestamp);
      }
    }, this._idleTimeout);
  }

  /**
   * Start tracking a specific activity.
   * @param spanId The span id that represents the activity
   */
   _pushActivity(spanId) {
    this.cancelIdleTimeout(undefined, { restartOnChildSpanChange: !this._idleTimeoutCanceledPermanently });
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`[Tracing] pushActivity: ${spanId}`);
    this.activities[spanId] = true;
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] new activities count', Object.keys(this.activities).length);
  }

  /**
   * Remove an activity from usage
   * @param spanId The span id that represents the activity
   */
   _popActivity(spanId) {
    if (this.activities[spanId]) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`[Tracing] popActivity ${spanId}`);
      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete this.activities[spanId];
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] new activities count', Object.keys(this.activities).length);
    }

    if (Object.keys(this.activities).length === 0) {
      const endTimestamp = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])();
      if (this._idleTimeoutCanceledPermanently) {
        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];
        this.finish(endTimestamp);
      } else {
        // We need to add the timeout here to have the real endtimestamp of the transaction
        // Remember timestampInSeconds is in seconds, timeout is in ms
        this._restartIdleTimeout(endTimestamp + this._idleTimeout / 1000);
      }
    }
  }

  /**
   * Checks when entries of this.activities are not changing for 3 beats.
   * If this occurs we finish the transaction.
   */
   _beat() {
    // We should not be running heartbeat if the idle transaction is finished.
    if (this._finished) {
      return;
    }

    const heartbeatString = Object.keys(this.activities).join('');

    if (heartbeatString === this._prevHeartbeatString) {
      this._heartbeatCounter++;
    } else {
      this._heartbeatCounter = 1;
    }

    this._prevHeartbeatString = heartbeatString;

    if (this._heartbeatCounter >= 3) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] Transaction finished because of no change for 3 heart beats');
      this.setStatus('deadline_exceeded');
      this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[0];
      this.finish();
    } else {
      this._pingHeartbeat();
    }
  }

  /**
   * Pings the heartbeat
   */
   _pingHeartbeat() {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);
    setTimeout(() => {
      this._beat();
    }, this._heartbeatInterval);
  }
}


//# sourceMappingURL=idletransaction.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/span.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/span.js ***!
  \*******************************************************/
/*! exports provided: Span, SpanRecorder, spanStatusfromHttpCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Span", function() { return Span; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpanRecorder", function() { return SpanRecorder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanStatusfromHttpCode", function() { return spanStatusfromHttpCode; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


/**
 * Keeps track of finished spans for a given transaction
 * @internal
 * @hideconstructor
 * @hidden
 */
class SpanRecorder {
   __init() {this.spans = [];}

   constructor(maxlen = 1000) {SpanRecorder.prototype.__init.call(this);
    this._maxlen = maxlen;
  }

  /**
   * This is just so that we don't run out of memory while recording a lot
   * of spans. At some point we just stop and flush out the start of the
   * trace tree (i.e.the first n spans with the smallest
   * start_timestamp).
   */
   add(span) {
    if (this.spans.length > this._maxlen) {
      span.spanRecorder = undefined;
    } else {
      this.spans.push(span);
    }
  }
}

/**
 * Span contains all data about a span
 */
class Span  {
  /**
   * @inheritDoc
   */
   __init2() {this.traceId = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])();}

  /**
   * @inheritDoc
   */
   __init3() {this.spanId = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])().substring(16);}

  /**
   * @inheritDoc
   */

  /**
   * Internal keeper of the status
   */

  /**
   * @inheritDoc
   */

  /**
   * Timestamp in seconds when the span was created.
   */
   __init4() {this.startTimestamp = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])();}

  /**
   * Timestamp in seconds when the span ended.
   */

  /**
   * @inheritDoc
   */

  /**
   * @inheritDoc
   */

  /**
   * @inheritDoc
   */
   __init5() {this.tags = {};}

  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
   __init6() {this.data = {};}

  /**
   * List of spans that were finalized
   */

  /**
   * @inheritDoc
   */

  /**
   * The instrumenter that created this span.
   */
   __init7() {this.instrumenter = 'sentry';}

  /**
   * You should never call the constructor manually, always use `Sentry.startTransaction()`
   * or call `startChild()` on an existing span.
   * @internal
   * @hideconstructor
   * @hidden
   */
   constructor(spanContext) {Span.prototype.__init2.call(this);Span.prototype.__init3.call(this);Span.prototype.__init4.call(this);Span.prototype.__init5.call(this);Span.prototype.__init6.call(this);Span.prototype.__init7.call(this);
    if (!spanContext) {
      return this;
    }
    if (spanContext.traceId) {
      this.traceId = spanContext.traceId;
    }
    if (spanContext.spanId) {
      this.spanId = spanContext.spanId;
    }
    if (spanContext.parentSpanId) {
      this.parentSpanId = spanContext.parentSpanId;
    }
    // We want to include booleans as well here
    if ('sampled' in spanContext) {
      this.sampled = spanContext.sampled;
    }
    if (spanContext.op) {
      this.op = spanContext.op;
    }
    if (spanContext.description) {
      this.description = spanContext.description;
    }
    if (spanContext.data) {
      this.data = spanContext.data;
    }
    if (spanContext.tags) {
      this.tags = spanContext.tags;
    }
    if (spanContext.status) {
      this.status = spanContext.status;
    }
    if (spanContext.startTimestamp) {
      this.startTimestamp = spanContext.startTimestamp;
    }
    if (spanContext.endTimestamp) {
      this.endTimestamp = spanContext.endTimestamp;
    }
    if (spanContext.instrumenter) {
      this.instrumenter = spanContext.instrumenter;
    }
  }

  /**
   * @inheritDoc
   */
   startChild(
    spanContext,
  ) {
    const childSpan = new Span({
      ...spanContext,
      parentSpanId: this.spanId,
      sampled: this.sampled,
      traceId: this.traceId,
    });

    childSpan.spanRecorder = this.spanRecorder;
    if (childSpan.spanRecorder) {
      childSpan.spanRecorder.add(childSpan);
    }

    childSpan.transaction = this.transaction;

    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && childSpan.transaction) {
      const opStr = (spanContext && spanContext.op) || '< unknown op >';
      const nameStr = childSpan.transaction.name || '< unknown name >';
      const idStr = childSpan.transaction.spanId;

      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;
      childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = { logMessage };
      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(logMessage);
    }

    return childSpan;
  }

  /**
   * @inheritDoc
   */
   setTag(key, value) {
    this.tags = { ...this.tags, [key]: value };
    return this;
  }

  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
   setData(key, value) {
    this.data = { ...this.data, [key]: value };
    return this;
  }

  /**
   * @inheritDoc
   */
   setStatus(value) {
    this.status = value;
    return this;
  }

  /**
   * @inheritDoc
   */
   setHttpStatus(httpStatus) {
    this.setTag('http.status_code', String(httpStatus));
    const spanStatus = spanStatusfromHttpCode(httpStatus);
    if (spanStatus !== 'unknown_error') {
      this.setStatus(spanStatus);
    }
    return this;
  }

  /**
   * @inheritDoc
   */
   isSuccess() {
    return this.status === 'ok';
  }

  /**
   * @inheritDoc
   */
   finish(endTimestamp) {
    if (
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      // Don't call this for transactions
      this.transaction &&
      this.transaction.spanId !== this.spanId
    ) {
      const { logMessage } = this.transaction.metadata.spanMetadata[this.spanId];
      if (logMessage) {
        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log((logMessage ).replace('Starting', 'Finishing'));
      }
    }

    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["timestampInSeconds"])();
  }

  /**
   * @inheritDoc
   */
   toTraceparent() {
    let sampledString = '';
    if (this.sampled !== undefined) {
      sampledString = this.sampled ? '-1' : '-0';
    }
    return `${this.traceId}-${this.spanId}${sampledString}`;
  }

  /**
   * @inheritDoc
   */
   toContext() {
    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])({
      data: this.data,
      description: this.description,
      endTimestamp: this.endTimestamp,
      op: this.op,
      parentSpanId: this.parentSpanId,
      sampled: this.sampled,
      spanId: this.spanId,
      startTimestamp: this.startTimestamp,
      status: this.status,
      tags: this.tags,
      traceId: this.traceId,
    });
  }

  /**
   * @inheritDoc
   */
   updateWithContext(spanContext) {
    this.data = spanContext.data || {};
    this.description = spanContext.description;
    this.endTimestamp = spanContext.endTimestamp;
    this.op = spanContext.op;
    this.parentSpanId = spanContext.parentSpanId;
    this.sampled = spanContext.sampled;
    this.spanId = spanContext.spanId || this.spanId;
    this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;
    this.status = spanContext.status;
    this.tags = spanContext.tags || {};
    this.traceId = spanContext.traceId || this.traceId;

    return this;
  }

  /**
   * @inheritDoc
   */
   getTraceContext() {
    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])({
      data: Object.keys(this.data).length > 0 ? this.data : undefined,
      description: this.description,
      op: this.op,
      parent_span_id: this.parentSpanId,
      span_id: this.spanId,
      status: this.status,
      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,
      trace_id: this.traceId,
    });
  }

  /**
   * @inheritDoc
   */
   toJSON()

 {
    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])({
      data: Object.keys(this.data).length > 0 ? this.data : undefined,
      description: this.description,
      op: this.op,
      parent_span_id: this.parentSpanId,
      span_id: this.spanId,
      start_timestamp: this.startTimestamp,
      status: this.status,
      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,
      timestamp: this.endTimestamp,
      trace_id: this.traceId,
    });
  }
}

/**
 * Converts a HTTP status code into a {@link SpanStatusType}.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */
function spanStatusfromHttpCode(httpStatus) {
  if (httpStatus < 400 && httpStatus >= 100) {
    return 'ok';
  }

  if (httpStatus >= 400 && httpStatus < 500) {
    switch (httpStatus) {
      case 401:
        return 'unauthenticated';
      case 403:
        return 'permission_denied';
      case 404:
        return 'not_found';
      case 409:
        return 'already_exists';
      case 413:
        return 'failed_precondition';
      case 429:
        return 'resource_exhausted';
      default:
        return 'invalid_argument';
    }
  }

  if (httpStatus >= 500 && httpStatus < 600) {
    switch (httpStatus) {
      case 501:
        return 'unimplemented';
      case 503:
        return 'unavailable';
      case 504:
        return 'deadline_exceeded';
      default:
        return 'internal_error';
    }
  }

  return 'unknown_error';
}


//# sourceMappingURL=span.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/spanstatus.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/spanstatus.js ***!
  \*************************************************************/
/*! exports provided: SpanStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpanStatus", function() { return SpanStatus; });
/** The status of an Span.
 *
 * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type
 */
// eslint-disable-next-line import/export
var SpanStatus; (function (SpanStatus) {
  /** The operation completed successfully. */
  const Ok = 'ok'; SpanStatus["Ok"] = Ok;
  /** Deadline expired before operation could complete. */
  const DeadlineExceeded = 'deadline_exceeded'; SpanStatus["DeadlineExceeded"] = DeadlineExceeded;
  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */
  const Unauthenticated = 'unauthenticated'; SpanStatus["Unauthenticated"] = Unauthenticated;
  /** 403 Forbidden */
  const PermissionDenied = 'permission_denied'; SpanStatus["PermissionDenied"] = PermissionDenied;
  /** 404 Not Found. Some requested entity (file or directory) was not found. */
  const NotFound = 'not_found'; SpanStatus["NotFound"] = NotFound;
  /** 429 Too Many Requests */
  const ResourceExhausted = 'resource_exhausted'; SpanStatus["ResourceExhausted"] = ResourceExhausted;
  /** Client specified an invalid argument. 4xx. */
  const InvalidArgument = 'invalid_argument'; SpanStatus["InvalidArgument"] = InvalidArgument;
  /** 501 Not Implemented */
  const Unimplemented = 'unimplemented'; SpanStatus["Unimplemented"] = Unimplemented;
  /** 503 Service Unavailable */
  const Unavailable = 'unavailable'; SpanStatus["Unavailable"] = Unavailable;
  /** Other/generic 5xx. */
  const InternalError = 'internal_error'; SpanStatus["InternalError"] = InternalError;
  /** Unknown. Any non-standard HTTP status code. */
  const UnknownError = 'unknown_error'; SpanStatus["UnknownError"] = UnknownError;
  /** The operation was cancelled (typically by the user). */
  const Cancelled = 'cancelled'; SpanStatus["Cancelled"] = Cancelled;
  /** Already exists (409) */
  const AlreadyExists = 'already_exists'; SpanStatus["AlreadyExists"] = AlreadyExists;
  /** Operation was rejected because the system is not in a state required for the operation's */
  const FailedPrecondition = 'failed_precondition'; SpanStatus["FailedPrecondition"] = FailedPrecondition;
  /** The operation was aborted, typically due to a concurrency issue. */
  const Aborted = 'aborted'; SpanStatus["Aborted"] = Aborted;
  /** Operation was attempted past the valid range. */
  const OutOfRange = 'out_of_range'; SpanStatus["OutOfRange"] = OutOfRange;
  /** Unrecoverable data loss or corruption */
  const DataLoss = 'data_loss'; SpanStatus["DataLoss"] = DataLoss;
})(SpanStatus || (SpanStatus = {}));


//# sourceMappingURL=spanstatus.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/trace.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/trace.js ***!
  \********************************************************/
/*! exports provided: trace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hub.js */ "./node_modules/@sentry/core/esm/hub.js");



/**
 * Wraps a function with a transaction/span and finishes the span after the function is done.
 *
 * Note that if you have not enabled tracing extensions via `addTracingExtensions`, this function
 * will not generate spans, and the `span` returned from the callback may be undefined.
 *
 * This function is meant to be used internally and may break at any time. Use at your own risk.
 *
 * @internal
 * @private
 */
function trace(
  context,
  callback,
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onError = () => {},
) {
  const ctx = { ...context };
  // If a name is set and a description is not, set the description to the name.
  if (ctx.name !== undefined && ctx.description === undefined) {
    ctx.description = ctx.name;
  }

  const hub = Object(_hub_js__WEBPACK_IMPORTED_MODULE_1__["getCurrentHub"])();
  const scope = hub.getScope();

  const parentSpan = scope.getSpan();
  const activeSpan = parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);
  scope.setSpan(activeSpan);

  function finishAndSetSpan() {
    activeSpan && activeSpan.finish();
    hub.getScope().setSpan(parentSpan);
  }

  let maybePromiseResult;
  try {
    maybePromiseResult = callback(activeSpan);
  } catch (e) {
    activeSpan && activeSpan.setStatus('internal_error');
    onError(e);
    finishAndSetSpan();
    throw e;
  }

  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isThenable"])(maybePromiseResult)) {
    Promise.resolve(maybePromiseResult).then(
      () => {
        finishAndSetSpan();
      },
      e => {
        activeSpan && activeSpan.setStatus('internal_error');
        onError(e);
        finishAndSetSpan();
      },
    );
  } else {
    finishAndSetSpan();
  }

  return maybePromiseResult;
}


//# sourceMappingURL=trace.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/transaction.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/transaction.js ***!
  \**************************************************************/
/*! exports provided: Transaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return Transaction; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/@sentry/core/esm/constants.js");
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hub.js */ "./node_modules/@sentry/core/esm/hub.js");
/* harmony import */ var _span_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./span.js */ "./node_modules/@sentry/core/esm/tracing/span.js");





/** JSDoc */
class Transaction extends _span_js__WEBPACK_IMPORTED_MODULE_3__["Span"]  {

  /**
   * The reference to the current hub.
   */

   __init() {this._measurements = {};}

   __init2() {this._contexts = {};}

   __init3() {this._frozenDynamicSamplingContext = undefined;}

  /**
   * This constructor should never be called manually. Those instrumenting tracing should use
   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.
   * @internal
   * @hideconstructor
   * @hidden
   */
   constructor(transactionContext, hub) {
    super(transactionContext);Transaction.prototype.__init.call(this);Transaction.prototype.__init2.call(this);Transaction.prototype.__init3.call(this);
    this._hub = hub || Object(_hub_js__WEBPACK_IMPORTED_MODULE_2__["getCurrentHub"])();

    this._name = transactionContext.name || '';

    this.metadata = {
      source: 'custom',
      ...transactionContext.metadata,
      spanMetadata: {},
    };

    this._trimEnd = transactionContext.trimEnd;

    // this is because transactions are also spans, and spans have a transaction pointer
    this.transaction = this;

    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means
    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)
    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;
    if (incomingDynamicSamplingContext) {
      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`
      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };
    }
  }

  /** Getter for `name` property */
   get name() {
    return this._name;
  }

  /** Setter for `name` property, which also sets `source` as custom */
   set name(newName) {
    this.setName(newName);
  }

  /**
   * JSDoc
   */
   setName(name, source = 'custom') {
    this._name = name;
    this.metadata.source = source;
  }

  /**
   * Attaches SpanRecorder to the span itself
   * @param maxlen maximum number of spans that can be recorded
   */
   initSpanRecorder(maxlen = 1000) {
    if (!this.spanRecorder) {
      this.spanRecorder = new _span_js__WEBPACK_IMPORTED_MODULE_3__["SpanRecorder"](maxlen);
    }
    this.spanRecorder.add(this);
  }

  /**
   * @inheritDoc
   */
   setContext(key, context) {
    if (context === null) {
      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete this._contexts[key];
    } else {
      this._contexts[key] = context;
    }
  }

  /**
   * @inheritDoc
   */
   setMeasurement(name, value, unit = '') {
    this._measurements[name] = { value, unit };
  }

  /**
   * @inheritDoc
   */
   setMetadata(newMetadata) {
    this.metadata = { ...this.metadata, ...newMetadata };
  }

  /**
   * @inheritDoc
   */
   finish(endTimestamp) {
    // This transaction is already finished, so we should not flush it again.
    if (this.endTimestamp !== undefined) {
      return undefined;
    }

    if (!this.name) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('Transaction has no name, falling back to `<unlabeled transaction>`.');
      this.name = '<unlabeled transaction>';
    }

    // just sets the end timestamp
    super.finish(endTimestamp);

    const client = this._hub.getClient();
    if (client && client.emit) {
      client.emit('finishTransaction', this);
    }

    if (this.sampled !== true) {
      // At this point if `sampled !== true` we want to discard the transaction.
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');

      if (client) {
        client.recordDroppedEvent('sample_rate', 'transaction');
      }

      return undefined;
    }

    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];

    if (this._trimEnd && finishedSpans.length > 0) {
      this.endTimestamp = finishedSpans.reduce((prev, current) => {
        if (prev.endTimestamp && current.endTimestamp) {
          return prev.endTimestamp > current.endTimestamp ? prev : current;
        }
        return prev;
      }).endTimestamp;
    }

    const metadata = this.metadata;

    const transaction = {
      contexts: {
        ...this._contexts,
        // We don't want to override trace context
        trace: this.getTraceContext(),
      },
      spans: finishedSpans,
      start_timestamp: this.startTimestamp,
      tags: this.tags,
      timestamp: this.endTimestamp,
      transaction: this.name,
      type: 'transaction',
      sdkProcessingMetadata: {
        ...metadata,
        dynamicSamplingContext: this.getDynamicSamplingContext(),
      },
      ...(metadata.source && {
        transaction_info: {
          source: metadata.source,
        },
      }),
    };

    const hasMeasurements = Object.keys(this._measurements).length > 0;

    if (hasMeasurements) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(
          '[Measurements] Adding measurements to transaction',
          JSON.stringify(this._measurements, undefined, 2),
        );
      transaction.measurements = this._measurements;
    }

    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);

    return this._hub.captureEvent(transaction);
  }

  /**
   * @inheritDoc
   */
   toContext() {
    const spanContext = super.toContext();

    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])({
      ...spanContext,
      name: this.name,
      trimEnd: this._trimEnd,
    });
  }

  /**
   * @inheritDoc
   */
   updateWithContext(transactionContext) {
    super.updateWithContext(transactionContext);

    this.name = transactionContext.name || '';

    this._trimEnd = transactionContext.trimEnd;

    return this;
  }

  /**
   * @inheritdoc
   *
   * @experimental
   */
   getDynamicSamplingContext() {
    if (this._frozenDynamicSamplingContext) {
      return this._frozenDynamicSamplingContext;
    }

    const hub = this._hub || Object(_hub_js__WEBPACK_IMPORTED_MODULE_2__["getCurrentHub"])();
    const client = hub && hub.getClient();

    if (!client) return {};

    const { environment, release } = client.getOptions() || {};
    const { publicKey: public_key } = client.getDsn() || {};

    const maybeSampleRate = this.metadata.sampleRate;
    const sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;

    const { segment: user_segment } = hub.getScope().getUser() || {};

    const source = this.metadata.source;

    // We don't want to have a transaction name in the DSC if the source is "url" because URLs might contain PII
    const transaction = source && source !== 'url' ? this.name : undefined;

    const dsc = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dropUndefinedKeys"])({
      environment: environment || _constants_js__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_ENVIRONMENT"],
      release,
      transaction,
      user_segment,
      public_key,
      trace_id: this.traceId,
      sample_rate,
    });

    // Uncomment if we want to make DSC immutable
    // this._frozenDynamicSamplingContext = dsc;

    client.emit && client.emit('createDsc', dsc);

    return dsc;
  }

  /**
   * Override the current hub with a new one.
   * Used if you want another hub to finish the transaction.
   *
   * @internal
   */
   setHub(hub) {
    this._hub = hub;
  }
}


//# sourceMappingURL=transaction.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/tracing/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/utils.js ***!
  \********************************************************/
/*! exports provided: TRACEPARENT_REGEXP, extractTraceparentData, stripUrlQueryAndFragment, getActiveTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getActiveTransaction", function() { return getActiveTransaction; });
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hub.js */ "./node_modules/@sentry/core/esm/hub.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TRACEPARENT_REGEXP", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["TRACEPARENT_REGEXP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["extractTraceparentData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripUrlQueryAndFragment", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["stripUrlQueryAndFragment"]; });




/** Grabs active transaction off scope, if any */
function getActiveTransaction(maybeHub) {
  const hub = maybeHub || Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])();
  const scope = hub.getScope();
  return scope.getTransaction() ;
}


//# sourceMappingURL=utils.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/transports/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/transports/base.js ***!
  \**********************************************************/
/*! exports provided: DEFAULT_TRANSPORT_BUFFER_SIZE, createTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_TRANSPORT_BUFFER_SIZE", function() { return DEFAULT_TRANSPORT_BUFFER_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTransport", function() { return createTransport; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;

/**
 * Creates an instance of a Sentry `Transport`
 *
 * @param options
 * @param makeRequest
 */
function createTransport(
  options,
  makeRequest,
  buffer = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["makePromiseBuffer"])(
    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,
  ),
) {
  let rateLimits = {};
  const flush = (timeout) => buffer.drain(timeout);

  function send(envelope) {
    const filteredEnvelopeItems = [];

    // Drop rate limited items from envelope
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["forEachEnvelopeItem"])(envelope, (item, type) => {
      const envelopeItemDataCategory = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["envelopeItemTypeToDataCategory"])(type);
      if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["isRateLimited"])(rateLimits, envelopeItemDataCategory)) {
        const event = getEventForEnvelopeItem(item, type);
        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);
      } else {
        filteredEnvelopeItems.push(item);
      }
    });

    // Skip sending if envelope is empty after filtering out rate limited events
    if (filteredEnvelopeItems.length === 0) {
      return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["resolvedSyncPromise"])();
    }

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const filteredEnvelope = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["createEnvelope"])(envelope[0], filteredEnvelopeItems );

    // Creates client report for each item in an envelope
    const recordEnvelopeLoss = (reason) => {
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["forEachEnvelopeItem"])(filteredEnvelope, (item, type) => {
        const event = getEventForEnvelopeItem(item, type);
        options.recordDroppedEvent(reason, Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["envelopeItemTypeToDataCategory"])(type), event);
      });
    };

    const requestTask = () =>
      makeRequest({ body: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["serializeEnvelope"])(filteredEnvelope, options.textEncoder) }).then(
        response => {
          // We don't want to throw on NOK responses, but we want to at least log them
          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {
            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(`Sentry responded with status code ${response.statusCode} to sent event.`);
          }

          rateLimits = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["updateRateLimits"])(rateLimits, response);
          return response;
        },
        error => {
          recordEnvelopeLoss('network_error');
          throw error;
        },
      );

    return buffer.add(requestTask).then(
      result => result,
      error => {
        if (error instanceof _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["SentryError"]) {
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].error('Skipped sending event because buffer is full.');
          recordEnvelopeLoss('queue_overflow');
          return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["resolvedSyncPromise"])();
        } else {
          throw error;
        }
      },
    );
  }

  // We use this to identifify if the transport is the base transport
  // TODO (v8): Remove this again as we'll no longer need it
  send.__sentry__baseTransport__ = true;

  return {
    send,
    flush,
  };
}

function getEventForEnvelopeItem(item, type) {
  if (type !== 'event' && type !== 'transaction') {
    return undefined;
  }

  return Array.isArray(item) ? (item )[1] : undefined;
}


//# sourceMappingURL=base.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/transports/multiplexed.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/transports/multiplexed.js ***!
  \*****************************************************************/
/*! exports provided: makeMultiplexedTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeMultiplexedTransport", function() { return makeMultiplexedTransport; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api.js */ "./node_modules/@sentry/core/esm/api.js");



function eventFromEnvelope(env, types) {
  let event;

  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["forEachEnvelopeItem"])(env, (item, type) => {
    if (types.includes(type)) {
      event = Array.isArray(item) ? (item )[1] : undefined;
    }
    // bail out if we found an event
    return !!event;
  });

  return event;
}

/**
 * Creates a transport that can send events to different DSNs depending on the envelope contents.
 */
function makeMultiplexedTransport(
  createTransport,
  matcher,
) {
  return options => {
    const fallbackTransport = createTransport(options);
    const otherTransports = {};

    function getTransport(dsn) {
      if (!otherTransports[dsn]) {
        const url = Object(_api_js__WEBPACK_IMPORTED_MODULE_1__["getEnvelopeEndpointWithUrlEncodedAuth"])(Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dsnFromString"])(dsn));
        otherTransports[dsn] = createTransport({ ...options, url });
      }

      return otherTransports[dsn];
    }

    async function send(envelope) {
      function getEvent(types) {
        const eventTypes = types && types.length ? types : ['event'];
        return eventFromEnvelope(envelope, eventTypes);
      }

      const transports = matcher({ envelope, getEvent }).map(dsn => getTransport(dsn));

      // If we have no transports to send to, use the fallback transport
      if (transports.length === 0) {
        transports.push(fallbackTransport);
      }

      const results = await Promise.all(transports.map(transport => transport.send(envelope)));

      return results[0];
    }

    async function flush(timeout) {
      const allTransports = [...Object.keys(otherTransports).map(dsn => otherTransports[dsn]), fallbackTransport];
      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));
      return results.every(r => r);
    }

    return {
      send,
      flush,
    };
  };
}


//# sourceMappingURL=multiplexed.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/transports/offline.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/transports/offline.js ***!
  \*************************************************************/
/*! exports provided: MIN_DELAY, START_DELAY, makeOfflineTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIN_DELAY", function() { return MIN_DELAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "START_DELAY", function() { return START_DELAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeOfflineTransport", function() { return makeOfflineTransport; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");


const MIN_DELAY = 100; // 100 ms
const START_DELAY = 5000; // 5 seconds
const MAX_DELAY = 3.6e6; // 1 hour

function log(msg, error) {
  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["logger"].info(`[Offline]: ${msg}`, error);
}

/**
 * Wraps a transport and stores and retries events when they fail to send.
 *
 * @param createTransport The transport to wrap.
 */
function makeOfflineTransport(
  createTransport,
) {
  return options => {
    const transport = createTransport(options);
    const store = options.createStore ? options.createStore(options) : undefined;

    let retryDelay = START_DELAY;
    let flushTimer;

    function shouldQueue(env, error, retryDelay) {
      // We don't queue Session Replay envelopes because they are:
      // - Ordered and Replay relies on the response status to know when they're successfully sent.
      // - Likely to fill the queue quickly and block other events from being sent.
      // We also want to drop client reports because they can be generated when we retry sending events while offline.
      if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["envelopeContainsItemType"])(env, ['replay_event', 'replay_recording', 'client_report'])) {
        return false;
      }

      if (options.shouldStore) {
        return options.shouldStore(env, error, retryDelay);
      }

      return true;
    }

    function flushIn(delay) {
      if (!store) {
        return;
      }

      if (flushTimer) {
        clearTimeout(flushTimer );
      }

      flushTimer = setTimeout(async () => {
        flushTimer = undefined;

        const found = await store.pop();
        if (found) {
          log('Attempting to send previously queued event');
          void send(found).catch(e => {
            log('Failed to retry sending', e);
          });
        }
      }, delay) ;

      // We need to unref the timer in node.js, otherwise the node process never exit.
      if (typeof flushTimer !== 'number' && flushTimer.unref) {
        flushTimer.unref();
      }
    }

    function flushWithBackOff() {
      if (flushTimer) {
        return;
      }

      flushIn(retryDelay);

      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);
    }

    async function send(envelope) {
      try {
        const result = await transport.send(envelope);

        let delay = MIN_DELAY;

        if (result) {
          // If there's a retry-after header, use that as the next delay.
          if (result.headers && result.headers['retry-after']) {
            delay = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["parseRetryAfterHeader"])(result.headers['retry-after']);
          } // If we have a server error, return now so we don't flush the queue.
          else if ((result.statusCode || 0) >= 400) {
            return result;
          }
        }

        flushIn(delay);
        retryDelay = START_DELAY;
        return result;
      } catch (e) {
        if (store && (await shouldQueue(envelope, e, retryDelay))) {
          await store.insert(envelope);
          flushWithBackOff();
          log('Error sending. Event queued', e);
          return {};
        } else {
          throw e;
        }
      }
    }

    if (options.flushAtStartup) {
      flushWithBackOff();
    }

    return {
      send,
      flush: t => transport.flush(t),
    };
  };
}


//# sourceMappingURL=offline.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js ***!
  \******************************************************************/
/*! exports provided: hasTracingEnabled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasTracingEnabled", function() { return hasTracingEnabled; });
/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hub.js */ "./node_modules/@sentry/core/esm/hub.js");


// Treeshakable guard to remove all code related to tracing

/**
 * Determines if tracing is currently enabled.
 *
 * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.
 */
function hasTracingEnabled(
  maybeOptions,
) {
  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {
    return false;
  }

  const client = Object(_hub_js__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  const options = maybeOptions || (client && client.getOptions());
  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);
}


//# sourceMappingURL=hasTracingEnabled.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/utils/prepareEvent.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/prepareEvent.js ***!
  \*************************************************************/
/*! exports provided: applyDebugMetadata, prepareEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyDebugMetadata", function() { return applyDebugMetadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepareEvent", function() { return prepareEvent; });
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/@sentry/core/esm/constants.js");
/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scope.js */ "./node_modules/@sentry/core/esm/scope.js");




/**
 * Adds common information to events.
 *
 * The information includes release and environment from `options`,
 * breadcrumbs and context (extra, tags and user) from the scope.
 *
 * Information that is already present in the event is never overwritten. For
 * nested objects, such as the context, keys are merged.
 *
 * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.
 *
 * @param event The original event.
 * @param hint May contain additional information about the original exception.
 * @param scope A scope containing event metadata.
 * @returns A new event with more information.
 * @hidden
 */
function prepareEvent(
  options,
  event,
  hint,
  scope,
) {
  const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;
  const prepared = {
    ...event,
    event_id: event.event_id || hint.event_id || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["uuid4"])(),
    timestamp: event.timestamp || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["dateTimestampInSeconds"])(),
  };
  const integrations = hint.integrations || options.integrations.map(i => i.name);

  applyClientOptions(prepared, options);
  applyIntegrationsMetadata(prepared, integrations);

  // Only apply debug metadata to error events.
  if (event.type === undefined) {
    applyDebugMetadata(prepared, options.stackParser);
  }

  // If we have scope given to us, use it as the base for further modifications.
  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
  let finalScope = scope;
  if (hint.captureContext) {
    finalScope = _scope_js__WEBPACK_IMPORTED_MODULE_2__["Scope"].clone(finalScope).update(hint.captureContext);
  }

  // We prepare the result here with a resolved Event.
  let result = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["resolvedSyncPromise"])(prepared);

  // This should be the last thing called, since we want that
  // {@link Hub.addEventProcessor} gets the finished prepared event.
  //
  // We need to check for the existence of `finalScope.getAttachments`
  // because `getAttachments` can be undefined if users are using an older version
  // of `@sentry/core` that does not have the `getAttachments` method.
  // See: https://github.com/getsentry/sentry-javascript/issues/5229
  if (finalScope) {
    // Collect attachments from the hint and scope
    if (finalScope.getAttachments) {
      const attachments = [...(hint.attachments || []), ...finalScope.getAttachments()];

      if (attachments.length) {
        hint.attachments = attachments;
      }
    }

    // In case we have a hub we reassign it.
    result = finalScope.applyToEvent(prepared, hint);
  }

  return result.then(evt => {
    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {
      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);
    }
    return evt;
  });
}

/**
 *  Enhances event using the client configuration.
 *  It takes care of all "static" values like environment, release and `dist`,
 *  as well as truncating overly long values.
 * @param event event instance to be enhanced
 */
function applyClientOptions(event, options) {
  const { environment, release, dist, maxValueLength = 250 } = options;

  if (!('environment' in event)) {
    event.environment = 'environment' in options ? environment : _constants_js__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_ENVIRONMENT"];
  }

  if (event.release === undefined && release !== undefined) {
    event.release = release;
  }

  if (event.dist === undefined && dist !== undefined) {
    event.dist = dist;
  }

  if (event.message) {
    event.message = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["truncate"])(event.message, maxValueLength);
  }

  const exception = event.exception && event.exception.values && event.exception.values[0];
  if (exception && exception.value) {
    exception.value = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["truncate"])(exception.value, maxValueLength);
  }

  const request = event.request;
  if (request && request.url) {
    request.url = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["truncate"])(request.url, maxValueLength);
  }
}

const debugIdStackParserCache = new WeakMap();

/**
 * Applies debug metadata images to the event in order to apply source maps by looking up their debug ID.
 */
function applyDebugMetadata(event, stackParser) {
  const debugIdMap = _sentry_utils__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"]._sentryDebugIds;

  if (!debugIdMap) {
    return;
  }

  let debugIdStackFramesCache;
  const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);
  if (cachedDebugIdStackFrameCache) {
    debugIdStackFramesCache = cachedDebugIdStackFrameCache;
  } else {
    debugIdStackFramesCache = new Map();
    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);
  }

  // Build a map of filename -> debug_id
  const filenameDebugIdMap = Object.keys(debugIdMap).reduce((acc, debugIdStackTrace) => {
    let parsedStack;
    const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);
    if (cachedParsedStack) {
      parsedStack = cachedParsedStack;
    } else {
      parsedStack = stackParser(debugIdStackTrace);
      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);
    }

    for (let i = parsedStack.length - 1; i >= 0; i--) {
      const stackFrame = parsedStack[i];
      if (stackFrame.filename) {
        acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];
        break;
      }
    }
    return acc;
  }, {});

  // Get a Set of filenames in the stack trace
  const errorFileNames = new Set();
  try {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    event.exception.values.forEach(exception => {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      exception.stacktrace.frames.forEach(frame => {
        if (frame.filename) {
          errorFileNames.add(frame.filename);
        }
      });
    });
  } catch (e) {
    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
  }

  // Fill debug_meta information
  event.debug_meta = event.debug_meta || {};
  event.debug_meta.images = event.debug_meta.images || [];
  const images = event.debug_meta.images;
  errorFileNames.forEach(filename => {
    if (filenameDebugIdMap[filename]) {
      images.push({
        type: 'sourcemap',
        code_file: filename,
        debug_id: filenameDebugIdMap[filename],
      });
    }
  });
}

/**
 * This function adds all used integrations to the SDK info in the event.
 * @param event The event that will be filled with all integrations.
 */
function applyIntegrationsMetadata(event, integrationNames) {
  if (integrationNames.length > 0) {
    event.sdk = event.sdk || {};
    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];
  }
}

/**
 * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
 * Normalized keys:
 * - `breadcrumbs.data`
 * - `user`
 * - `contexts`
 * - `extra`
 * @param event Event
 * @returns Normalized event
 */
function normalizeEvent(event, depth, maxBreadth) {
  if (!event) {
    return null;
  }

  const normalized = {
    ...event,
    ...(event.breadcrumbs && {
      breadcrumbs: event.breadcrumbs.map(b => ({
        ...b,
        ...(b.data && {
          data: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["normalize"])(b.data, depth, maxBreadth),
        }),
      })),
    }),
    ...(event.user && {
      user: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["normalize"])(event.user, depth, maxBreadth),
    }),
    ...(event.contexts && {
      contexts: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["normalize"])(event.contexts, depth, maxBreadth),
    }),
    ...(event.extra && {
      extra: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["normalize"])(event.extra, depth, maxBreadth),
    }),
  };

  // event.contexts.trace stores information about a Transaction. Similarly,
  // event.spans[] stores information about child Spans. Given that a
  // Transaction is conceptually a Span, normalization should apply to both
  // Transactions and Spans consistently.
  // For now the decision is to skip normalization of Transactions and Spans,
  // so this block overwrites the normalized event to add back the original
  // Transaction information prior to normalization.
  if (event.contexts && event.contexts.trace && normalized.contexts) {
    normalized.contexts.trace = event.contexts.trace;

    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it
    if (event.contexts.trace.data) {
      normalized.contexts.trace.data = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["normalize"])(event.contexts.trace.data, depth, maxBreadth);
    }
  }

  // event.spans[].data may contain circular/dangerous data so we need to normalize it
  if (event.spans) {
    normalized.spans = event.spans.map(span => {
      // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable
      if (span.data) {
        span.data = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__["normalize"])(span.data, depth, maxBreadth);
      }
      return span;
    });
  }

  return normalized;
}


//# sourceMappingURL=prepareEvent.js.map


/***/ }),

/***/ "./node_modules/@sentry/core/esm/version.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/version.js ***!
  \**************************************************/
/*! exports provided: SDK_VERSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SDK_VERSION", function() { return SDK_VERSION; });
const SDK_VERSION = '7.50.0';


//# sourceMappingURL=version.js.map


/***/ }),

/***/ "./node_modules/@sentry/replay/esm/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/replay/esm/index.js ***!
  \**************************************************/
/*! exports provided: Replay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Replay", function() { return Replay; });
/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/esm/index.js");
/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/esm/index.js");



// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`
// prevents the browser package from being bundled in the CDN bundle, and avoids a
// circular dependency between the browser and replay packages should `@sentry/browser` import
// from `@sentry/replay` in the future
const WINDOW = _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["GLOBAL_OBJ"] ;

const REPLAY_SESSION_KEY = 'sentryReplaySession';
const REPLAY_EVENT_NAME = 'replay_event';
const UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';

// The idle limit for a session after which recording is paused.
const SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms

// The idle limit for a session after which the session expires.
const SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms

// The maximum length of a session
const MAX_SESSION_LIFE = 3600000; // 60 minutes in ms

/** Default flush delays */
const DEFAULT_FLUSH_MIN_DELAY = 5000;
// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it
// was the same as `wait`
const DEFAULT_FLUSH_MAX_DELAY = 5500;

/* How long to wait for error checkouts */
const BUFFER_CHECKOUT_TIME = 60000;

const RETRY_BASE_INTERVAL = 5000;
const RETRY_MAX_COUNT = 3;

/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */
const NETWORK_BODY_MAX_SIZE = 150000;

/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */
const CONSOLE_ARG_MAX_SIZE = 5000;

var NodeType$1;
(function (NodeType) {
    NodeType[NodeType["Document"] = 0] = "Document";
    NodeType[NodeType["DocumentType"] = 1] = "DocumentType";
    NodeType[NodeType["Element"] = 2] = "Element";
    NodeType[NodeType["Text"] = 3] = "Text";
    NodeType[NodeType["CDATA"] = 4] = "CDATA";
    NodeType[NodeType["Comment"] = 5] = "Comment";
})(NodeType$1 || (NodeType$1 = {}));

function isElement(n) {
    return n.nodeType === n.ELEMENT_NODE;
}
function isShadowRoot(n) {
    const host = n === null || n === void 0 ? void 0 : n.host;
    return Boolean(host && host.shadowRoot && host.shadowRoot === n);
}
function isInputTypeMasked({ maskInputOptions, tagName, type, }) {
    if (tagName.toLowerCase() === 'option') {
        tagName = 'select';
    }
    const actualType = typeof type === 'string' ? type.toLowerCase() : undefined;
    return (maskInputOptions[tagName.toLowerCase()] ||
        (actualType && maskInputOptions[actualType]) ||
        actualType === 'password' ||
        (tagName === 'input' && !type && maskInputOptions['text']));
}
function hasInputMaskOptions({ tagName, type, maskInputOptions, maskInputSelector, }) {
    return (maskInputSelector || isInputTypeMasked({ maskInputOptions, tagName, type }));
}
function maskInputValue({ input, maskInputSelector, unmaskInputSelector, maskInputOptions, tagName, type, value, maskInputFn, }) {
    let text = value || '';
    if (unmaskInputSelector && input.matches(unmaskInputSelector)) {
        return text;
    }
    if (input.hasAttribute('rr_is_password')) {
        type = 'password';
    }
    if (isInputTypeMasked({ maskInputOptions, tagName, type }) ||
        (maskInputSelector && input.matches(maskInputSelector))) {
        if (maskInputFn) {
            text = maskInputFn(text);
        }
        else {
            text = '*'.repeat(text.length);
        }
    }
    return text;
}
const ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';
function is2DCanvasBlank(canvas) {
    const ctx = canvas.getContext('2d');
    if (!ctx)
        return true;
    const chunkSize = 50;
    for (let x = 0; x < canvas.width; x += chunkSize) {
        for (let y = 0; y < canvas.height; y += chunkSize) {
            const getImageData = ctx.getImageData;
            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData
                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]
                : getImageData;
            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);
            if (pixelBuffer.some((pixel) => pixel !== 0))
                return false;
        }
    }
    return true;
}

let _id = 1;
const tagNameRegex = new RegExp('[^a-z0-9-_:]');
const IGNORED_NODE = -2;
function defaultMaskFn(str) {
    return str ? str.replace(/[\S]/g, '*') : '';
}
function genId() {
    return _id++;
}
function getValidTagName(element) {
    if (element instanceof HTMLFormElement) {
        return 'form';
    }
    const processedTagName = element.tagName.toLowerCase().trim();
    if (tagNameRegex.test(processedTagName)) {
        return 'div';
    }
    return processedTagName;
}
function getCssRulesString(s) {
    try {
        const rules = s.rules || s.cssRules;
        return rules ? Array.from(rules).map(getCssRuleString).join('') : null;
    }
    catch (error) {
        return null;
    }
}
function getCssRuleString(rule) {
    let cssStringified = rule.cssText;
    if (isCSSImportRule(rule)) {
        try {
            cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;
        }
        catch (_a) {
        }
    }
    return cssStringified;
}
function isCSSImportRule(rule) {
    return 'styleSheet' in rule;
}
function stringifyStyleSheet(sheet) {
    return sheet.cssRules
        ? Array.from(sheet.cssRules)
            .map((rule) => rule.cssText || '')
            .join('')
        : '';
}
function extractOrigin(url) {
    let origin = '';
    if (url.indexOf('//') > -1) {
        origin = url.split('/').slice(0, 3).join('/');
    }
    else {
        origin = url.split('/')[0];
    }
    origin = origin.split('?')[0];
    return origin;
}
let canvasService;
let canvasCtx;
const URL_IN_CSS_REF = /url\((?:(')([^']*)'|(")(.*?)"|([^)]*))\)/gm;
const RELATIVE_PATH = /^(?!www\.|(?:http|ftp)s?:\/\/|[A-Za-z]:\\|\/\/|#).*/;
const DATA_URI = /^(data:)([^,]*),(.*)/i;
function absoluteToStylesheet(cssText, href) {
    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {
        const filePath = path1 || path2 || path3;
        const maybeQuote = quote1 || quote2 || '';
        if (!filePath) {
            return origin;
        }
        if (!RELATIVE_PATH.test(filePath)) {
            return `url(${maybeQuote}${filePath}${maybeQuote})`;
        }
        if (DATA_URI.test(filePath)) {
            return `url(${maybeQuote}${filePath}${maybeQuote})`;
        }
        if (filePath[0] === '/') {
            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;
        }
        const stack = href.split('/');
        const parts = filePath.split('/');
        stack.pop();
        for (const part of parts) {
            if (part === '.') {
                continue;
            }
            else if (part === '..') {
                stack.pop();
            }
            else {
                stack.push(part);
            }
        }
        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;
    });
}
const SRCSET_NOT_SPACES = /^[^ \t\n\r\u000c]+/;
const SRCSET_COMMAS_OR_SPACES = /^[, \t\n\r\u000c]+/;
function getAbsoluteSrcsetString(doc, attributeValue) {
    if (attributeValue.trim() === '') {
        return attributeValue;
    }
    let pos = 0;
    function collectCharacters(regEx) {
        let chars;
        let match = regEx.exec(attributeValue.substring(pos));
        if (match) {
            chars = match[0];
            pos += chars.length;
            return chars;
        }
        return '';
    }
    let output = [];
    while (true) {
        collectCharacters(SRCSET_COMMAS_OR_SPACES);
        if (pos >= attributeValue.length) {
            break;
        }
        let url = collectCharacters(SRCSET_NOT_SPACES);
        if (url.slice(-1) === ',') {
            url = absoluteToDoc(doc, url.substring(0, url.length - 1));
            output.push(url);
        }
        else {
            let descriptorsStr = '';
            url = absoluteToDoc(doc, url);
            let inParens = false;
            while (true) {
                let c = attributeValue.charAt(pos);
                if (c === '') {
                    output.push((url + descriptorsStr).trim());
                    break;
                }
                else if (!inParens) {
                    if (c === ',') {
                        pos += 1;
                        output.push((url + descriptorsStr).trim());
                        break;
                    }
                    else if (c === '(') {
                        inParens = true;
                    }
                }
                else {
                    if (c === ')') {
                        inParens = false;
                    }
                }
                descriptorsStr += c;
                pos += 1;
            }
        }
    }
    return output.join(', ');
}
function absoluteToDoc(doc, attributeValue) {
    if (!attributeValue || attributeValue.trim() === '') {
        return attributeValue;
    }
    const a = doc.createElement('a');
    a.href = attributeValue;
    return a.href;
}
function isSVGElement(el) {
    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);
}
function getHref() {
    const a = document.createElement('a');
    a.href = '';
    return a.href;
}
function transformAttribute(doc, element, _tagName, _name, value, maskAllText, unmaskTextSelector, maskTextFn) {
    if (!value) {
        return value;
    }
    const name = _name.toLowerCase();
    const tagName = _tagName.toLowerCase();
    if (name === 'src' || name === 'href') {
        return absoluteToDoc(doc, value);
    }
    else if (name === 'xlink:href' && value[0] !== '#') {
        return absoluteToDoc(doc, value);
    }
    else if (name === 'background' &&
        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {
        return absoluteToDoc(doc, value);
    }
    else if (name === 'srcset') {
        return getAbsoluteSrcsetString(doc, value);
    }
    else if (name === 'style') {
        return absoluteToStylesheet(value, getHref());
    }
    else if (tagName === 'object' && name === 'data') {
        return absoluteToDoc(doc, value);
    }
    else if (maskAllText &&
        _shouldMaskAttribute(element, name, tagName, unmaskTextSelector)) {
        return maskTextFn ? maskTextFn(value) : defaultMaskFn(value);
    }
    return value;
}
function _shouldMaskAttribute(element, attribute, tagName, unmaskTextSelector) {
    if (unmaskTextSelector && element.matches(unmaskTextSelector)) {
        return false;
    }
    return (['placeholder', 'title', 'aria-label'].indexOf(attribute) > -1 ||
        (tagName === 'input' &&
            attribute === 'value' &&
            element.hasAttribute('type') &&
            ['submit', 'button'].indexOf(element.getAttribute('type').toLowerCase()) > -1));
}
function _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {
    if (unblockSelector && element.matches(unblockSelector)) {
        return false;
    }
    if (typeof blockClass === 'string') {
        if (element.classList.contains(blockClass)) {
            return true;
        }
    }
    else {
        for (let eIndex = 0; eIndex < element.classList.length; eIndex++) {
            const className = element.classList[eIndex];
            if (blockClass.test(className)) {
                return true;
            }
        }
    }
    if (blockSelector) {
        return element.matches(blockSelector);
    }
    return false;
}
function needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) {
    if (!node) {
        return false;
    }
    if (node.nodeType !== node.ELEMENT_NODE) {
        return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);
    }
    if (unmaskTextSelector) {
        if (node.matches(unmaskTextSelector) ||
            node.closest(unmaskTextSelector)) {
            return false;
        }
    }
    if (maskAllText) {
        return true;
    }
    if (typeof maskTextClass === 'string') {
        if (node.classList.contains(maskTextClass)) {
            return true;
        }
    }
    else {
        for (let eIndex = 0; eIndex < node.classList.length; eIndex++) {
            const className = node.classList[eIndex];
            if (maskTextClass.test(className)) {
                return true;
            }
        }
    }
    if (maskTextSelector) {
        if (node.matches(maskTextSelector)) {
            return true;
        }
    }
    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);
}
function onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {
    const win = iframeEl.contentWindow;
    if (!win) {
        return;
    }
    let fired = false;
    let readyState;
    try {
        readyState = win.document.readyState;
    }
    catch (error) {
        return;
    }
    if (readyState !== 'complete') {
        const timer = setTimeout(() => {
            if (!fired) {
                listener();
                fired = true;
            }
        }, iframeLoadTimeout);
        iframeEl.addEventListener('load', () => {
            clearTimeout(timer);
            fired = true;
            listener();
        });
        return;
    }
    const blankUrl = 'about:blank';
    if (win.location.href !== blankUrl ||
        iframeEl.src === blankUrl ||
        iframeEl.src === '') {
        setTimeout(listener, 0);
        return;
    }
    iframeEl.addEventListener('load', listener);
}
function serializeNode(n, options) {
    var _a;
    const { doc, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, } = options;
    let rootId;
    if (doc.__sn) {
        const docId = doc.__sn.id;
        rootId = docId === 1 ? undefined : docId;
    }
    switch (n.nodeType) {
        case n.DOCUMENT_NODE:
            if (n.compatMode !== 'CSS1Compat') {
                return {
                    type: NodeType$1.Document,
                    childNodes: [],
                    compatMode: n.compatMode,
                    rootId,
                };
            }
            else {
                return {
                    type: NodeType$1.Document,
                    childNodes: [],
                    rootId,
                };
            }
        case n.DOCUMENT_TYPE_NODE:
            return {
                type: NodeType$1.DocumentType,
                name: n.name,
                publicId: n.publicId,
                systemId: n.systemId,
                rootId,
            };
        case n.ELEMENT_NODE:
            const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);
            const tagName = getValidTagName(n);
            let attributes = {};
            for (const { name, value } of Array.from(n.attributes)) {
                if (!skipAttribute(tagName, name)) {
                    attributes[name] = transformAttribute(doc, n, tagName, name, value, maskAllText, unmaskTextSelector, maskTextFn);
                }
            }
            if (tagName === 'link' && inlineStylesheet) {
                const stylesheet = Array.from(doc.styleSheets).find((s) => {
                    return s.href === n.href;
                });
                let cssText = null;
                if (stylesheet) {
                    cssText = getCssRulesString(stylesheet);
                }
                if (cssText) {
                    delete attributes.rel;
                    delete attributes.href;
                    attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);
                }
            }
            if (tagName === 'style' &&
                n.sheet &&
                !(n.innerText ||
                    n.textContent ||
                    '').trim().length) {
                const cssText = getCssRulesString(n.sheet);
                if (cssText) {
                    attributes._cssText = absoluteToStylesheet(cssText, getHref());
                }
            }
            if (tagName === 'input' ||
                tagName === 'textarea' ||
                tagName === 'select' ||
                tagName === 'option') {
                const el = n;
                const value = getInputValue(tagName, el, attributes);
                const checked = n.checked;
                if (attributes.type !== 'submit' &&
                    attributes.type !== 'button' &&
                    value) {
                    attributes.value = maskInputValue({
                        input: el,
                        type: attributes.type,
                        tagName,
                        value,
                        maskInputSelector,
                        unmaskInputSelector,
                        maskInputOptions,
                        maskInputFn,
                    });
                }
                if (checked) {
                    attributes.checked = checked;
                }
            }
            if (tagName === 'option') {
                if (n.selected && !maskInputOptions['select']) {
                    attributes.selected = true;
                }
                else {
                    delete attributes.selected;
                }
            }
            if (tagName === 'canvas' && recordCanvas) {
                if (n.__context === '2d') {
                    if (!is2DCanvasBlank(n)) {
                        attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);
                    }
                }
                else if (!('__context' in n)) {
                    const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);
                    const blankCanvas = document.createElement('canvas');
                    blankCanvas.width = n.width;
                    blankCanvas.height = n.height;
                    const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);
                    if (canvasDataURL !== blankCanvasDataURL) {
                        attributes.rr_dataURL = canvasDataURL;
                    }
                }
            }
            if (tagName === 'img' && inlineImages) {
                if (!canvasService) {
                    canvasService = doc.createElement('canvas');
                    canvasCtx = canvasService.getContext('2d');
                }
                const image = n;
                const oldValue = image.crossOrigin;
                image.crossOrigin = 'anonymous';
                const recordInlineImage = () => {
                    try {
                        canvasService.width = image.naturalWidth;
                        canvasService.height = image.naturalHeight;
                        canvasCtx.drawImage(image, 0, 0);
                        attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);
                    }
                    catch (err) {
                        console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);
                    }
                    oldValue
                        ? (attributes.crossOrigin = oldValue)
                        : delete attributes.crossOrigin;
                };
                if (image.complete && image.naturalWidth !== 0)
                    recordInlineImage();
                else
                    image.onload = recordInlineImage;
            }
            if (tagName === 'audio' || tagName === 'video') {
                attributes.rr_mediaState = n.paused
                    ? 'paused'
                    : 'played';
                attributes.rr_mediaCurrentTime = n.currentTime;
            }
            if (n.scrollLeft) {
                attributes.rr_scrollLeft = n.scrollLeft;
            }
            if (n.scrollTop) {
                attributes.rr_scrollTop = n.scrollTop;
            }
            if (needBlock) {
                const { width, height } = n.getBoundingClientRect();
                attributes = {
                    class: attributes.class,
                    rr_width: `${width}px`,
                    rr_height: `${height}px`,
                };
            }
            if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {
                if (!n.contentDocument) {
                    attributes.rr_src = attributes.src;
                }
                delete attributes.src;
            }
            return {
                type: NodeType$1.Element,
                tagName,
                attributes,
                childNodes: [],
                isSVG: isSVGElement(n) || undefined,
                needBlock,
                rootId,
            };
        case n.TEXT_NODE:
            const parentTagName = n.parentNode && n.parentNode.tagName;
            let textContent = n.textContent;
            const isStyle = parentTagName === 'STYLE' ? true : undefined;
            const isScript = parentTagName === 'SCRIPT' ? true : undefined;
            if (isStyle && textContent) {
                try {
                    if (n.nextSibling || n.previousSibling) {
                    }
                    else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {
                        textContent = stringifyStyleSheet(n.parentNode.sheet);
                    }
                }
                catch (err) {
                    console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);
                }
                textContent = absoluteToStylesheet(textContent, getHref());
            }
            if (isScript) {
                textContent = 'SCRIPT_PLACEHOLDER';
            }
            if (parentTagName === 'TEXTAREA' && textContent) {
                textContent = '';
            }
            else if (parentTagName === 'OPTION' && textContent) {
                const option = n.parentNode;
                textContent = maskInputValue({
                    input: option,
                    type: null,
                    tagName: parentTagName,
                    value: textContent,
                    maskInputSelector,
                    unmaskInputSelector,
                    maskInputOptions,
                    maskInputFn,
                });
            }
            else if (!isStyle &&
                !isScript &&
                needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) &&
                textContent) {
                textContent = maskTextFn
                    ? maskTextFn(textContent)
                    : defaultMaskFn(textContent);
            }
            return {
                type: NodeType$1.Text,
                textContent: textContent || '',
                isStyle,
                rootId,
            };
        case n.CDATA_SECTION_NODE:
            return {
                type: NodeType$1.CDATA,
                textContent: '',
                rootId,
            };
        case n.COMMENT_NODE:
            return {
                type: NodeType$1.Comment,
                textContent: n.textContent || '',
                rootId,
            };
        default:
            return false;
    }
}
function lowerIfExists(maybeAttr) {
    if (maybeAttr === undefined || maybeAttr === null) {
        return '';
    }
    else {
        return maybeAttr.toLowerCase();
    }
}
function slimDOMExcluded(sn, slimDOMOptions) {
    if (slimDOMOptions.comment && sn.type === NodeType$1.Comment) {
        return true;
    }
    else if (sn.type === NodeType$1.Element) {
        if (slimDOMOptions.script &&
            (sn.tagName === 'script' ||
                (sn.tagName === 'link' &&
                    (sn.attributes.rel === 'preload' ||
                        sn.attributes.rel === 'modulepreload') &&
                    sn.attributes.as === 'script') ||
                (sn.tagName === 'link' &&
                    sn.attributes.rel === 'prefetch' &&
                    typeof sn.attributes.href === 'string' &&
                    sn.attributes.href.endsWith('.js')))) {
            return true;
        }
        else if (slimDOMOptions.headFavicon &&
            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||
                (sn.tagName === 'meta' &&
                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||
                        lowerIfExists(sn.attributes.name) === 'application-name' ||
                        lowerIfExists(sn.attributes.rel) === 'icon' ||
                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||
                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {
            return true;
        }
        else if (sn.tagName === 'meta') {
            if (slimDOMOptions.headMetaDescKeywords &&
                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {
                return true;
            }
            else if (slimDOMOptions.headMetaSocial &&
                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||
                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||
                    lowerIfExists(sn.attributes.name) === 'pinterest')) {
                return true;
            }
            else if (slimDOMOptions.headMetaRobots &&
                (lowerIfExists(sn.attributes.name) === 'robots' ||
                    lowerIfExists(sn.attributes.name) === 'googlebot' ||
                    lowerIfExists(sn.attributes.name) === 'bingbot')) {
                return true;
            }
            else if (slimDOMOptions.headMetaHttpEquiv &&
                sn.attributes['http-equiv'] !== undefined) {
                return true;
            }
            else if (slimDOMOptions.headMetaAuthorship &&
                (lowerIfExists(sn.attributes.name) === 'author' ||
                    lowerIfExists(sn.attributes.name) === 'generator' ||
                    lowerIfExists(sn.attributes.name) === 'framework' ||
                    lowerIfExists(sn.attributes.name) === 'publisher' ||
                    lowerIfExists(sn.attributes.name) === 'progid' ||
                    lowerIfExists(sn.attributes.property).match(/^article:/) ||
                    lowerIfExists(sn.attributes.property).match(/^product:/))) {
                return true;
            }
            else if (slimDOMOptions.headMetaVerification &&
                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||
                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||
                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||
                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||
                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||
                    lowerIfExists(sn.attributes.name) === 'verification' ||
                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {
                return true;
            }
        }
    }
    return false;
}
function serializeNodeWithId(n, options) {
    const { doc, map, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, keepIframeSrcFn = () => false, } = options;
    let { preserveWhiteSpace = true } = options;
    const _serializedNode = serializeNode(n, {
        doc,
        blockClass,
        blockSelector,
        unblockSelector,
        maskTextClass,
        maskTextSelector,
        unmaskTextSelector,
        inlineStylesheet,
        maskInputSelector,
        unmaskInputSelector,
        maskAllText,
        maskInputOptions,
        maskTextFn,
        maskInputFn,
        dataURLOptions,
        inlineImages,
        recordCanvas,
        keepIframeSrcFn,
    });
    if (!_serializedNode) {
        console.warn(n, 'not serialized');
        return null;
    }
    let id;
    if ('__sn' in n) {
        id = n.__sn.id;
    }
    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||
        (!preserveWhiteSpace &&
            _serializedNode.type === NodeType$1.Text &&
            !_serializedNode.isStyle &&
            !_serializedNode.textContent.replace(/^\s+|\s+$/gm, '').length)) {
        id = IGNORED_NODE;
    }
    else {
        id = genId();
    }
    const serializedNode = Object.assign(_serializedNode, { id });
    n.__sn = serializedNode;
    if (id === IGNORED_NODE) {
        return null;
    }
    map[id] = n;
    if (onSerialize) {
        onSerialize(n);
    }
    let recordChild = !skipChild;
    if (serializedNode.type === NodeType$1.Element) {
        recordChild = recordChild && !serializedNode.needBlock;
        delete serializedNode.needBlock;
        if (n.shadowRoot)
            serializedNode.isShadowHost = true;
    }
    if ((serializedNode.type === NodeType$1.Document ||
        serializedNode.type === NodeType$1.Element) &&
        recordChild) {
        if (slimDOMOptions.headWhitespace &&
            _serializedNode.type === NodeType$1.Element &&
            _serializedNode.tagName === 'head') {
            preserveWhiteSpace = false;
        }
        const bypassOptions = {
            doc,
            map,
            blockClass,
            blockSelector,
            unblockSelector,
            maskTextClass,
            maskTextSelector,
            unmaskTextSelector,
            skipChild,
            inlineStylesheet,
            maskInputSelector,
            unmaskInputSelector,
            maskAllText,
            maskInputOptions,
            maskTextFn,
            maskInputFn,
            slimDOMOptions,
            dataURLOptions,
            inlineImages,
            recordCanvas,
            preserveWhiteSpace,
            onSerialize,
            onIframeLoad,
            iframeLoadTimeout,
            keepIframeSrcFn,
        };
        for (const childN of Array.from(n.childNodes)) {
            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);
            if (serializedChildNode) {
                serializedNode.childNodes.push(serializedChildNode);
            }
        }
        if (isElement(n) && n.shadowRoot) {
            for (const childN of Array.from(n.shadowRoot.childNodes)) {
                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);
                if (serializedChildNode) {
                    serializedChildNode.isShadow = true;
                    serializedNode.childNodes.push(serializedChildNode);
                }
            }
        }
    }
    if (n.parentNode && isShadowRoot(n.parentNode)) {
        serializedNode.isShadow = true;
    }
    if (serializedNode.type === NodeType$1.Element &&
        serializedNode.tagName === 'iframe') {
        onceIframeLoaded(n, () => {
            const iframeDoc = n.contentDocument;
            if (iframeDoc && onIframeLoad) {
                const serializedIframeNode = serializeNodeWithId(iframeDoc, {
                    doc: iframeDoc,
                    map,
                    blockClass,
                    blockSelector,
                    unblockSelector,
                    maskTextClass,
                    maskTextSelector,
                    unmaskTextSelector,
                    skipChild: false,
                    inlineStylesheet,
                    maskInputSelector,
                    unmaskInputSelector,
                    maskAllText,
                    maskInputOptions,
                    maskTextFn,
                    maskInputFn,
                    slimDOMOptions,
                    dataURLOptions,
                    inlineImages,
                    recordCanvas,
                    preserveWhiteSpace,
                    onSerialize,
                    onIframeLoad,
                    iframeLoadTimeout,
                    keepIframeSrcFn,
                });
                if (serializedIframeNode) {
                    onIframeLoad(n, serializedIframeNode);
                }
            }
        }, iframeLoadTimeout);
    }
    return serializedNode;
}
function snapshot(n, options) {
    const { blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskInputSelector = null, unmaskInputSelector = null, maskAllText = false, maskAllInputs = false, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, keepIframeSrcFn = () => false, } = options || {};
    const idNodeMap = {};
    const maskInputOptions = maskAllInputs === true
        ? {
            color: true,
            date: true,
            'datetime-local': true,
            email: true,
            month: true,
            number: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true,
            textarea: true,
            select: true,
        }
        : maskAllInputs === false
            ? {}
            : maskAllInputs;
    const slimDOMOptions = slimDOM === true || slimDOM === 'all'
        ?
            {
                script: true,
                comment: true,
                headFavicon: true,
                headWhitespace: true,
                headMetaDescKeywords: slimDOM === 'all',
                headMetaSocial: true,
                headMetaRobots: true,
                headMetaHttpEquiv: true,
                headMetaAuthorship: true,
                headMetaVerification: true,
            }
        : slimDOM === false
            ? {}
            : slimDOM;
    return [
        serializeNodeWithId(n, {
            doc: n,
            map: idNodeMap,
            blockClass,
            blockSelector,
            unblockSelector,
            maskTextClass,
            maskTextSelector,
            unmaskTextSelector,
            skipChild: false,
            inlineStylesheet,
            maskInputSelector,
            unmaskInputSelector,
            maskAllText,
            maskInputOptions,
            maskTextFn,
            maskInputFn,
            slimDOMOptions,
            dataURLOptions,
            inlineImages,
            recordCanvas,
            preserveWhiteSpace,
            onSerialize,
            onIframeLoad,
            iframeLoadTimeout,
            keepIframeSrcFn,
        }),
        idNodeMap,
    ];
}
function skipAttribute(tagName, attributeName, value) {
    return ((tagName === 'video' || tagName === 'audio') && attributeName === 'autoplay');
}
function getInputValue(tagName, el, attributes) {
    if (tagName === 'input' &&
        (attributes.type === 'radio' || attributes.type === 'checkbox')) {
        return el.getAttribute('value') || '';
    }
    return el.value;
}

var EventType;
(function (EventType) {
    EventType[EventType["DomContentLoaded"] = 0] = "DomContentLoaded";
    EventType[EventType["Load"] = 1] = "Load";
    EventType[EventType["FullSnapshot"] = 2] = "FullSnapshot";
    EventType[EventType["IncrementalSnapshot"] = 3] = "IncrementalSnapshot";
    EventType[EventType["Meta"] = 4] = "Meta";
    EventType[EventType["Custom"] = 5] = "Custom";
    EventType[EventType["Plugin"] = 6] = "Plugin";
})(EventType || (EventType = {}));
var IncrementalSource;
(function (IncrementalSource) {
    IncrementalSource[IncrementalSource["Mutation"] = 0] = "Mutation";
    IncrementalSource[IncrementalSource["MouseMove"] = 1] = "MouseMove";
    IncrementalSource[IncrementalSource["MouseInteraction"] = 2] = "MouseInteraction";
    IncrementalSource[IncrementalSource["Scroll"] = 3] = "Scroll";
    IncrementalSource[IncrementalSource["ViewportResize"] = 4] = "ViewportResize";
    IncrementalSource[IncrementalSource["Input"] = 5] = "Input";
    IncrementalSource[IncrementalSource["TouchMove"] = 6] = "TouchMove";
    IncrementalSource[IncrementalSource["MediaInteraction"] = 7] = "MediaInteraction";
    IncrementalSource[IncrementalSource["StyleSheetRule"] = 8] = "StyleSheetRule";
    IncrementalSource[IncrementalSource["CanvasMutation"] = 9] = "CanvasMutation";
    IncrementalSource[IncrementalSource["Font"] = 10] = "Font";
    IncrementalSource[IncrementalSource["Log"] = 11] = "Log";
    IncrementalSource[IncrementalSource["Drag"] = 12] = "Drag";
    IncrementalSource[IncrementalSource["StyleDeclaration"] = 13] = "StyleDeclaration";
})(IncrementalSource || (IncrementalSource = {}));
var MouseInteractions;
(function (MouseInteractions) {
    MouseInteractions[MouseInteractions["MouseUp"] = 0] = "MouseUp";
    MouseInteractions[MouseInteractions["MouseDown"] = 1] = "MouseDown";
    MouseInteractions[MouseInteractions["Click"] = 2] = "Click";
    MouseInteractions[MouseInteractions["ContextMenu"] = 3] = "ContextMenu";
    MouseInteractions[MouseInteractions["DblClick"] = 4] = "DblClick";
    MouseInteractions[MouseInteractions["Focus"] = 5] = "Focus";
    MouseInteractions[MouseInteractions["Blur"] = 6] = "Blur";
    MouseInteractions[MouseInteractions["TouchStart"] = 7] = "TouchStart";
    MouseInteractions[MouseInteractions["TouchMove_Departed"] = 8] = "TouchMove_Departed";
    MouseInteractions[MouseInteractions["TouchEnd"] = 9] = "TouchEnd";
    MouseInteractions[MouseInteractions["TouchCancel"] = 10] = "TouchCancel";
})(MouseInteractions || (MouseInteractions = {}));
var CanvasContext;
(function (CanvasContext) {
    CanvasContext[CanvasContext["2D"] = 0] = "2D";
    CanvasContext[CanvasContext["WebGL"] = 1] = "WebGL";
    CanvasContext[CanvasContext["WebGL2"] = 2] = "WebGL2";
})(CanvasContext || (CanvasContext = {}));
var MediaInteractions;
(function (MediaInteractions) {
    MediaInteractions[MediaInteractions["Play"] = 0] = "Play";
    MediaInteractions[MediaInteractions["Pause"] = 1] = "Pause";
    MediaInteractions[MediaInteractions["Seeked"] = 2] = "Seeked";
    MediaInteractions[MediaInteractions["VolumeChange"] = 3] = "VolumeChange";
})(MediaInteractions || (MediaInteractions = {}));
var ReplayerEvents;
(function (ReplayerEvents) {
    ReplayerEvents["Start"] = "start";
    ReplayerEvents["Pause"] = "pause";
    ReplayerEvents["Resume"] = "resume";
    ReplayerEvents["Resize"] = "resize";
    ReplayerEvents["Finish"] = "finish";
    ReplayerEvents["FullsnapshotRebuilded"] = "fullsnapshot-rebuilded";
    ReplayerEvents["LoadStylesheetStart"] = "load-stylesheet-start";
    ReplayerEvents["LoadStylesheetEnd"] = "load-stylesheet-end";
    ReplayerEvents["SkipStart"] = "skip-start";
    ReplayerEvents["SkipEnd"] = "skip-end";
    ReplayerEvents["MouseInteraction"] = "mouse-interaction";
    ReplayerEvents["EventCast"] = "event-cast";
    ReplayerEvents["CustomEvent"] = "custom-event";
    ReplayerEvents["Flush"] = "flush";
    ReplayerEvents["StateChange"] = "state-change";
    ReplayerEvents["PlayBack"] = "play-back";
})(ReplayerEvents || (ReplayerEvents = {}));

function on(type, fn, target = document) {
    const options = { capture: true, passive: true };
    target.addEventListener(type, fn, options);
    return () => target.removeEventListener(type, fn, options);
}
function createMirror() {
    return {
        map: {},
        getId(n) {
            if (!n || !n.__sn) {
                return -1;
            }
            return n.__sn.id;
        },
        getNode(id) {
            return this.map[id] || null;
        },
        removeNodeFromMap(n) {
            const id = n.__sn && n.__sn.id;
            delete this.map[id];
            if (n.childNodes) {
                n.childNodes.forEach((child) => this.removeNodeFromMap(child));
            }
        },
        has(id) {
            return this.map.hasOwnProperty(id);
        },
        reset() {
            this.map = {};
        },
    };
}
const DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +
    '\r\n' +
    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +
    '\r\n' +
    'or you can use record.mirror to access the mirror instance during recording.';
let _mirror = {
    map: {},
    getId() {
        console.error(DEPARTED_MIRROR_ACCESS_WARNING);
        return -1;
    },
    getNode() {
        console.error(DEPARTED_MIRROR_ACCESS_WARNING);
        return null;
    },
    removeNodeFromMap() {
        console.error(DEPARTED_MIRROR_ACCESS_WARNING);
    },
    has() {
        console.error(DEPARTED_MIRROR_ACCESS_WARNING);
        return false;
    },
    reset() {
        console.error(DEPARTED_MIRROR_ACCESS_WARNING);
    },
};
if (typeof window !== 'undefined' && window.Proxy && window.Reflect) {
    _mirror = new Proxy(_mirror, {
        get(target, prop, receiver) {
            if (prop === 'map') {
                console.error(DEPARTED_MIRROR_ACCESS_WARNING);
            }
            return Reflect.get(target, prop, receiver);
        },
    });
}
function throttle(func, wait, options = {}) {
    let timeout = null;
    let previous = 0;
    return function (arg) {
        let now = Date.now();
        if (!previous && options.leading === false) {
            previous = now;
        }
        let remaining = wait - (now - previous);
        let context = this;
        let args = arguments;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            func.apply(context, args);
        }
        else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(() => {
                previous = options.leading === false ? 0 : Date.now();
                timeout = null;
                func.apply(context, args);
            }, remaining);
        }
    };
}
function hookSetter(target, key, d, isRevoked, win = window) {
    const original = win.Object.getOwnPropertyDescriptor(target, key);
    win.Object.defineProperty(target, key, isRevoked
        ? d
        : {
            set(value) {
                setTimeout(() => {
                    d.set.call(this, value);
                }, 0);
                if (original && original.set) {
                    original.set.call(this, value);
                }
            },
        });
    return () => hookSetter(target, key, original || {}, true);
}
function patch(source, name, replacement) {
    try {
        if (!(name in source)) {
            return () => { };
        }
        const original = source[name];
        const wrapped = replacement(original);
        if (typeof wrapped === 'function') {
            wrapped.prototype = wrapped.prototype || {};
            Object.defineProperties(wrapped, {
                __rrweb_original__: {
                    enumerable: false,
                    value: original,
                },
            });
        }
        source[name] = wrapped;
        return () => {
            source[name] = original;
        };
    }
    catch (_a) {
        return () => { };
    }
}
function getWindowHeight() {
    return (window.innerHeight ||
        (document.documentElement && document.documentElement.clientHeight) ||
        (document.body && document.body.clientHeight));
}
function getWindowWidth() {
    return (window.innerWidth ||
        (document.documentElement && document.documentElement.clientWidth) ||
        (document.body && document.body.clientWidth));
}
function isBlocked(node, blockClass, blockSelector, unblockSelector) {
    if (!node) {
        return false;
    }
    if (node.nodeType === node.ELEMENT_NODE) {
        let needBlock = false;
        const needUnblock = unblockSelector && node.matches(unblockSelector);
        if (typeof blockClass === 'string') {
            if (node.closest !== undefined) {
                needBlock =
                    !needUnblock &&
                        node.closest('.' + blockClass) !== null;
            }
            else {
                needBlock =
                    !needUnblock && node.classList.contains(blockClass);
            }
        }
        else {
            !needUnblock &&
                node.classList.forEach((className) => {
                    if (blockClass.test(className)) {
                        needBlock = true;
                    }
                });
        }
        if (!needBlock && blockSelector) {
            needBlock = node.matches(blockSelector);
        }
        return ((!needUnblock && needBlock) ||
            isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector));
    }
    if (node.nodeType === node.TEXT_NODE) {
        return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);
    }
    return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);
}
function isIgnored(n) {
    if ('__sn' in n) {
        return n.__sn.id === IGNORED_NODE;
    }
    return false;
}
function isAncestorRemoved(target, mirror) {
    if (isShadowRoot(target)) {
        return false;
    }
    const id = mirror.getId(target);
    if (!mirror.has(id)) {
        return true;
    }
    if (target.parentNode &&
        target.parentNode.nodeType === target.DOCUMENT_NODE) {
        return false;
    }
    if (!target.parentNode) {
        return true;
    }
    return isAncestorRemoved(target.parentNode, mirror);
}
function isTouchEvent(event) {
    return Boolean(event.changedTouches);
}
function polyfill(win = window) {
    if ('NodeList' in win && !win.NodeList.prototype.forEach) {
        win.NodeList.prototype.forEach = Array.prototype
            .forEach;
    }
    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {
        win.DOMTokenList.prototype.forEach = Array.prototype
            .forEach;
    }
    if (!Node.prototype.contains) {
        Node.prototype.contains = function contains(node) {
            if (!(0 in arguments)) {
                throw new TypeError('1 argument is required');
            }
            do {
                if (this === node) {
                    return true;
                }
            } while ((node = node && node.parentNode));
            return false;
        };
    }
}
function isIframeINode(node) {
    if ('__sn' in node) {
        return (node.__sn.type === NodeType$1.Element && node.__sn.tagName === 'iframe');
    }
    return false;
}
function hasShadowRoot(n) {
    return Boolean(n === null || n === void 0 ? void 0 : n.shadowRoot);
}

function isNodeInLinkedList(n) {
    return '__ln' in n;
}
class DoubleLinkedList {
    constructor() {
        this.length = 0;
        this.head = null;
    }
    get(position) {
        if (position >= this.length) {
            throw new Error('Position outside of list range');
        }
        let current = this.head;
        for (let index = 0; index < position; index++) {
            current = (current === null || current === void 0 ? void 0 : current.next) || null;
        }
        return current;
    }
    addNode(n) {
        const node = {
            value: n,
            previous: null,
            next: null,
        };
        n.__ln = node;
        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {
            const current = n.previousSibling.__ln.next;
            node.next = current;
            node.previous = n.previousSibling.__ln;
            n.previousSibling.__ln.next = node;
            if (current) {
                current.previous = node;
            }
        }
        else if (n.nextSibling &&
            isNodeInLinkedList(n.nextSibling) &&
            n.nextSibling.__ln.previous) {
            const current = n.nextSibling.__ln.previous;
            node.previous = current;
            node.next = n.nextSibling.__ln;
            n.nextSibling.__ln.previous = node;
            if (current) {
                current.next = node;
            }
        }
        else {
            if (this.head) {
                this.head.previous = node;
            }
            node.next = this.head;
            this.head = node;
        }
        this.length++;
    }
    removeNode(n) {
        const current = n.__ln;
        if (!this.head) {
            return;
        }
        if (!current.previous) {
            this.head = current.next;
            if (this.head) {
                this.head.previous = null;
            }
        }
        else {
            current.previous.next = current.next;
            if (current.next) {
                current.next.previous = current.previous;
            }
        }
        if (n.__ln) {
            delete n.__ln;
        }
        this.length--;
    }
}
const moveKey = (id, parentId) => `${id}@${parentId}`;
function isINode(n) {
    return '__sn' in n;
}
class MutationBuffer {
    constructor() {
        this.frozen = false;
        this.locked = false;
        this.texts = [];
        this.attributes = [];
        this.removes = [];
        this.mapRemoves = [];
        this.movedMap = {};
        this.addedSet = new Set();
        this.movedSet = new Set();
        this.droppedSet = new Set();
        this.processMutations = (mutations) => {
            mutations.forEach(this.processMutation);
            this.emit();
        };
        this.emit = () => {
            if (this.frozen || this.locked) {
                return;
            }
            const adds = [];
            const addList = new DoubleLinkedList();
            const getNextId = (n) => {
                let ns = n;
                let nextId = IGNORED_NODE;
                while (nextId === IGNORED_NODE) {
                    ns = ns && ns.nextSibling;
                    nextId = ns && this.mirror.getId(ns);
                }
                return nextId;
            };
            const pushAdd = (n) => {
                var _a, _b, _c, _d, _e;
                const shadowHost = n.getRootNode
                    ? (_a = n.getRootNode()) === null || _a === void 0 ? void 0 : _a.host
                    : null;
                let rootShadowHost = shadowHost;
                while ((_c = (_b = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _b === void 0 ? void 0 : _b.call(rootShadowHost)) === null || _c === void 0 ? void 0 : _c.host)
                    rootShadowHost =
                        ((_e = (_d = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _d === void 0 ? void 0 : _d.call(rootShadowHost)) === null || _e === void 0 ? void 0 : _e.host) ||
                            null;
                const notInDoc = !this.doc.contains(n) &&
                    (!rootShadowHost || !this.doc.contains(rootShadowHost));
                if (!n.parentNode || notInDoc) {
                    return;
                }
                const parentId = isShadowRoot(n.parentNode)
                    ? this.mirror.getId(shadowHost)
                    : this.mirror.getId(n.parentNode);
                const nextId = getNextId(n);
                if (parentId === -1 || nextId === -1) {
                    return addList.addNode(n);
                }
                let sn = serializeNodeWithId(n, {
                    doc: this.doc,
                    map: this.mirror.map,
                    blockClass: this.blockClass,
                    blockSelector: this.blockSelector,
                    unblockSelector: this.unblockSelector,
                    maskTextClass: this.maskTextClass,
                    maskTextSelector: this.maskTextSelector,
                    unmaskTextSelector: this.unmaskTextSelector,
                    maskInputSelector: this.maskInputSelector,
                    unmaskInputSelector: this.unmaskInputSelector,
                    skipChild: true,
                    inlineStylesheet: this.inlineStylesheet,
                    maskAllText: this.maskAllText,
                    maskInputOptions: this.maskInputOptions,
                    maskTextFn: this.maskTextFn,
                    maskInputFn: this.maskInputFn,
                    slimDOMOptions: this.slimDOMOptions,
                    recordCanvas: this.recordCanvas,
                    inlineImages: this.inlineImages,
                    onSerialize: (currentN) => {
                        if (isIframeINode(currentN)) {
                            this.iframeManager.addIframe(currentN);
                        }
                        if (hasShadowRoot(n)) {
                            this.shadowDomManager.addShadowRoot(n.shadowRoot, document);
                        }
                    },
                    onIframeLoad: (iframe, childSn) => {
                        this.iframeManager.attachIframe(iframe, childSn);
                        this.shadowDomManager.observeAttachShadow(iframe);
                    },
                });
                if (sn) {
                    adds.push({
                        parentId,
                        nextId,
                        node: sn,
                    });
                }
            };
            while (this.mapRemoves.length) {
                this.mirror.removeNodeFromMap(this.mapRemoves.shift());
            }
            for (const n of this.movedSet) {
                if (isParentRemoved(this.removes, n, this.mirror) &&
                    !this.movedSet.has(n.parentNode)) {
                    continue;
                }
                pushAdd(n);
            }
            for (const n of this.addedSet) {
                if (!isAncestorInSet(this.droppedSet, n) &&
                    !isParentRemoved(this.removes, n, this.mirror)) {
                    pushAdd(n);
                }
                else if (isAncestorInSet(this.movedSet, n)) {
                    pushAdd(n);
                }
                else {
                    this.droppedSet.add(n);
                }
            }
            let candidate = null;
            while (addList.length) {
                let node = null;
                if (candidate) {
                    const parentId = this.mirror.getId(candidate.value.parentNode);
                    const nextId = getNextId(candidate.value);
                    if (parentId !== -1 && nextId !== -1) {
                        node = candidate;
                    }
                }
                if (!node) {
                    for (let index = addList.length - 1; index >= 0; index--) {
                        const _node = addList.get(index);
                        if (_node) {
                            const parentId = this.mirror.getId(_node.value.parentNode);
                            const nextId = getNextId(_node.value);
                            if (parentId !== -1 && nextId !== -1) {
                                node = _node;
                                break;
                            }
                        }
                    }
                }
                if (!node) {
                    while (addList.head) {
                        addList.removeNode(addList.head.value);
                    }
                    break;
                }
                candidate = node.previous;
                addList.removeNode(node.value);
                pushAdd(node.value);
            }
            const payload = {
                texts: this.texts
                    .map((text) => ({
                    id: this.mirror.getId(text.node),
                    value: text.value,
                }))
                    .filter((text) => this.mirror.has(text.id)),
                attributes: this.attributes
                    .map((attribute) => ({
                    id: this.mirror.getId(attribute.node),
                    attributes: attribute.attributes,
                }))
                    .filter((attribute) => this.mirror.has(attribute.id)),
                removes: this.removes,
                adds,
            };
            if (!payload.texts.length &&
                !payload.attributes.length &&
                !payload.removes.length &&
                !payload.adds.length) {
                return;
            }
            this.texts = [];
            this.attributes = [];
            this.removes = [];
            this.addedSet = new Set();
            this.movedSet = new Set();
            this.droppedSet = new Set();
            this.movedMap = {};
            this.mutationCb(payload);
        };
        this.processMutation = (m) => {
            if (isIgnored(m.target)) {
                return;
            }
            switch (m.type) {
                case 'characterData': {
                    const value = m.target.textContent;
                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) && value !== m.oldValue) {
                        this.texts.push({
                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextSelector, this.maskAllText) && value
                                ? this.maskTextFn
                                    ? this.maskTextFn(value)
                                    : value.replace(/[\S]/g, '*')
                                : value,
                            node: m.target,
                        });
                    }
                    break;
                }
                case 'attributes': {
                    const target = m.target;
                    let value = target.getAttribute(m.attributeName);
                    if (m.attributeName === 'value') {
                        value = maskInputValue({
                            input: target,
                            maskInputSelector: this.maskInputSelector,
                            unmaskInputSelector: this.unmaskInputSelector,
                            maskInputOptions: this.maskInputOptions,
                            tagName: target.tagName,
                            type: target.getAttribute('type'),
                            value,
                            maskInputFn: this.maskInputFn,
                        });
                    }
                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || value === m.oldValue) {
                        return;
                    }
                    let item = this.attributes.find((a) => a.node === m.target);
                    if (!item) {
                        item = {
                            node: m.target,
                            attributes: {},
                        };
                        this.attributes.push(item);
                    }
                    if (m.attributeName === 'type' &&
                        m.target.tagName === 'INPUT' &&
                        (m.oldValue || '').toLowerCase() === 'password') {
                        m.target.setAttribute('rr_is_password', 'true');
                    }
                    if (m.attributeName === 'style') {
                        const old = this.doc.createElement('span');
                        if (m.oldValue) {
                            old.setAttribute('style', m.oldValue);
                        }
                        if (item.attributes.style === undefined ||
                            item.attributes.style === null) {
                            item.attributes.style = {};
                        }
                        try {
                            const styleObj = item.attributes.style;
                            for (const pname of Array.from(target.style)) {
                                const newValue = target.style.getPropertyValue(pname);
                                const newPriority = target.style.getPropertyPriority(pname);
                                if (newValue !== old.style.getPropertyValue(pname) ||
                                    newPriority !== old.style.getPropertyPriority(pname)) {
                                    if (newPriority === '') {
                                        styleObj[pname] = newValue;
                                    }
                                    else {
                                        styleObj[pname] = [newValue, newPriority];
                                    }
                                }
                            }
                            for (const pname of Array.from(old.style)) {
                                if (target.style.getPropertyValue(pname) === '') {
                                    styleObj[pname] = false;
                                }
                            }
                        }
                        catch (error) {
                            console.warn('[rrweb] Error when parsing update to style attribute:', error);
                        }
                    }
                    else {
                        const element = m.target;
                        item.attributes[m.attributeName] = transformAttribute(this.doc, element, element.tagName, m.attributeName, value, this.maskAllText, this.unmaskTextSelector, this.maskTextFn);
                    }
                    break;
                }
                case 'childList': {
                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));
                    m.removedNodes.forEach((n) => {
                        const nodeId = this.mirror.getId(n);
                        const parentId = isShadowRoot(m.target)
                            ? this.mirror.getId(m.target.host)
                            : this.mirror.getId(m.target);
                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || isIgnored(n)) {
                            return;
                        }
                        if (this.addedSet.has(n)) {
                            deepDelete(this.addedSet, n);
                            this.droppedSet.add(n);
                        }
                        else if (this.addedSet.has(m.target) && nodeId === -1) ;
                        else if (isAncestorRemoved(m.target, this.mirror)) ;
                        else if (this.movedSet.has(n) &&
                            this.movedMap[moveKey(nodeId, parentId)]) {
                            deepDelete(this.movedSet, n);
                        }
                        else {
                            this.removes.push({
                                parentId,
                                id: nodeId,
                                isShadow: isShadowRoot(m.target) ? true : undefined,
                            });
                        }
                        this.mapRemoves.push(n);
                    });
                    break;
                }
            }
        };
        this.genAdds = (n, target) => {
            if (target && isBlocked(target, this.blockClass, this.blockSelector, this.unblockSelector)) {
                return;
            }
            if (isINode(n)) {
                if (isIgnored(n)) {
                    return;
                }
                this.movedSet.add(n);
                let targetId = null;
                if (target && isINode(target)) {
                    targetId = target.__sn.id;
                }
                if (targetId) {
                    this.movedMap[moveKey(n.__sn.id, targetId)] = true;
                }
            }
            else {
                this.addedSet.add(n);
                this.droppedSet.delete(n);
            }
            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector))
                n.childNodes.forEach((childN) => this.genAdds(childN));
        };
    }
    init(options) {
        [
            'mutationCb',
            'blockClass',
            'blockSelector',
            'unblockSelector',
            'maskTextClass',
            'maskTextSelector',
            'unmaskTextSelector',
            'maskInputSelector',
            'unmaskInputSelector',
            'inlineStylesheet',
            'maskAllText',
            'maskInputOptions',
            'maskTextFn',
            'maskInputFn',
            'recordCanvas',
            'inlineImages',
            'slimDOMOptions',
            'doc',
            'mirror',
            'iframeManager',
            'shadowDomManager',
            'canvasManager',
        ].forEach((key) => {
            this[key] = options[key];
        });
    }
    freeze() {
        this.frozen = true;
        this.canvasManager.freeze();
    }
    unfreeze() {
        this.frozen = false;
        this.canvasManager.unfreeze();
        this.emit();
    }
    isFrozen() {
        return this.frozen;
    }
    lock() {
        this.locked = true;
        this.canvasManager.lock();
    }
    unlock() {
        this.locked = false;
        this.canvasManager.unlock();
        this.emit();
    }
    reset() {
        this.shadowDomManager.reset();
        this.canvasManager.reset();
    }
}
function deepDelete(addsSet, n) {
    addsSet.delete(n);
    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));
}
function isParentRemoved(removes, n, mirror) {
    const { parentNode } = n;
    if (!parentNode) {
        return false;
    }
    const parentId = mirror.getId(parentNode);
    if (removes.some((r) => r.id === parentId)) {
        return true;
    }
    return isParentRemoved(removes, parentNode, mirror);
}
function isAncestorInSet(set, n) {
    const { parentNode } = n;
    if (!parentNode) {
        return false;
    }
    if (set.has(parentNode)) {
        return true;
    }
    return isAncestorInSet(set, parentNode);
}

const callbackWrapper = (cb) => {
    const rrwebWrapped = (...rest) => {
        try {
            return cb(...rest);
        }
        catch (error) {
            try {
                error.__rrweb__ = true;
            }
            catch (_a) {
            }
            throw error;
        }
    };
    return rrwebWrapped;
};

const mutationBuffers = [];
function getEventTarget(event) {
    try {
        if ('composedPath' in event) {
            const path = event.composedPath();
            if (path.length) {
                return path[0];
            }
        }
        else if ('path' in event && event.path.length) {
            return event.path[0];
        }
    }
    catch (_a) { }
    return event && event.target;
}
function initMutationObserver(options, rootEl) {
    var _a, _b;
    const mutationBuffer = new MutationBuffer();
    mutationBuffers.push(mutationBuffer);
    mutationBuffer.init(options);
    let mutationObserverCtor = window.MutationObserver ||
        window.__rrMutationObserver;
    const angularZoneSymbol = (_b = (_a = window === null || window === void 0 ? void 0 : window.Zone) === null || _a === void 0 ? void 0 : _a.__symbol__) === null || _b === void 0 ? void 0 : _b.call(_a, 'MutationObserver');
    if (angularZoneSymbol &&
        window[angularZoneSymbol]) {
        mutationObserverCtor = window[angularZoneSymbol];
    }
    const observer = new mutationObserverCtor(callbackWrapper((mutations) => {
        if (options.onMutation && options.onMutation(mutations) === false) {
            return;
        }
        mutationBuffer.processMutations(mutations);
    }));
    observer.observe(rootEl, {
        attributes: true,
        attributeOldValue: true,
        characterData: true,
        characterDataOldValue: true,
        childList: true,
        subtree: true,
    });
    return observer;
}
function initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {
    if (sampling.mousemove === false) {
        return () => { };
    }
    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;
    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'
        ? sampling.mousemoveCallback
        : 500;
    let positions = [];
    let timeBaseline;
    const wrappedCb = throttle((source) => {
        const totalOffset = Date.now() - timeBaseline;
        callbackWrapper(mousemoveCb)(positions.map((p) => {
            p.timeOffset -= totalOffset;
            return p;
        }), source);
        positions = [];
        timeBaseline = null;
    }, callbackThreshold);
    const updatePosition = throttle((evt) => {
        const target = getEventTarget(evt);
        const { clientX, clientY } = isTouchEvent(evt)
            ? evt.changedTouches[0]
            : evt;
        if (!timeBaseline) {
            timeBaseline = Date.now();
        }
        positions.push({
            x: clientX,
            y: clientY,
            id: mirror.getId(target),
            timeOffset: Date.now() - timeBaseline,
        });
        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent
            ? IncrementalSource.Drag
            : evt instanceof MouseEvent
                ? IncrementalSource.MouseMove
                : IncrementalSource.TouchMove);
    }, threshold, {
        trailing: false,
    });
    const handlers = [
        on('mousemove', callbackWrapper(updatePosition), doc),
        on('touchmove', callbackWrapper(updatePosition), doc),
        on('drag', callbackWrapper(updatePosition), doc),
    ];
    return callbackWrapper(() => {
        handlers.forEach((h) => h());
    });
}
function initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {
    if (sampling.mouseInteraction === false) {
        return () => { };
    }
    const disableMap = sampling.mouseInteraction === true ||
        sampling.mouseInteraction === undefined
        ? {}
        : sampling.mouseInteraction;
    const handlers = [];
    const getHandler = (eventKey) => {
        return (event) => {
            const target = getEventTarget(event);
            if (isBlocked(target, blockClass, blockSelector, unblockSelector)) {
                return;
            }
            const e = isTouchEvent(event) ? event.changedTouches[0] : event;
            if (!e) {
                return;
            }
            const id = mirror.getId(target);
            const { clientX, clientY } = e;
            callbackWrapper(mouseInteractionCb)({
                type: MouseInteractions[eventKey],
                id,
                x: clientX,
                y: clientY,
            });
        };
    };
    Object.keys(MouseInteractions)
        .filter((key) => Number.isNaN(Number(key)) &&
        !key.endsWith('_Departed') &&
        disableMap[key] !== false)
        .forEach((eventKey) => {
        const eventName = eventKey.toLowerCase();
        const handler = callbackWrapper(getHandler(eventKey));
        handlers.push(on(eventName, handler, doc));
    });
    return callbackWrapper(() => {
        handlers.forEach((h) => h());
    });
}
function initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {
    const updatePosition = throttle((evt) => {
        const target = getEventTarget(evt);
        if (!target ||
            isBlocked(target, blockClass, blockSelector, unblockSelector)) {
            return;
        }
        const id = mirror.getId(target);
        if (target === doc) {
            const scrollEl = (doc.scrollingElement || doc.documentElement);
            callbackWrapper(scrollCb)({
                id,
                x: scrollEl.scrollLeft,
                y: scrollEl.scrollTop,
            });
        }
        else {
            callbackWrapper(scrollCb)({
                id,
                x: target.scrollLeft,
                y: target.scrollTop,
            });
        }
    }, sampling.scroll || 100);
    return on('scroll', callbackWrapper(updatePosition), doc);
}
function initViewportResizeObserver({ viewportResizeCb, }) {
    let lastH = -1;
    let lastW = -1;
    const updateDimension = throttle(() => {
        const height = getWindowHeight();
        const width = getWindowWidth();
        if (lastH !== height || lastW !== width) {
            callbackWrapper(viewportResizeCb)({
                width: Number(width),
                height: Number(height),
            });
            lastH = height;
            lastW = width;
        }
    }, 200);
    return on('resize', callbackWrapper(updateDimension), window);
}
function wrapEventWithUserTriggeredFlag(v, enable) {
    const value = Object.assign({}, v);
    if (!enable)
        delete value.userTriggered;
    return value;
}
const INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];
const lastInputValueMap = new WeakMap();
function initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputSelector, unmaskInputSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, }) {
    function eventHandler(event) {
        let target = getEventTarget(event);
        const tagName = target && target.tagName;
        const userTriggered = event.isTrusted;
        if (tagName === 'OPTION')
            target = target.parentElement;
        if (!target ||
            !tagName ||
            INPUT_TAGS.indexOf(tagName) < 0 ||
            isBlocked(target, blockClass, blockSelector, unblockSelector)) {
            return;
        }
        let type = target.type;
        if (target.classList.contains(ignoreClass) ||
            (ignoreSelector && target.matches(ignoreSelector))) {
            return;
        }
        let text = target.value;
        let isChecked = false;
        if (target.hasAttribute('rr_is_password')) {
            type = 'password';
        }
        if (type === 'radio' || type === 'checkbox') {
            isChecked = target.checked;
        }
        else if (hasInputMaskOptions({
            maskInputOptions,
            maskInputSelector,
            tagName,
            type,
        })) {
            text = maskInputValue({
                input: target,
                maskInputOptions,
                maskInputSelector,
                unmaskInputSelector,
                tagName,
                type,
                value: text,
                maskInputFn,
            });
        }
        cbWithDedup(target, callbackWrapper(wrapEventWithUserTriggeredFlag)({ text, isChecked, userTriggered }, userTriggeredOnInput));
        const name = target.name;
        if (type === 'radio' && name && isChecked) {
            doc
                .querySelectorAll(`input[type="radio"][name="${name}"]`)
                .forEach((el) => {
                if (el !== target) {
                    cbWithDedup(el, callbackWrapper(wrapEventWithUserTriggeredFlag)({
                        text: el.value,
                        isChecked: !isChecked,
                        userTriggered: false,
                    }, userTriggeredOnInput));
                }
            });
        }
    }
    function cbWithDedup(target, v) {
        const lastInputValue = lastInputValueMap.get(target);
        if (!lastInputValue ||
            lastInputValue.text !== v.text ||
            lastInputValue.isChecked !== v.isChecked) {
            lastInputValueMap.set(target, v);
            const id = mirror.getId(target);
            inputCb(Object.assign(Object.assign({}, v), { id }));
        }
    }
    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];
    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));
    const propertyDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');
    const hookProperties = [
        [HTMLInputElement.prototype, 'value'],
        [HTMLInputElement.prototype, 'checked'],
        [HTMLSelectElement.prototype, 'value'],
        [HTMLTextAreaElement.prototype, 'value'],
        [HTMLSelectElement.prototype, 'selectedIndex'],
        [HTMLOptionElement.prototype, 'selected'],
    ];
    if (propertyDescriptor && propertyDescriptor.set) {
        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {
            set() {
                callbackWrapper(eventHandler)({ target: this });
            },
        })));
    }
    return callbackWrapper(() => {
        handlers.forEach((h) => h());
    });
}
function getNestedCSSRulePositions(rule) {
    const positions = [];
    function recurse(childRule, pos) {
        if ((hasNestedCSSRule('CSSGroupingRule') &&
            childRule.parentRule instanceof CSSGroupingRule) ||
            (hasNestedCSSRule('CSSMediaRule') &&
                childRule.parentRule instanceof CSSMediaRule) ||
            (hasNestedCSSRule('CSSSupportsRule') &&
                childRule.parentRule instanceof CSSSupportsRule) ||
            (hasNestedCSSRule('CSSConditionRule') &&
                childRule.parentRule instanceof CSSConditionRule)) {
            const rules = Array.from(childRule.parentRule.cssRules);
            const index = rules.indexOf(childRule);
            pos.unshift(index);
        }
        else {
            const rules = Array.from(childRule.parentStyleSheet.cssRules);
            const index = rules.indexOf(childRule);
            pos.unshift(index);
        }
        return pos;
    }
    return recurse(rule, positions);
}
function initStyleSheetObserver({ styleSheetRuleCb, mirror }, { win }) {
    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {
        return () => { };
    }
    const insertRule = win.CSSStyleSheet.prototype.insertRule;
    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {
        apply: callbackWrapper((target, thisArg, argumentsList) => {
            const [rule, index] = argumentsList;
            const id = mirror.getId(thisArg.ownerNode);
            if (id !== -1) {
                styleSheetRuleCb({
                    id,
                    adds: [{ rule, index }],
                });
            }
            return target.apply(thisArg, argumentsList);
        }),
    });
    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;
    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {
        apply: callbackWrapper((target, thisArg, argumentsList) => {
            const [index] = argumentsList;
            const id = mirror.getId(thisArg.ownerNode);
            if (id !== -1) {
                styleSheetRuleCb({
                    id,
                    removes: [{ index }],
                });
            }
            return target.apply(thisArg, argumentsList);
        }),
    });
    const supportedNestedCSSRuleTypes = {};
    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {
        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;
    }
    else {
        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {
            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;
        }
        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {
            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;
        }
        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {
            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;
        }
    }
    const unmodifiedFunctions = {};
    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {
        unmodifiedFunctions[typeKey] = {
            insertRule: type.prototype.insertRule,
            deleteRule: type.prototype.deleteRule,
        };
        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {
            apply: callbackWrapper((target, thisArg, argumentsList) => {
                const [rule, index] = argumentsList;
                const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);
                if (id !== -1) {
                    styleSheetRuleCb({
                        id,
                        adds: [
                            {
                                rule,
                                index: [
                                    ...getNestedCSSRulePositions(thisArg),
                                    index || 0,
                                ],
                            },
                        ],
                    });
                }
                return target.apply(thisArg, argumentsList);
            }),
        });
        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {
            apply: callbackWrapper((target, thisArg, argumentsList) => {
                const [index] = argumentsList;
                const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);
                if (id !== -1) {
                    styleSheetRuleCb({
                        id,
                        removes: [
                            { index: [...getNestedCSSRulePositions(thisArg), index] },
                        ],
                    });
                }
                return target.apply(thisArg, argumentsList);
            }),
        });
    });
    return callbackWrapper(() => {
        win.CSSStyleSheet.prototype.insertRule = insertRule;
        win.CSSStyleSheet.prototype.deleteRule = deleteRule;
        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {
            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;
            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;
        });
    });
}
function initStyleDeclarationObserver({ styleDeclarationCb, mirror }, { win }) {
    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;
    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {
        apply: callbackWrapper((target, thisArg, argumentsList) => {
            var _a, _b;
            const [property, value, priority] = argumentsList;
            const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);
            if (id !== -1) {
                styleDeclarationCb({
                    id,
                    set: {
                        property,
                        value,
                        priority,
                    },
                    index: getNestedCSSRulePositions(thisArg.parentRule),
                });
            }
            return target.apply(thisArg, argumentsList);
        }),
    });
    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;
    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {
        apply: callbackWrapper((target, thisArg, argumentsList) => {
            var _a, _b;
            const [property] = argumentsList;
            const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);
            if (id !== -1) {
                styleDeclarationCb({
                    id,
                    remove: {
                        property,
                    },
                    index: getNestedCSSRulePositions(thisArg.parentRule),
                });
            }
            return target.apply(thisArg, argumentsList);
        }),
    });
    return callbackWrapper(() => {
        win.CSSStyleDeclaration.prototype.setProperty = setProperty;
        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;
    });
}
function initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, }) {
    const handler = (type) => throttle(callbackWrapper((event) => {
        const target = getEventTarget(event);
        if (!target ||
            isBlocked(target, blockClass, blockSelector, unblockSelector)) {
            return;
        }
        const { currentTime, volume, muted } = target;
        mediaInteractionCb({
            type,
            id: mirror.getId(target),
            currentTime,
            volume,
            muted,
        });
    }), sampling.media || 500);
    const handlers = [
        on('play', handler(0)),
        on('pause', handler(1)),
        on('seeked', handler(2)),
        on('volumechange', handler(3)),
    ];
    return callbackWrapper(() => {
        handlers.forEach((h) => h());
    });
}
function initFontObserver({ fontCb, doc }) {
    const win = doc.defaultView;
    if (!win) {
        return () => { };
    }
    const handlers = [];
    const fontMap = new WeakMap();
    const originalFontFace = win.FontFace;
    win.FontFace = function FontFace(family, source, descriptors) {
        const fontFace = new originalFontFace(family, source, descriptors);
        fontMap.set(fontFace, {
            family,
            buffer: typeof source !== 'string',
            descriptors,
            fontSource: typeof source === 'string'
                ? source
                :
                    JSON.stringify(Array.from(new Uint8Array(source))),
        });
        return fontFace;
    };
    const restoreHandler = patch(doc.fonts, 'add', function (original) {
        return function (fontFace) {
            setTimeout(() => {
                const p = fontMap.get(fontFace);
                if (p) {
                    fontCb(p);
                    fontMap.delete(fontFace);
                }
            }, 0);
            return original.apply(this, [fontFace]);
        };
    });
    handlers.push(() => {
        win.FontFace = originalFontFace;
    });
    handlers.push(restoreHandler);
    return callbackWrapper(() => {
        handlers.forEach((h) => h());
    });
}
function mergeHooks(o, hooks) {
    const { mutationCb, mousemoveCb, mouseInteractionCb, scrollCb, viewportResizeCb, inputCb, mediaInteractionCb, styleSheetRuleCb, styleDeclarationCb, canvasMutationCb, fontCb, } = o;
    o.mutationCb = (...p) => {
        if (hooks.mutation) {
            hooks.mutation(...p);
        }
        mutationCb(...p);
    };
    o.mousemoveCb = (...p) => {
        if (hooks.mousemove) {
            hooks.mousemove(...p);
        }
        mousemoveCb(...p);
    };
    o.mouseInteractionCb = (...p) => {
        if (hooks.mouseInteraction) {
            hooks.mouseInteraction(...p);
        }
        mouseInteractionCb(...p);
    };
    o.scrollCb = (...p) => {
        if (hooks.scroll) {
            hooks.scroll(...p);
        }
        scrollCb(...p);
    };
    o.viewportResizeCb = (...p) => {
        if (hooks.viewportResize) {
            hooks.viewportResize(...p);
        }
        viewportResizeCb(...p);
    };
    o.inputCb = (...p) => {
        if (hooks.input) {
            hooks.input(...p);
        }
        inputCb(...p);
    };
    o.mediaInteractionCb = (...p) => {
        if (hooks.mediaInteaction) {
            hooks.mediaInteaction(...p);
        }
        mediaInteractionCb(...p);
    };
    o.styleSheetRuleCb = (...p) => {
        if (hooks.styleSheetRule) {
            hooks.styleSheetRule(...p);
        }
        styleSheetRuleCb(...p);
    };
    o.styleDeclarationCb = (...p) => {
        if (hooks.styleDeclaration) {
            hooks.styleDeclaration(...p);
        }
        styleDeclarationCb(...p);
    };
    o.canvasMutationCb = (...p) => {
        if (hooks.canvasMutation) {
            hooks.canvasMutation(...p);
        }
        canvasMutationCb(...p);
    };
    o.fontCb = (...p) => {
        if (hooks.font) {
            hooks.font(...p);
        }
        fontCb(...p);
    };
}
function initObservers(o, hooks = {}) {
    const currentWindow = o.doc.defaultView;
    if (!currentWindow) {
        return () => { };
    }
    mergeHooks(o, hooks);
    const mutationObserver = initMutationObserver(o, o.doc);
    const mousemoveHandler = initMoveObserver(o);
    const mouseInteractionHandler = initMouseInteractionObserver(o);
    const scrollHandler = initScrollObserver(o);
    const viewportResizeHandler = initViewportResizeObserver(o);
    const inputHandler = initInputObserver(o);
    const mediaInteractionHandler = initMediaInteractionObserver(o);
    const styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });
    const styleDeclarationObserver = initStyleDeclarationObserver(o, {
        win: currentWindow,
    });
    const fontObserver = o.collectFonts ? initFontObserver(o) : () => { };
    const pluginHandlers = [];
    for (const plugin of o.plugins) {
        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));
    }
    return callbackWrapper(() => {
        mutationBuffers.forEach((b) => b.reset());
        mutationObserver.disconnect();
        mousemoveHandler();
        mouseInteractionHandler();
        scrollHandler();
        viewportResizeHandler();
        inputHandler();
        mediaInteractionHandler();
        try {
            styleSheetObserver();
            styleDeclarationObserver();
        }
        catch (e) {
        }
        fontObserver();
        pluginHandlers.forEach((h) => h());
    });
}
function hasNestedCSSRule(prop) {
    return typeof window[prop] !== 'undefined';
}
function canMonkeyPatchNestedCSSRule(prop) {
    return Boolean(typeof window[prop] !== 'undefined' &&
        window[prop].prototype &&
        'insertRule' in window[prop].prototype &&
        'deleteRule' in window[prop].prototype);
}

class IframeManager {
    constructor(options) {
        this.iframes = new WeakMap();
        this.mutationCb = options.mutationCb;
    }
    addIframe(iframeEl) {
        this.iframes.set(iframeEl, true);
    }
    addLoadListener(cb) {
        this.loadListener = cb;
    }
    attachIframe(iframeEl, childSn) {
        var _a;
        this.mutationCb({
            adds: [
                {
                    parentId: iframeEl.__sn.id,
                    nextId: null,
                    node: childSn,
                },
            ],
            removes: [],
            texts: [],
            attributes: [],
            isAttachIframe: true,
        });
        (_a = this.loadListener) === null || _a === void 0 ? void 0 : _a.call(this, iframeEl);
    }
}

class ShadowDomManager {
    constructor(options) {
        this.restorePatches = [];
        this.mutationCb = options.mutationCb;
        this.scrollCb = options.scrollCb;
        this.bypassOptions = options.bypassOptions;
        this.mirror = options.mirror;
        const manager = this;
        this.restorePatches.push(patch(HTMLElement.prototype, 'attachShadow', function (original) {
            return function () {
                const shadowRoot = original.apply(this, arguments);
                if (this.shadowRoot)
                    manager.addShadowRoot(this.shadowRoot, this.ownerDocument);
                return shadowRoot;
            };
        }));
    }
    addShadowRoot(shadowRoot, doc) {
        initMutationObserver(Object.assign(Object.assign({}, this.bypassOptions), { doc, mutationCb: this.mutationCb, mirror: this.mirror, shadowDomManager: this }), shadowRoot);
        initScrollObserver(Object.assign(Object.assign({}, this.bypassOptions), { scrollCb: this.scrollCb, doc: shadowRoot, mirror: this.mirror }));
    }
    observeAttachShadow(iframeElement) {
        if (iframeElement.contentWindow) {
            const manager = this;
            this.restorePatches.push(patch(iframeElement.contentWindow.HTMLElement.prototype, 'attachShadow', function (original) {
                return function () {
                    const shadowRoot = original.apply(this, arguments);
                    if (this.shadowRoot)
                        manager.addShadowRoot(this.shadowRoot, iframeElement.contentDocument);
                    return shadowRoot;
                };
            }));
        }
    }
    reset() {
        this.restorePatches.forEach((restorePatch) => restorePatch());
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function initCanvas2DMutationObserver(cb, win, blockClass, unblockSelector, blockSelector, mirror) {
    const handlers = [];
    const props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);
    for (const prop of props2D) {
        try {
            if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {
                continue;
            }
            const restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {
                return function (...args) {
                    if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {
                        setTimeout(() => {
                            const recordArgs = [...args];
                            if (prop === 'drawImage') {
                                if (recordArgs[0] &&
                                    recordArgs[0] instanceof HTMLCanvasElement) {
                                    const canvas = recordArgs[0];
                                    const ctx = canvas.getContext('2d');
                                    let imgd = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, canvas.width, canvas.height);
                                    let pix = imgd === null || imgd === void 0 ? void 0 : imgd.data;
                                    recordArgs[0] = JSON.stringify(pix);
                                }
                            }
                            cb(this.canvas, {
                                type: CanvasContext['2D'],
                                property: prop,
                                args: recordArgs,
                            });
                        }, 0);
                    }
                    return original.apply(this, args);
                };
            });
            handlers.push(restoreHandler);
        }
        catch (_a) {
            const hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {
                set(v) {
                    cb(this.canvas, {
                        type: CanvasContext['2D'],
                        property: prop,
                        args: [v],
                        setter: true,
                    });
                },
            });
            handlers.push(hookHandler);
        }
    }
    return () => {
        handlers.forEach((h) => h());
    };
}

function initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector) {
    const handlers = [];
    try {
        const restoreHandler = patch(win.HTMLCanvasElement.prototype, 'getContext', function (original) {
            return function (contextType, ...args) {
                if (!isBlocked(this, blockClass, blockSelector, unblockSelector)) {
                    if (!('__context' in this))
                        this.__context = contextType;
                }
                return original.apply(this, [contextType, ...args]);
            };
        });
        handlers.push(restoreHandler);
    }
    catch (_a) {
        console.error('failed to patch HTMLCanvasElement.prototype.getContext');
    }
    return () => {
        handlers.forEach((h) => h());
    };
}

/*
 * base64-arraybuffer 1.0.2 <https://github.com/niklasvh/base64-arraybuffer>
 * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>
 * Released under MIT License
 */
var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
// Use a lookup table to find the index.
var lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);
for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
}
var encode = function (arraybuffer) {
    var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';
    for (i = 0; i < len; i += 3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
        base64 += chars[bytes[i + 2] & 63];
    }
    if (len % 3 === 2) {
        base64 = base64.substring(0, base64.length - 1) + '=';
    }
    else if (len % 3 === 1) {
        base64 = base64.substring(0, base64.length - 2) + '==';
    }
    return base64;
};

const webGLVarMap = new Map();
function variableListFor(ctx, ctor) {
    let contextMap = webGLVarMap.get(ctx);
    if (!contextMap) {
        contextMap = new Map();
        webGLVarMap.set(ctx, contextMap);
    }
    if (!contextMap.has(ctor)) {
        contextMap.set(ctor, []);
    }
    return contextMap.get(ctor);
}
const saveWebGLVar = (value, win, ctx) => {
    if (!value ||
        !(isInstanceOfWebGLObject(value, win) || typeof value === 'object'))
        return;
    const name = value.constructor.name;
    const list = variableListFor(ctx, name);
    let index = list.indexOf(value);
    if (index === -1) {
        index = list.length;
        list.push(value);
    }
    return index;
};
function serializeArg(value, win, ctx) {
    if (value instanceof Array) {
        return value.map((arg) => serializeArg(arg, win, ctx));
    }
    else if (value === null) {
        return value;
    }
    else if (value instanceof Float32Array ||
        value instanceof Float64Array ||
        value instanceof Int32Array ||
        value instanceof Uint32Array ||
        value instanceof Uint8Array ||
        value instanceof Uint16Array ||
        value instanceof Int16Array ||
        value instanceof Int8Array ||
        value instanceof Uint8ClampedArray) {
        const name = value.constructor.name;
        return {
            rr_type: name,
            args: [Object.values(value)],
        };
    }
    else if (value instanceof ArrayBuffer) {
        const name = value.constructor.name;
        const base64 = encode(value);
        return {
            rr_type: name,
            base64,
        };
    }
    else if (value instanceof DataView) {
        const name = value.constructor.name;
        return {
            rr_type: name,
            args: [
                serializeArg(value.buffer, win, ctx),
                value.byteOffset,
                value.byteLength,
            ],
        };
    }
    else if (value instanceof HTMLImageElement) {
        const name = value.constructor.name;
        const { src } = value;
        return {
            rr_type: name,
            src,
        };
    }
    else if (value instanceof ImageData) {
        const name = value.constructor.name;
        return {
            rr_type: name,
            args: [serializeArg(value.data, win, ctx), value.width, value.height],
        };
    }
    else if (isInstanceOfWebGLObject(value, win) || typeof value === 'object') {
        const name = value.constructor.name;
        const index = saveWebGLVar(value, win, ctx);
        return {
            rr_type: name,
            index: index,
        };
    }
    return value;
}
const serializeArgs = (args, win, ctx) => {
    return [...args].map((arg) => serializeArg(arg, win, ctx));
};
const isInstanceOfWebGLObject = (value, win) => {
    const webGLConstructorNames = [
        'WebGLActiveInfo',
        'WebGLBuffer',
        'WebGLFramebuffer',
        'WebGLProgram',
        'WebGLRenderbuffer',
        'WebGLShader',
        'WebGLShaderPrecisionFormat',
        'WebGLTexture',
        'WebGLUniformLocation',
        'WebGLVertexArrayObject',
        'WebGLVertexArrayObjectOES',
    ];
    const supportedWebGLConstructorNames = webGLConstructorNames.filter((name) => typeof win[name] === 'function');
    return Boolean(supportedWebGLConstructorNames.find((name) => value instanceof win[name]));
};

function patchGLPrototype(prototype, type, cb, blockClass, unblockSelector, blockSelector, mirror, win) {
    const handlers = [];
    const props = Object.getOwnPropertyNames(prototype);
    for (const prop of props) {
        try {
            if (typeof prototype[prop] !== 'function') {
                continue;
            }
            const restoreHandler = patch(prototype, prop, function (original) {
                return function (...args) {
                    const result = original.apply(this, args);
                    saveWebGLVar(result, win, prototype);
                    if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {
                        const id = mirror.getId(this.canvas);
                        const recordArgs = serializeArgs([...args], win, prototype);
                        const mutation = {
                            type,
                            property: prop,
                            args: recordArgs,
                        };
                        cb(this.canvas, mutation);
                    }
                    return result;
                };
            });
            handlers.push(restoreHandler);
        }
        catch (_a) {
            const hookHandler = hookSetter(prototype, prop, {
                set(v) {
                    cb(this.canvas, {
                        type,
                        property: prop,
                        args: [v],
                        setter: true,
                    });
                },
            });
            handlers.push(hookHandler);
        }
    }
    return handlers;
}
function initCanvasWebGLMutationObserver(cb, win, blockClass, blockSelector, unblockSelector, mirror) {
    const handlers = [];
    handlers.push(...patchGLPrototype(win.WebGLRenderingContext.prototype, CanvasContext.WebGL, cb, blockClass, blockSelector, unblockSelector, mirror, win));
    if (typeof win.WebGL2RenderingContext !== 'undefined') {
        handlers.push(...patchGLPrototype(win.WebGL2RenderingContext.prototype, CanvasContext.WebGL2, cb, blockClass, blockSelector, unblockSelector, mirror, win));
    }
    return () => {
        handlers.forEach((h) => h());
    };
}

class CanvasManager {
    reset() {
        this.pendingCanvasMutations.clear();
        this.resetObservers && this.resetObservers();
    }
    freeze() {
        this.frozen = true;
    }
    unfreeze() {
        this.frozen = false;
    }
    lock() {
        this.locked = true;
    }
    unlock() {
        this.locked = false;
    }
    constructor(options) {
        this.pendingCanvasMutations = new Map();
        this.rafStamps = { latestId: 0, invokeId: null };
        this.frozen = false;
        this.locked = false;
        this.processMutation = function (target, mutation) {
            const newFrame = this.rafStamps.invokeId &&
                this.rafStamps.latestId !== this.rafStamps.invokeId;
            if (newFrame || !this.rafStamps.invokeId)
                this.rafStamps.invokeId = this.rafStamps.latestId;
            if (!this.pendingCanvasMutations.has(target)) {
                this.pendingCanvasMutations.set(target, []);
            }
            this.pendingCanvasMutations.get(target).push(mutation);
        };
        this.mutationCb = options.mutationCb;
        this.mirror = options.mirror;
        if (options.recordCanvas === true)
            this.initCanvasMutationObserver(options.win, options.blockClass, options.blockSelector, options.unblockSelector);
    }
    initCanvasMutationObserver(win, blockClass, unblockSelector, blockSelector) {
        this.startRAFTimestamping();
        this.startPendingCanvasMutationFlusher();
        const canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector);
        const canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);
        const canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);
        this.resetObservers = () => {
            canvasContextReset();
            canvas2DReset();
            canvasWebGL1and2Reset();
        };
    }
    startPendingCanvasMutationFlusher() {
        requestAnimationFrame(() => this.flushPendingCanvasMutations());
    }
    startRAFTimestamping() {
        const setLatestRAFTimestamp = (timestamp) => {
            this.rafStamps.latestId = timestamp;
            requestAnimationFrame(setLatestRAFTimestamp);
        };
        requestAnimationFrame(setLatestRAFTimestamp);
    }
    flushPendingCanvasMutations() {
        this.pendingCanvasMutations.forEach((values, canvas) => {
            const id = this.mirror.getId(canvas);
            this.flushPendingCanvasMutationFor(canvas, id);
        });
        requestAnimationFrame(() => this.flushPendingCanvasMutations());
    }
    flushPendingCanvasMutationFor(canvas, id) {
        if (this.frozen || this.locked) {
            return;
        }
        const valuesWithType = this.pendingCanvasMutations.get(canvas);
        if (!valuesWithType || id === -1)
            return;
        const values = valuesWithType.map((value) => {
            const rest = __rest(value, ["type"]);
            return rest;
        });
        const { type } = valuesWithType[0];
        this.mutationCb({ id, type, commands: values });
        this.pendingCanvasMutations.delete(canvas);
    }
}

function wrapEvent(e) {
    return Object.assign(Object.assign({}, e), { timestamp: Date.now() });
}
let wrappedEmit;
let takeFullSnapshot;
const mirror = createMirror();
function record(options = {}) {
    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, maskInputSelector = null, unmaskTextSelector = null, unmaskInputSelector = null, inlineStylesheet = true, maskAllText = false, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskInputFn, maskTextFn, hooks, packFn, sampling = {}, mousemoveWait, recordCanvas = false, userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, onMutation, } = options;
    if (!emit) {
        throw new Error('emit function is required');
    }
    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {
        sampling.mousemove = mousemoveWait;
    }
    const maskInputOptions = maskAllInputs === true
        ? {
            color: true,
            date: true,
            'datetime-local': true,
            email: true,
            month: true,
            number: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true,
            textarea: true,
            select: true,
            radio: true,
            checkbox: true,
        }
        : _maskInputOptions !== undefined
            ? _maskInputOptions
            : {};
    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'
        ? {
            script: true,
            comment: true,
            headFavicon: true,
            headWhitespace: true,
            headMetaSocial: true,
            headMetaRobots: true,
            headMetaHttpEquiv: true,
            headMetaVerification: true,
            headMetaAuthorship: _slimDOMOptions === 'all',
            headMetaDescKeywords: _slimDOMOptions === 'all',
        }
        : _slimDOMOptions
            ? _slimDOMOptions
            : {};
    polyfill();
    let lastFullSnapshotEvent;
    let incrementalSnapshotCount = 0;
    const eventProcessor = (e) => {
        for (const plugin of plugins || []) {
            if (plugin.eventProcessor) {
                e = plugin.eventProcessor(e);
            }
        }
        if (packFn) {
            e = packFn(e);
        }
        return e;
    };
    wrappedEmit = (e, isCheckout) => {
        var _a;
        if (((_a = mutationBuffers[0]) === null || _a === void 0 ? void 0 : _a.isFrozen()) &&
            e.type !== EventType.FullSnapshot &&
            !(e.type === EventType.IncrementalSnapshot &&
                e.data.source === IncrementalSource.Mutation)) {
            mutationBuffers.forEach((buf) => buf.unfreeze());
        }
        emit(eventProcessor(e), isCheckout);
        if (e.type === EventType.FullSnapshot) {
            lastFullSnapshotEvent = e;
            incrementalSnapshotCount = 0;
        }
        else if (e.type === EventType.IncrementalSnapshot) {
            if (e.data.source === IncrementalSource.Mutation &&
                e.data.isAttachIframe) {
                return;
            }
            incrementalSnapshotCount++;
            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;
            const exceedTime = checkoutEveryNms &&
                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;
            if (exceedCount || exceedTime) {
                takeFullSnapshot(true);
            }
        }
    };
    const wrappedMutationEmit = (m) => {
        wrappedEmit(wrapEvent({
            type: EventType.IncrementalSnapshot,
            data: Object.assign({ source: IncrementalSource.Mutation }, m),
        }));
    };
    const wrappedScrollEmit = (p) => wrappedEmit(wrapEvent({
        type: EventType.IncrementalSnapshot,
        data: Object.assign({ source: IncrementalSource.Scroll }, p),
    }));
    const wrappedCanvasMutationEmit = (p) => wrappedEmit(wrapEvent({
        type: EventType.IncrementalSnapshot,
        data: Object.assign({ source: IncrementalSource.CanvasMutation }, p),
    }));
    const iframeManager = new IframeManager({
        mutationCb: wrappedMutationEmit,
    });
    const canvasManager = new CanvasManager({
        recordCanvas,
        mutationCb: wrappedCanvasMutationEmit,
        win: window,
        blockClass,
        blockSelector,
        unblockSelector,
        mirror,
    });
    const shadowDomManager = new ShadowDomManager({
        mutationCb: wrappedMutationEmit,
        scrollCb: wrappedScrollEmit,
        bypassOptions: {
            onMutation,
            blockClass,
            blockSelector,
            unblockSelector,
            maskTextClass,
            maskTextSelector,
            unmaskTextSelector,
            maskInputSelector,
            unmaskInputSelector,
            inlineStylesheet,
            maskAllText,
            maskInputOptions,
            maskTextFn,
            maskInputFn,
            recordCanvas,
            inlineImages,
            sampling,
            slimDOMOptions,
            iframeManager,
            canvasManager,
        },
        mirror,
    });
    takeFullSnapshot = (isCheckout = false) => {
        var _a, _b, _c, _d;
        wrappedEmit(wrapEvent({
            type: EventType.Meta,
            data: {
                href: window.location.href,
                width: getWindowWidth(),
                height: getWindowHeight(),
            },
        }), isCheckout);
        mutationBuffers.forEach((buf) => buf.lock());
        const [node, idNodeMap] = snapshot(document, {
            blockClass,
            blockSelector,
            unblockSelector,
            maskTextClass,
            maskTextSelector,
            unmaskTextSelector,
            maskInputSelector,
            unmaskInputSelector,
            inlineStylesheet,
            maskAllText,
            maskAllInputs: maskInputOptions,
            maskTextFn,
            slimDOM: slimDOMOptions,
            recordCanvas,
            inlineImages,
            onSerialize: (n) => {
                if (isIframeINode(n)) {
                    iframeManager.addIframe(n);
                }
                if (hasShadowRoot(n)) {
                    shadowDomManager.addShadowRoot(n.shadowRoot, document);
                }
            },
            onIframeLoad: (iframe, childSn) => {
                iframeManager.attachIframe(iframe, childSn);
                shadowDomManager.observeAttachShadow(iframe);
            },
            keepIframeSrcFn,
        });
        if (!node) {
            return console.warn('Failed to snapshot the document');
        }
        mirror.map = idNodeMap;
        wrappedEmit(wrapEvent({
            type: EventType.FullSnapshot,
            data: {
                node,
                initialOffset: {
                    left: window.pageXOffset !== undefined
                        ? window.pageXOffset
                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) ||
                            ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) ||
                            (document === null || document === void 0 ? void 0 : document.body.scrollLeft) ||
                            0,
                    top: window.pageYOffset !== undefined
                        ? window.pageYOffset
                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) ||
                            ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) ||
                            (document === null || document === void 0 ? void 0 : document.body.scrollTop) ||
                            0,
                },
            },
        }));
        mutationBuffers.forEach((buf) => buf.unlock());
    };
    try {
        const handlers = [];
        handlers.push(on('DOMContentLoaded', () => {
            wrappedEmit(wrapEvent({
                type: EventType.DomContentLoaded,
                data: {},
            }));
        }));
        const observe = (doc) => {
            var _a;
            return callbackWrapper(initObservers)({
                onMutation,
                mutationCb: wrappedMutationEmit,
                mousemoveCb: (positions, source) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: {
                        source,
                        positions,
                    },
                })),
                mouseInteractionCb: (d) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.MouseInteraction }, d),
                })),
                scrollCb: wrappedScrollEmit,
                viewportResizeCb: (d) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.ViewportResize }, d),
                })),
                inputCb: (v) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.Input }, v),
                })),
                mediaInteractionCb: (p) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.MediaInteraction }, p),
                })),
                styleSheetRuleCb: (r) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.StyleSheetRule }, r),
                })),
                styleDeclarationCb: (r) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.StyleDeclaration }, r),
                })),
                canvasMutationCb: wrappedCanvasMutationEmit,
                fontCb: (p) => wrappedEmit(wrapEvent({
                    type: EventType.IncrementalSnapshot,
                    data: Object.assign({ source: IncrementalSource.Font }, p),
                })),
                blockClass,
                ignoreClass,
                ignoreSelector,
                maskTextClass,
                maskTextSelector,
                unmaskTextSelector,
                maskInputSelector,
                unmaskInputSelector,
                maskInputOptions,
                inlineStylesheet,
                sampling,
                recordCanvas,
                inlineImages,
                userTriggeredOnInput,
                collectFonts,
                doc,
                maskAllText,
                maskInputFn,
                maskTextFn,
                blockSelector,
                unblockSelector,
                slimDOMOptions,
                mirror,
                iframeManager,
                shadowDomManager,
                canvasManager,
                plugins: ((_a = plugins === null || plugins === void 0 ? void 0 : plugins.filter((p) => p.observer)) === null || _a === void 0 ? void 0 : _a.map((p) => ({
                    observer: p.observer,
                    options: p.options,
                    callback: (payload) => wrappedEmit(wrapEvent({
                        type: EventType.Plugin,
                        data: {
                            plugin: p.name,
                            payload,
                        },
                    })),
                }))) || [],
            }, hooks);
        };
        iframeManager.addLoadListener((iframeEl) => {
            try {
                handlers.push(observe(iframeEl.contentDocument));
            }
            catch (error) {
                console.warn(error);
            }
        });
        const init = () => {
            takeFullSnapshot();
            handlers.push(observe(document));
        };
        if (document.readyState === 'interactive' ||
            document.readyState === 'complete') {
            init();
        }
        else {
            handlers.push(on('load', () => {
                wrappedEmit(wrapEvent({
                    type: EventType.Load,
                    data: {},
                }));
                init();
            }, window));
        }
        return () => {
            handlers.forEach((h) => h());
        };
    }
    catch (error) {
        console.warn(error);
    }
}
record.addCustomEvent = (tag, payload) => {
    if (!wrappedEmit) {
        throw new Error('please add custom event after start recording');
    }
    wrappedEmit(wrapEvent({
        type: EventType.Custom,
        data: {
            tag,
            payload,
        },
    }));
};
record.freezePage = () => {
    mutationBuffers.forEach((buf) => buf.freeze());
};
record.takeFullSnapshot = (isCheckout) => {
    if (!takeFullSnapshot) {
        throw new Error('please take full snapshot after start recording');
    }
    takeFullSnapshot(isCheckout);
};
record.mirror = mirror;

const NAVIGATION_ENTRY_KEYS = [
  'name',
  'type',
  'startTime',
  'transferSize',
  'duration',
];

function isNavigationEntryEqual(a) {
  return function (b) {
    return NAVIGATION_ENTRY_KEYS.every(key => a[key] === b[key]);
  };
}

/**
 * There are some difficulties diagnosing why there are duplicate navigation
 * entries. We've witnessed several intermittent results:
 * - duplicate entries have duration = 0
 * - duplicate entries are the same object reference
 * - none of the above
 *
 * Compare the values of several keys to determine if the entries are duplicates or not.
 */
// TODO (high-prio): Figure out wth is returned here
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function dedupePerformanceEntries(
  currentList,
  newList,
) {
  // Partition `currentList` into 3 different lists based on entryType
  const [existingNavigationEntries, existingLcpEntries, existingEntries] = currentList.reduce(
    (acc, entry) => {
      if (entry.entryType === 'navigation') {
        acc[0].push(entry );
      } else if (entry.entryType === 'largest-contentful-paint') {
        acc[1].push(entry );
      } else {
        acc[2].push(entry);
      }
      return acc;
    },
    [[], [], []],
  );

  const newEntries = [];
  const newNavigationEntries = [];
  let newLcpEntry = existingLcpEntries.length
    ? existingLcpEntries[existingLcpEntries.length - 1] // Take the last element as list is sorted
    : undefined;

  newList.forEach(entry => {
    if (entry.entryType === 'largest-contentful-paint') {
      // We want the latest LCP event only
      if (!newLcpEntry || newLcpEntry.startTime < entry.startTime) {
        newLcpEntry = entry;
      }
      return;
    }

    if (entry.entryType === 'navigation') {
      const navigationEntry = entry ;

      // Check if the navigation entry is contained in currentList or newList
      if (
        // Ignore any navigation entries with duration 0, as they are likely duplicates
        entry.duration > 0 &&
        // Ensure new entry does not already exist in existing entries
        !existingNavigationEntries.find(isNavigationEntryEqual(navigationEntry)) &&
        // Ensure new entry does not already exist in new list of navigation entries
        !newNavigationEntries.find(isNavigationEntryEqual(navigationEntry))
      ) {
        newNavigationEntries.push(navigationEntry);
      }

      // Otherwise this navigation entry is considered a duplicate and is thrown away
      return;
    }

    newEntries.push(entry);
  });

  // Re-combine and sort by startTime
  return [
    ...(newLcpEntry ? [newLcpEntry] : []),
    ...existingNavigationEntries,
    ...existingEntries,
    ...newEntries,
    ...newNavigationEntries,
  ].sort((a, b) => a.startTime - b.startTime);
}

/**
 * Sets up a PerformanceObserver to listen to all performance entry types.
 */
function setupPerformanceObserver(replay) {
  const performanceObserverHandler = (list) => {
    // For whatever reason the observer was returning duplicate navigation
    // entries (the other entry types were not duplicated).
    const newPerformanceEntries = dedupePerformanceEntries(
      replay.performanceEvents,
      list.getEntries() ,
    );
    replay.performanceEvents = newPerformanceEntries;
  };

  const performanceObserver = new PerformanceObserver(performanceObserverHandler);

  [
    'element',
    'event',
    'first-input',
    'largest-contentful-paint',
    'layout-shift',
    'longtask',
    'navigation',
    'paint',
    'resource',
  ].forEach(type => {
    try {
      performanceObserver.observe({
        type,
        buffered: true,
      });
    } catch (e) {
      // This can throw if an entry type is not supported in the browser.
      // Ignore these errors.
    }
  });

  return performanceObserver;
}

const r = `/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
function t(t){let e=t.length;for(;--e>=0;)t[e]=0}const e=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),a=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),n=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=new Array(576);t(s);const r=new Array(60);t(r);const o=new Array(512);t(o);const l=new Array(256);t(l);const h=new Array(29);t(h);const d=new Array(30);function _(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let f,c,u;function w(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}t(d);const m=t=>t<256?o[t]:o[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},g=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},p=(t,e,a)=>{g(t,a[2*e],a[2*e+1])},k=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},v=(t,e,a)=>{const i=new Array(16);let n,s,r=0;for(n=1;n<=15;n++)r=r+a[n-1]<<1,i[n]=r;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=k(i[e]++,e))}},y=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},x=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},z=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},A=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&z(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!z(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},E=(t,i,n)=>{let s,r,o,_,f=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+f++],s+=(255&t.pending_buf[t.sym_buf+f++])<<8,r=t.pending_buf[t.sym_buf+f++],0===s?p(t,r,i):(o=l[r],p(t,o+256+1,i),_=e[o],0!==_&&(r-=h[o],g(t,r,_)),s--,o=m(s),p(t,o,n),_=a[o],0!==_&&(s-=d[o],g(t,s,_)))}while(f<t.sym_next);p(t,256,i)},R=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let r,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<s;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,a[2*l]=1,t.depth[l]=0,t.opt_len--,n&&(t.static_len-=i[2*l+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)A(t,a,r);l=s;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],A(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=o,a[2*l]=a[2*r]+a[2*o],t.depth[l]=(t.depth[r]>=t.depth[o]?t.depth[r]:t.depth[o])+1,a[2*r+1]=a[2*o+1]=l,t.heap[1]=l++,A(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,d,_,f,c,u,w=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(a[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)d=t.heap[h],f=a[2*a[2*d+1]+1]+1,f>l&&(f=l,w++),a[2*d+1]=f,d>i||(t.bl_count[f]++,c=0,d>=o&&(c=r[d-o]),u=a[2*d],t.opt_len+=u*(f+c),s&&(t.static_len+=u*(n[2*d+1]+c)));if(0!==w){do{for(f=l-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[l]--,w-=2}while(w>0);for(f=l;0!==f;f--)for(d=t.bl_count[f];0!==d;)_=t.heap[--h],_>i||(a[2*_+1]!==f&&(t.opt_len+=(f-a[2*_+1])*a[2*_],a[2*_+1]=f),d--)}})(t,e),v(a,h,t.bl_count)},Z=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++o<l&&n===r||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4))},U=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++o<l&&n===r)){if(o<h)do{p(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==s&&(p(t,n,t.bl_tree),o--),p(t,16,t.bl_tree),g(t,o-3,2)):o<=10?(p(t,17,t.bl_tree),g(t,o-3,3)):(p(t,18,t.bl_tree),g(t,o-11,7));o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4)}};let S=!1;const D=(t,e,a,i)=>{g(t,0+(i?1:0),3),x(t),b(t,a),b(t,~a),a&&t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a};var T=(t,e,a,i)=>{let o,l,h=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),R(t,t.l_desc),R(t,t.d_desc),h=(t=>{let e;for(Z(t,t.dyn_ltree,t.l_desc.max_code),Z(t,t.dyn_dtree,t.d_desc.max_code),R(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*n[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),o=t.opt_len+3+7>>>3,l=t.static_len+3+7>>>3,l<=o&&(o=l)):o=l=a+5,a+4<=o&&-1!==e?D(t,e,a,i):4===t.strategy||l===o?(g(t,2+(i?1:0),3),E(t,s,r)):(g(t,4+(i?1:0),3),((t,e,a,i)=>{let s;for(g(t,e-257,5),g(t,a-1,5),g(t,i-4,4),s=0;s<i;s++)g(t,t.bl_tree[2*n[s]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,h+1),E(t,t.dyn_ltree,t.dyn_dtree)),y(t),i&&x(t)},O={_tr_init:t=>{S||((()=>{let t,n,w,m,b;const g=new Array(16);for(w=0,m=0;m<28;m++)for(h[m]=w,t=0;t<1<<e[m];t++)l[w++]=m;for(l[w-1]=m,b=0,m=0;m<16;m++)for(d[m]=b,t=0;t<1<<a[m];t++)o[b++]=m;for(b>>=7;m<30;m++)for(d[m]=b<<7,t=0;t<1<<a[m]-7;t++)o[256+b++]=m;for(n=0;n<=15;n++)g[n]=0;for(t=0;t<=143;)s[2*t+1]=8,t++,g[8]++;for(;t<=255;)s[2*t+1]=9,t++,g[9]++;for(;t<=279;)s[2*t+1]=7,t++,g[7]++;for(;t<=287;)s[2*t+1]=8,t++,g[8]++;for(v(s,287,g),t=0;t<30;t++)r[2*t+1]=5,r[2*t]=k(t,5);f=new _(s,e,257,286,15),c=new _(r,a,0,30,15),u=new _(new Array(0),i,0,19,7)})(),S=!0),t.l_desc=new w(t.dyn_ltree,f),t.d_desc=new w(t.dyn_dtree,c),t.bl_desc=new w(t.bl_tree,u),t.bi_buf=0,t.bi_valid=0,y(t)},_tr_stored_block:D,_tr_flush_block:T,_tr_tally:(t,e,a)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=a,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(l[a]+256+1)]++,t.dyn_dtree[2*m(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{g(t,2,3),p(t,256,s),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var F=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const L=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var N=(t,e,a,i)=>{const n=L,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},I={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},B={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:C,_tr_stored_block:H,_tr_flush_block:M,_tr_tally:j,_tr_align:K}=O,{Z_NO_FLUSH:P,Z_PARTIAL_FLUSH:Y,Z_FULL_FLUSH:G,Z_FINISH:X,Z_BLOCK:W,Z_OK:q,Z_STREAM_END:J,Z_STREAM_ERROR:Q,Z_DATA_ERROR:V,Z_BUF_ERROR:$,Z_DEFAULT_COMPRESSION:tt,Z_FILTERED:et,Z_HUFFMAN_ONLY:at,Z_RLE:it,Z_FIXED:nt,Z_DEFAULT_STRATEGY:st,Z_UNKNOWN:rt,Z_DEFLATED:ot}=B,lt=(t,e)=>(t.msg=I[e],e),ht=t=>2*t-(t>4?9:0),dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0},_t=t=>{let e,a,i,n=t.w_size;e=t.hash_size,i=e;do{a=t.head[--i],t.head[i]=a>=n?a-n:0}while(--e);e=n,i=e;do{a=t.prev[--i],t.prev[i]=a>=n?a-n:0}while(--e)};let ft=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const ct=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},ut=(t,e)=>{M(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ct(t.strm)},wt=(t,e)=>{t.pending_buf[t.pending++]=e},mt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},bt=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=F(t.adler,e,n,a):2===t.state.wrap&&(t.adler=N(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},gt=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+258;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=258-(f-s),s=f-258,i>r){if(t.match_start=e,r=i,i>=o)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>l&&0!=--n);return r<=t.lookahead?r:t.lookahead},pt=t=>{const e=t.w_size;let a,i,n;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-262)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),_t(t),i+=e),0===t.strm.avail_in)break;if(a=bt(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=a,t.lookahead+t.insert>=3)for(n=t.strstart-t.insert,t.ins_h=t.window[n],t.ins_h=ft(t,t.ins_h,t.window[n+1]);t.insert&&(t.ins_h=ft(t,t.ins_h,t.window[n+3-1]),t.prev[n&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=n,n++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)},kt=(t,e)=>{let a,i,n,s=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,r=0,o=t.strm.avail_in;do{if(a=65535,n=t.bi_valid+42>>3,t.strm.avail_out<n)break;if(n=t.strm.avail_out-n,i=t.strstart-t.block_start,a>i+t.strm.avail_in&&(a=i+t.strm.avail_in),a>n&&(a=n),a<s&&(0===a&&e!==X||e===P||a!==i+t.strm.avail_in))break;r=e===X&&a===i+t.strm.avail_in?1:0,H(t,0,0,r),t.pending_buf[t.pending-4]=a,t.pending_buf[t.pending-3]=a>>8,t.pending_buf[t.pending-2]=~a,t.pending_buf[t.pending-1]=~a>>8,ct(t.strm),i&&(i>a&&(i=a),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,a-=i),a&&(bt(t.strm,t.strm.output,t.strm.next_out,a),t.strm.next_out+=a,t.strm.avail_out-=a,t.strm.total_out+=a)}while(0===r);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),r?4:e!==P&&e!==X&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(n=t.window_size-t.strstart,t.strm.avail_in>n&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,n+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),n>t.strm.avail_in&&(n=t.strm.avail_in),n&&(bt(t.strm,t.window,t.strstart,n),t.strstart+=n,t.insert+=n>t.w_size-t.insert?t.w_size-t.insert:n),t.high_water<t.strstart&&(t.high_water=t.strstart),n=t.bi_valid+42>>3,n=t.pending_buf_size-n>65535?65535:t.pending_buf_size-n,s=n>t.w_size?t.w_size:n,i=t.strstart-t.block_start,(i>=s||(i||e===X)&&e!==P&&0===t.strm.avail_in&&i<=n)&&(a=i>n?n:i,r=e===X&&0===t.strm.avail_in&&a===i?1:0,H(t,t.block_start,a,r),t.block_start+=a,ct(t.strm)),r?3:1)},vt=(t,e)=>{let a,i;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a)),t.match_length>=3)if(i=j(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=ft(t,t.ins_h,t.window[t.strstart+1]);else i=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2},yt=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a),t.match_length<=5&&(t.strategy===et||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=j(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(ut(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=j(t,0,t.window[t.strstart-1]),i&&ut(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=j(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2};function xt(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const zt=[new xt(0,0,0,0,kt),new xt(4,4,8,4,vt),new xt(4,5,16,8,vt),new xt(4,6,32,32,vt),new xt(4,4,16,16,yt),new xt(8,16,32,32,yt),new xt(8,16,128,128,yt),new xt(8,32,128,256,yt),new xt(32,128,258,1024,yt),new xt(32,258,258,4096,yt)];function At(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),dt(this.dyn_ltree),dt(this.dyn_dtree),dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),dt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Et=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||42!==e.status&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&113!==e.status&&666!==e.status?1:0},Rt=t=>{if(Et(t))return lt(t,Q);t.total_in=t.total_out=0,t.data_type=rt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=-2,C(e),q},Zt=t=>{const e=Rt(t);var a;return e===q&&((a=t.state).window_size=2*a.w_size,dt(a.head),a.max_lazy_match=zt[a.level].max_lazy,a.good_match=zt[a.level].good_length,a.nice_match=zt[a.level].nice_length,a.max_chain_length=zt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ut=(t,e,a,i,n,s)=>{if(!t)return Q;let r=1;if(e===tt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==ot||i<8||i>15||e<0||e>9||s<0||s>nt||8===i&&1!==r)return lt(t,Q);8===i&&(i=9);const o=new At;return t.state=o,o.strm=t,o.status=42,o.wrap=r,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=s,o.method=a,Zt(t)};var St={deflateInit:(t,e)=>Ut(t,e,ot,15,8,st),deflateInit2:Ut,deflateReset:Zt,deflateResetKeep:Rt,deflateSetHeader:(t,e)=>Et(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,q),deflate:(t,e)=>{if(Et(t)||e>W||e<0)return t?lt(t,Q):Q;const a=t.state;if(!t.output||0!==t.avail_in&&!t.input||666===a.status&&e!==X)return lt(t,0===t.avail_out?$:Q);const i=a.last_flush;if(a.last_flush=e,0!==a.pending){if(ct(t),0===t.avail_out)return a.last_flush=-1,q}else if(0===t.avail_in&&ht(e)<=ht(i)&&e!==X)return lt(t,$);if(666===a.status&&0!==t.avail_in)return lt(t,$);if(42===a.status&&0===a.wrap&&(a.status=113),42===a.status){let e=ot+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=at||a.level<2?0:a.level<6?1:6===a.level?2:3,e|=i<<6,0!==a.strstart&&(e|=32),e+=31-e%31,mt(a,e),0!==a.strstart&&(mt(a,t.adler>>>16),mt(a,65535&t.adler)),t.adler=1,a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(57===a.status)if(t.adler=0,wt(a,31),wt(a,139),wt(a,8),a.gzhead)wt(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),wt(a,255&a.gzhead.time),wt(a,a.gzhead.time>>8&255),wt(a,a.gzhead.time>>16&255),wt(a,a.gzhead.time>>24&255),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(wt(a,255&a.gzhead.extra.length),wt(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=N(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,3),a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q;if(69===a.status){if(a.gzhead.extra){let e=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let n=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+n),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex+=n,ct(t),0!==a.pending)return a.last_flush=-1,q;e=0,i-=n}let n=new Uint8Array(a.gzhead.extra);a.pending_buf.set(n.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(ct(t),0!==a.pending))return a.last_flush=-1,q;wt(a,255&t.adler),wt(a,t.adler>>8&255),t.adler=0}if(a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(0!==t.avail_in||0!==a.lookahead||e!==P&&666!==a.status){let i=0===a.level?kt(a,e):a.strategy===at?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(pt(t),0===t.lookahead)){if(e===P)return 1;break}if(t.match_length=0,a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):a.strategy===it?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=258){if(pt(t),t.lookahead<=258&&e===P)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+258;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=258-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=j(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):zt[a.level].func(a,e);if(3!==i&&4!==i||(a.status=666),1===i||3===i)return 0===t.avail_out&&(a.last_flush=-1),q;if(2===i&&(e===Y?K(a):e!==W&&(H(a,0,0,!1),e===G&&(dt(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),ct(t),0===t.avail_out))return a.last_flush=-1,q}return e!==X?q:a.wrap<=0?J:(2===a.wrap?(wt(a,255&t.adler),wt(a,t.adler>>8&255),wt(a,t.adler>>16&255),wt(a,t.adler>>24&255),wt(a,255&t.total_in),wt(a,t.total_in>>8&255),wt(a,t.total_in>>16&255),wt(a,t.total_in>>24&255)):(mt(a,t.adler>>>16),mt(a,65535&t.adler)),ct(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?q:J)},deflateEnd:t=>{if(Et(t))return Q;const e=t.state.status;return t.state=null,113===e?lt(t,V):q},deflateSetDictionary:(t,e)=>{let a=e.length;if(Et(t))return Q;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return Q;if(1===n&&(t.adler=F(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(dt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,o=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,pt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=ft(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,pt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=o,t.avail_in=s,i.wrap=n,q},deflateInfo:"pako deflate (from Nodeca project)"};const Dt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Tt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(const e in a)Dt(a,e)&&(t[e]=a[e])}}return t},Ot=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Ft=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ft=!1}const Lt=new Uint8Array(256);for(let t=0;t<256;t++)Lt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Lt[254]=Lt[254]=1;var Nt=t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,o=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),o+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(o),s=0,n=0;s<o;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},It=(t,e)=>{const a=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Lt[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ft)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a="";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Bt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Lt[t[a]]>e?a:e};var Ct=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:Mt,Z_SYNC_FLUSH:jt,Z_FULL_FLUSH:Kt,Z_FINISH:Pt,Z_OK:Yt,Z_STREAM_END:Gt,Z_DEFAULT_COMPRESSION:Xt,Z_DEFAULT_STRATEGY:Wt,Z_DEFLATED:qt}=B;function Jt(t){this.options=Tt({level:Xt,method:qt,chunkSize:16384,windowBits:15,memLevel:8,strategy:Wt},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=St.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Yt)throw new Error(I[a]);if(e.header&&St.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Nt(e.dictionary):"[object ArrayBuffer]"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=St.deflateSetDictionary(this.strm,t),a!==Yt)throw new Error(I[a]);this._dict_set=!0}}function Qt(t,e){const a=new Jt(e);if(a.push(t,!0),a.err)throw a.msg||I[a.err];return a.result}Jt.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Pt:Mt,"string"==typeof t?a.input=Nt(t):"[object ArrayBuffer]"===Ht.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===jt||s===Kt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=St.deflate(a,s),n===Gt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=St.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Yt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},Jt.prototype.onData=function(t){this.chunks.push(t)},Jt.prototype.onEnd=function(t){t===Yt&&(this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Vt={Deflate:Jt,deflate:Qt,deflateRaw:function(t,e){return(e=e||{}).raw=!0,Qt(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,Qt(t,e)},constants:B};var $t=function(t,e){let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),o=E.dmax,l=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,m=(1<<E.lenbits)-1,b=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=u[f&m];e:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,0===p)A[n++]=65535&g;else{if(!(16&p)){if(0==(64&p)){g=u[(65535&g)+(f&(1<<p)-1)];continue e}if(32&p){E.mode=16191;break t}t.msg="invalid literal/length code",E.mode=16209;break t}k=65535&g,p&=15,p&&(c<p&&(f+=z[a++]<<c,c+=8),k+=f&(1<<p)-1,f>>>=p,c-=p),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=w[f&b];a:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,!(16&p)){if(0==(64&p)){g=w[(65535&g)+(f&(1<<p)-1)];continue a}t.msg="invalid distance code",E.mode=16209;break t}if(v=65535&g,p&=15,c<p&&(f+=z[a++]<<c,c+=8,c<p&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<p)-1,v>o){t.msg="invalid distance too far back",E.mode=16209;break t}if(f>>>=p,c-=p,p=n-s,v>p){if(p=v-p,p>h&&E.sane){t.msg="invalid distance too far back",E.mode=16209;break t}if(y=0,x=_,0===d){if(y+=l-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}else if(d<p){if(y+=l+d-p,p-=d,p<k){k-=p;do{A[n++]=_[y++]}while(--p);if(y=0,d<k){p=d,k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}}else if(y+=d-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const te=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ee=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ie=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ne=(t,e,a,i,n,s,r,o)=>{const l=o.bits;let h,d,_,f,c,u,w=0,m=0,b=0,g=0,p=0,k=0,v=0,y=0,x=0,z=0,A=null;const E=new Uint16Array(16),R=new Uint16Array(16);let Z,U,S,D=null;for(w=0;w<=15;w++)E[w]=0;for(m=0;m<i;m++)E[e[a+m]]++;for(p=l,g=15;g>=1&&0===E[g];g--);if(p>g&&(p=g),0===g)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(b=1;b<g&&0===E[b];b++);for(p<b&&(p=b),y=1,w=1;w<=15;w++)if(y<<=1,y-=E[w],y<0)return-1;if(y>0&&(0===t||1!==g))return-1;for(R[1]=0,w=1;w<15;w++)R[w+1]=R[w]+E[w];for(m=0;m<i;m++)0!==e[a+m]&&(r[R[e[a+m]]++]=m);if(0===t?(A=D=r,u=20):1===t?(A=te,D=ee,u=257):(A=ae,D=ie,u=0),z=0,m=0,w=b,c=s,k=p,v=0,_=-1,x=1<<p,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){Z=w-v,r[m]+1<u?(U=0,S=r[m]):r[m]>=u?(U=D[r[m]-u],S=A[r[m]-u]):(U=96,S=0),h=1<<w-v,d=1<<k,b=d;do{d-=h,n[c+(z>>v)+d]=Z<<24|U<<16|S|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,m++,0==--E[w]){if(w===g)break;w=e[a+r[m]]}if(w>p&&(z&f)!==_){for(0===v&&(v=p),c+=b,k=w-v,y=1<<k;k+v<g&&(y-=E[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=p<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),o.bits=p,0};const{Z_FINISH:se,Z_BLOCK:re,Z_TREES:oe,Z_OK:le,Z_STREAM_END:he,Z_NEED_DICT:de,Z_STREAM_ERROR:_e,Z_DATA_ERROR:fe,Z_MEM_ERROR:ce,Z_BUF_ERROR:ue,Z_DEFLATED:we}=B,me=16209,be=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function ge(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const pe=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<16180||e.mode>16211?1:0},ke=t=>{if(pe(t))return _e;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=16180,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,le},ve=t=>{if(pe(t))return _e;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ke(t)},ye=(t,e)=>{let a;if(pe(t))return _e;const i=t.state;return e<0?(a=0,e=-e):(a=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?_e:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,ve(t))},xe=(t,e)=>{if(!t)return _e;const a=new ge;t.state=a,a.strm=t,a.window=null,a.mode=16180;const i=ye(t,e);return i!==le&&(t.state=null),i};let ze,Ae,Ee=!0;const Re=t=>{if(Ee){ze=new Int32Array(512),Ae=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ne(1,t.lens,0,288,ze,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ne(2,t.lens,0,32,Ae,0,t.work,{bits:5}),Ee=!1}t.lencode=ze,t.lenbits=9,t.distcode=Ae,t.distbits=5},Ze=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Ue={inflateReset:ve,inflateReset2:ye,inflateResetKeep:ke,inflateInit:t=>xe(t,15),inflateInit2:xe,inflate:(t,e)=>{let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(pe(t)||!t.output||!t.input&&0!==t.avail_in)return _e;a=t.state,16191===a.mode&&(a.mode=16192),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,_=o,f=l,x=le;t:for(;;)switch(a.mode){case 16180:if(0===a.wrap){a.mode=16192;break}for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){0===a.wbits&&(a.wbits=15),a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0),h=0,d=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg="incorrect header check",a.mode=me;break}if((15&h)!==we){t.msg="unknown compression method",a.mode=me;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits&&(a.wbits=y),y>15||y>a.wbits){t.msg="invalid window size",a.mode=me;break}a.dmax=1<<a.wbits,a.flags=0,t.adler=a.check=1,a.mode=512&h?16189:16191,h=0,d=0;break;case 16181:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==we){t.msg="unknown compression method",a.mode=me;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=me;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16182;case 16182:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=N(a.check,A,4,0)),h=0,d=0,a.mode=16183;case 16183:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16184;case 16184:if(1024&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(c=a.length,c>o&&(c=o),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(65535&a.check)){t.msg="header crc mismatch",a.mode=me;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=16191;break;case 16189:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}t.adler=a.check=be(h),h=0,d=0,a.mode=16190;case 16190:if(0===a.havedict)return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,de;t.adler=a.check=1,a.mode=16191;case 16191:if(e===re||e===oe)break t;case 16192:if(a.last){h>>>=7&d,d-=7&d,a.mode=16206;break}for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=16193;break;case 1:if(Re(a),a.mode=16199,e===oe){h>>>=2,d-=2;break t}break;case 2:a.mode=16196;break;case 3:t.msg="invalid block type",a.mode=me}h>>>=2,d-=2;break;case 16193:for(h>>>=7&d,d-=7&d;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg="invalid stored block lengths",a.mode=me;break}if(a.length=65535&h,h=0,d=0,a.mode=16194,e===oe)break t;case 16194:a.mode=16195;case 16195:if(c=a.length,c){if(c>o&&(c=o),c>l&&(c=l),0===c)break t;n.set(i.subarray(s,s+c),r),o-=c,s+=c,l-=c,r+=c,a.length-=c;break}a.mode=16191;break;case 16196:for(;d<14;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=me;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=ne(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg="invalid code lengths set",a.mode=me;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(g<16)h>>>=m,d-=m,a.lens[a.have++]=g;else{if(16===g){for(R=m+2;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(h>>>=m,d-=m,0===a.have){t.msg="invalid bit length repeat",a.mode=me;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===g){for(R=m+3;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=m+7;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=me;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===me)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=me;break}if(a.lenbits=9,E={bits:a.lenbits},x=ne(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg="invalid literal/lengths set",a.mode=me;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=ne(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg="invalid distances set",a.mode=me;break}if(a.mode=16199,e===oe)break t;case 16199:a.mode=16200;case 16200:if(o>=6&&l>=258){t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,$t(t,f),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,16191===a.mode&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(b&&0==(240&b)){for(p=m,k=b,v=g;z=a.lencode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,a.length=g,0===b){a.mode=16205;break}if(32&b){a.back=-1,a.mode=16191;break}if(64&b){t.msg="invalid literal/length code",a.mode=me;break}a.extra=15&b,a.mode=16201;case 16201:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;z=a.distcode[h&(1<<a.distbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(0==(240&b)){for(p=m,k=b,v=g;z=a.distcode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,64&b){t.msg="invalid distance code",a.mode=me;break}a.offset=g,a.extra=15&b,a.mode=16203;case 16203:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=me;break}a.mode=16204;case 16204:if(0===l)break t;if(c=f-l,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=me;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>l&&(c=l),l-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=16200);break;case 16205:if(0===l)break t;n[r++]=a.length,l--,a.mode=16200;break;case 16206:if(a.wrap){for(;d<32;){if(0===o)break t;o--,h|=i[s++]<<d,d+=8}if(f-=l,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,r-f):F(a.check,n,f,r-f)),f=l,4&a.wrap&&(a.flags?h:be(h))!==a.check){t.msg="incorrect data check",a.mode=me;break}h=0,d=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=me;break}h=0,d=0}a.mode=16208;case 16208:x=he;break t;case me:x=fe;break t;case 16210:return ce;default:return _e}return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<me&&(a.mode<16206||e!==se))&&Ze(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,t.next_out-f):F(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(16191===a.mode?128:0)+(16199===a.mode||16194===a.mode?256:0),(0===_&&0===f||e===se)&&x===le&&(x=ue),x},inflateEnd:t=>{if(pe(t))return _e;let e=t.state;return e.window&&(e.window=null),t.state=null,le},inflateGetHeader:(t,e)=>{if(pe(t))return _e;const a=t.state;return 0==(2&a.wrap)?_e:(a.head=e,e.done=!1,le)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return pe(t)?_e:(i=t.state,0!==i.wrap&&16190!==i.mode?_e:16190===i.mode&&(n=1,n=F(n,e,a,0),n!==i.check)?fe:(s=Ze(t,e,a,a),s?(i.mode=16210,ce):(i.havedict=1,le)))},inflateInfo:"pako inflate (from Nodeca project)"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const De=Object.prototype.toString,{Z_NO_FLUSH:Te,Z_FINISH:Oe,Z_OK:Fe,Z_STREAM_END:Le,Z_NEED_DICT:Ne,Z_STREAM_ERROR:Ie,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ce}=B;function He(t){this.options=Tt({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=Ue.inflateInit2(this.strm,e.windowBits);if(a!==Fe)throw new Error(I[a]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Nt(e.dictionary):"[object ArrayBuffer]"===De.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Ue.inflateSetDictionary(this.strm,e.dictionary),a!==Fe)))throw new Error(I[a])}He.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,o;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Oe:Te,"[object ArrayBuffer]"===De.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Ue.inflate(a,r),s===Ne&&n&&(s=Ue.inflateSetDictionary(a,n),s===Fe?s=Ue.inflate(a,r):s===Be&&(s=Ne));a.avail_in>0&&s===Le&&a.state.wrap>0&&0!==t[a.next_in];)Ue.inflateReset(a),s=Ue.inflate(a,r);switch(s){case Ie:case Be:case Ne:case Ce:return this.onEnd(s),this.ended=!0,!1}if(o=a.avail_out,a.next_out&&(0===a.avail_out||s===Le))if("string"===this.options.to){let t=Bt(a.output,a.next_out),e=a.next_out-t,n=It(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==Fe||0!==o){if(s===Le)return s=Ue.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},He.prototype.onData=function(t){this.chunks.push(t)},He.prototype.onEnd=function(t){t===Fe&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const{Deflate:Me,deflate:je,deflateRaw:Ke,gzip:Pe}=Vt;var Ye=Me,Ge=je,Xe=B;const We=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error("Adding invalid event");const e=this._hasEvents?",":"";this.deflate.push(e+t,Xe.Z_SYNC_FLUSH),this._hasEvents=!0}finish(){if(this.deflate.push("]",Xe.Z_FINISH),this.deflate.err)throw this.deflate.err;const t=this.deflate.result;return this._init(),t}_init(){this._hasEvents=!1,this.deflate=new Ye,this.deflate.push("[",Xe.Z_NO_FLUSH)}},qe={clear:()=>{We.clear()},addEvent:t=>We.addEvent(t),finish:()=>We.finish(),compress:t=>function(t){return Ge(t)}(t)};addEventListener("message",(function(t){const e=t.data.method,a=t.data.id,i=t.data.arg;if(e in qe&&"function"==typeof qe[e])try{const t=qe[e](i);postMessage({id:a,method:e,success:!0,response:t})}catch(t){postMessage({id:a,method:e,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:"init",success:!0,response:void 0});`;

function e(){const e=new Blob([r]);return URL.createObjectURL(e)}

/**
 * A basic event buffer that does not do any compression.
 * Used as fallback if the compression worker cannot be loaded or is disabled.
 */
class EventBufferArray  {
  /** All the events that are buffered to be sent. */

   constructor() {
    this.events = [];
  }

  /** @inheritdoc */
   get hasEvents() {
    return this.events.length > 0;
  }

  /** @inheritdoc */
   destroy() {
    this.events = [];
  }

  /** @inheritdoc */
   async addEvent(event, isCheckout) {
    if (isCheckout) {
      this.events = [event];
      return;
    }

    this.events.push(event);
    return;
  }

  /** @inheritdoc */
   finish() {
    return new Promise(resolve => {
      // Make a copy of the events array reference and immediately clear the
      // events member so that we do not lose new events while uploading
      // attachment.
      const eventsRet = this.events;
      this.events = [];
      resolve(JSON.stringify(eventsRet));
    });
  }
}

/**
 * Event buffer that uses a web worker to compress events.
 * Exported only for testing.
 */
class WorkerHandler {

   constructor(worker) {
    this._worker = worker;
    this._id = 0;
  }

  /**
   * Ensure the worker is ready (or not).
   * This will either resolve when the worker is ready, or reject if an error occured.
   */
   ensureReady() {
    // Ensure we only check once
    if (this._ensureReadyPromise) {
      return this._ensureReadyPromise;
    }

    this._ensureReadyPromise = new Promise((resolve, reject) => {
      this._worker.addEventListener(
        'message',
        ({ data }) => {
          if ((data ).success) {
            resolve();
          } else {
            reject();
          }
        },
        { once: true },
      );

      this._worker.addEventListener(
        'error',
        error => {
          reject(error);
        },
        { once: true },
      );
    });

    return this._ensureReadyPromise;
  }

  /**
   * Destroy the worker.
   */
   destroy() {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Destroying compression worker');
    this._worker.terminate();
  }

  /**
   * Post message to worker and wait for response before resolving promise.
   */
   postMessage(method, arg) {
    const id = this._getAndIncrementId();

    return new Promise((resolve, reject) => {
      const listener = ({ data }) => {
        const response = data ;
        if (response.method !== method) {
          return;
        }

        // There can be multiple listeners for a single method, the id ensures
        // that the response matches the caller.
        if (response.id !== id) {
          return;
        }

        // At this point, we'll always want to remove listener regardless of result status
        this._worker.removeEventListener('message', listener);

        if (!response.success) {
          // TODO: Do some error handling, not sure what
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay]', response.response);

          reject(new Error('Error in compression worker'));
          return;
        }

        resolve(response.response );
      };

      // Note: we can't use `once` option because it's possible it needs to
      // listen to multiple messages
      this._worker.addEventListener('message', listener);
      this._worker.postMessage({ id, method, arg });
    });
  }

  /** Get the current ID and increment it for the next call. */
   _getAndIncrementId() {
    return this._id++;
  }
}

/**
 * Event buffer that uses a web worker to compress events.
 * Exported only for testing.
 */
class EventBufferCompressionWorker  {
  /** @inheritdoc */

   constructor(worker) {
    this._worker = new WorkerHandler(worker);
    this.hasEvents = false;
  }

  /**
   * Ensure the worker is ready (or not).
   * This will either resolve when the worker is ready, or reject if an error occured.
   */
   ensureReady() {
    return this._worker.ensureReady();
  }

  /**
   * Destroy the event buffer.
   */
   destroy() {
    this._worker.destroy();
  }

  /**
   * Add an event to the event buffer.
   *
   * Returns true if event was successfuly received and processed by worker.
   */
   async addEvent(event, isCheckout) {
    this.hasEvents = true;

    if (isCheckout) {
      // This event is a checkout, make sure worker buffer is cleared before
      // proceeding.
      await this._clear();
    }

    return this._sendEventToWorker(event);
  }

  /**
   * Finish the event buffer and return the compressed data.
   */
   finish() {
    return this._finishRequest();
  }

  /**
   * Send the event to the worker.
   */
   _sendEventToWorker(event) {
    return this._worker.postMessage('addEvent', JSON.stringify(event));
  }

  /**
   * Finish the request and return the compressed data from the worker.
   */
   async _finishRequest() {
    const response = await this._worker.postMessage('finish');

    this.hasEvents = false;

    return response;
  }

  /** Clear any pending events from the worker. */
   _clear() {
    return this._worker.postMessage('clear');
  }
}

/**
 * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.
 * This can happen e.g. if the worker cannot be loaded.
 * Exported only for testing.
 */
class EventBufferProxy  {

   constructor(worker) {
    this._fallback = new EventBufferArray();
    this._compression = new EventBufferCompressionWorker(worker);
    this._used = this._fallback;

    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();
  }

  /** @inheritDoc */
   get hasEvents() {
    return this._used.hasEvents;
  }

  /** @inheritDoc */
   destroy() {
    this._fallback.destroy();
    this._compression.destroy();
  }

  /**
   * Add an event to the event buffer.
   *
   * Returns true if event was successfully added.
   */
   addEvent(event, isCheckout) {
    return this._used.addEvent(event, isCheckout);
  }

  /** @inheritDoc */
   async finish() {
    // Ensure the worker is loaded, so the sent event is compressed
    await this.ensureWorkerIsLoaded();

    return this._used.finish();
  }

  /** Ensure the worker has loaded. */
   ensureWorkerIsLoaded() {
    return this._ensureWorkerIsLoadedPromise;
  }

  /** Actually check if the worker has been loaded. */
   async _ensureWorkerIsLoaded() {
    try {
      await this._compression.ensureReady();
    } catch (error) {
      // If the worker fails to load, we fall back to the simple buffer.
      // Nothing more to do from our side here
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Failed to load the compression worker, falling back to simple buffer');
      return;
    }

    // Now we need to switch over the array buffer to the compression worker
    await this._switchToCompressionWorker();
  }

  /** Switch the used buffer to the compression worker. */
   async _switchToCompressionWorker() {
    const { events } = this._fallback;

    const addEventPromises = [];
    for (const event of events) {
      addEventPromises.push(this._compression.addEvent(event));
    }

    // We switch over to the new buffer immediately - any further events will be added
    // after the previously buffered ones
    this._used = this._compression;

    // Wait for original events to be re-added before resolving
    try {
      await Promise.all(addEventPromises);
    } catch (error) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('[Replay] Failed to add events when switching buffers.', error);
    }
  }
}

/**
 * Create an event buffer for replays.
 */
function createEventBuffer({ useCompression }) {
  // eslint-disable-next-line no-restricted-globals
  if (useCompression && window.Worker) {
    try {
      const workerUrl = e();

      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Using compression worker');
      const worker = new Worker(workerUrl);
      return new EventBufferProxy(worker);
    } catch (error) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Failed to create compression worker');
      // Fall back to use simple event buffer array
    }
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Using simple buffer');
  return new EventBufferArray();
}

/**
 * Removes the session from Session Storage and unsets session in replay instance
 */
function clearSession(replay) {
  deleteSession();
  replay.session = undefined;
}

/**
 * Deletes a session from storage
 */
function deleteSession() {
  const hasSessionStorage = 'sessionStorage' in WINDOW;

  if (!hasSessionStorage) {
    return;
  }

  try {
    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);
  } catch (e) {
    // Ignore potential SecurityError exceptions
  }
}

/**
 * Given an initial timestamp and an expiry duration, checks to see if current
 * time should be considered as expired.
 */
function isExpired(
  initialTime,
  expiry,
  targetTime = +new Date(),
) {
  // Always expired if < 0
  if (initialTime === null || expiry === undefined || expiry < 0) {
    return true;
  }

  // Never expires if == 0
  if (expiry === 0) {
    return false;
  }

  return initialTime + expiry <= targetTime;
}

/**
 * Checks to see if session is expired
 */
function isSessionExpired(session, timeouts, targetTime = +new Date()) {
  return (
    // First, check that maximum session length has not been exceeded
    isExpired(session.started, timeouts.maxSessionLife, targetTime) ||
    // check that the idle timeout has not been exceeded (i.e. user has
    // performed an action within the last `sessionIdleExpire` ms)
    isExpired(session.lastActivity, timeouts.sessionIdleExpire, targetTime)
  );
}

/**
 * Given a sample rate, returns true if replay should be sampled.
 *
 * 1.0 = 100% sampling
 * 0.0 = 0% sampling
 */
function isSampled(sampleRate) {
  if (sampleRate === undefined) {
    return false;
  }

  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)
  return Math.random() < sampleRate;
}

/**
 * Save a session to session storage.
 */
function saveSession(session) {
  const hasSessionStorage = 'sessionStorage' in WINDOW;
  if (!hasSessionStorage) {
    return;
  }

  try {
    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));
  } catch (e) {
    // Ignore potential SecurityError exceptions
  }
}

/**
 * Get a session with defaults & applied sampling.
 */
function makeSession(session) {
  const now = Date.now();
  const id = session.id || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["uuid4"])();
  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.
  const started = session.started || now;
  const lastActivity = session.lastActivity || now;
  const segmentId = session.segmentId || 0;
  const sampled = session.sampled;

  return {
    id,
    started,
    lastActivity,
    segmentId,
    sampled,
    shouldRefresh: true,
  };
}

/**
 * Get the sampled status for a session based on sample rates & current sampled status.
 */
function getSessionSampleType(sessionSampleRate, allowBuffering) {
  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;
}

/**
 * Create a new session, which in its current implementation is a Sentry event
 * that all replays will be saved to as attachments. Currently, we only expect
 * one of these Sentry events per "replay session".
 */
function createSession({ sessionSampleRate, allowBuffering, stickySession = false }) {
  const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);
  const session = makeSession({
    sampled,
  });

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log(`[Replay] Creating new session: ${session.id}`);

  if (stickySession) {
    saveSession(session);
  }

  return session;
}

/**
 * Fetches a session from storage
 */
function fetchSession() {
  const hasSessionStorage = 'sessionStorage' in WINDOW;

  if (!hasSessionStorage) {
    return null;
  }

  try {
    // This can throw if cookies are disabled
    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);

    if (!sessionStringFromStorage) {
      return null;
    }

    const sessionObj = JSON.parse(sessionStringFromStorage) ;

    return makeSession(sessionObj);
  } catch (e) {
    return null;
  }
}

/**
 * Get or create a session
 */
function getSession({
  timeouts,
  currentSession,
  stickySession,
  sessionSampleRate,
  allowBuffering,
}) {
  // If session exists and is passed, use it instead of always hitting session storage
  const session = currentSession || (stickySession && fetchSession());

  if (session) {
    // If there is a session, check if it is valid (e.g. "last activity" time
    // should be within the "session idle time", and "session started" time is
    // within "max session time").
    const isExpired = isSessionExpired(session, timeouts);

    if (!isExpired) {
      return { type: 'saved', session };
    } else if (!session.shouldRefresh) {
      // In this case, stop
      // This is the case if we have an error session that is completed (=triggered an error)
      const discardedSession = makeSession({ sampled: false });
      return { type: 'new', session: discardedSession };
    } else {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Session has expired');
    }
    // Otherwise continue to create a new session
  }

  const newSession = createSession({
    stickySession,
    sessionSampleRate,
    allowBuffering,
  });

  return { type: 'new', session: newSession };
}

/**
 * Add an event to the event buffer.
 * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.
 */
async function addEvent(
  replay,
  event,
  isCheckout,
) {
  if (!replay.eventBuffer) {
    // This implies that `_isEnabled` is false
    return null;
  }

  if (replay.isPaused()) {
    // Do not add to event buffer when recording is paused
    return null;
  }

  // TODO: sadness -- we will want to normalize timestamps to be in ms -
  // requires coordination with frontend
  const isMs = event.timestamp > 9999999999;
  const timestampInMs = isMs ? event.timestamp : event.timestamp * 1000;

  // Throw out events that happen more than 5 minutes ago. This can happen if
  // page has been left open and idle for a long period of time and user
  // comes back to trigger a new session. The performance entries rely on
  // `performance.timeOrigin`, which is when the page first opened.
  if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {
    return null;
  }

  // Only record earliest event if a new session was created, otherwise it
  // shouldn't be relevant
  const earliestEvent = replay.getContext().earliestEvent;
  if (replay.session && replay.session.segmentId === 0 && (!earliestEvent || timestampInMs < earliestEvent)) {
    replay.getContext().earliestEvent = timestampInMs;
  }

  try {
    return await replay.eventBuffer.addEvent(event, isCheckout);
  } catch (error) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error(error);
    await replay.stop('addEvent');

    const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();

    if (client) {
      client.recordDroppedEvent('internal_sdk_error', 'replay');
    }
  }
}

/** If the event is an error event */
function isErrorEvent(event) {
  return !event.type;
}

/** If the event is a transaction event */
function isTransactionEvent(event) {
  return event.type === 'transaction';
}

/** If the event is an replay event */
function isReplayEvent(event) {
  return event.type === 'replay_event';
}

/**
 * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.
 */
function handleAfterSendEvent(replay) {
  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there
  // TODO (v8): remove this check as it will no longer be necessary
  const enforceStatusCode = isBaseTransportSend();

  return (event, sendResponse) => {
    if (!isErrorEvent(event) && !isTransactionEvent(event)) {
      return;
    }

    const statusCode = sendResponse && sendResponse.statusCode;

    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached
    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)
    // If we do use the base transport, we skip if we encountered an non-OK status code
    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {
      return;
    }

    // Collect traceIds in _context regardless of `recordingMode`
    // In error mode, _context gets cleared on every checkout
    if (isTransactionEvent(event) && event.contexts && event.contexts.trace && event.contexts.trace.trace_id) {
      replay.getContext().traceIds.add(event.contexts.trace.trace_id );
      return;
    }

    // Everything below is just for error events
    if (!isErrorEvent(event)) {
      return;
    }

    // Add error to list of errorIds of replay
    if (event.event_id) {
      replay.getContext().errorIds.add(event.event_id);
    }

    // Trigger error recording
    // Need to be very careful that this does not cause an infinite loop
    if (
      replay.recordingMode === 'buffer' &&
      event.exception &&
      event.message !== UNABLE_TO_SEND_REPLAY // ignore this error because otherwise we could loop indefinitely with trying to capture replay and failing
    ) {
      if (!isSampled(replay.getOptions().errorSampleRate)) {
        return;
      }

      setTimeout(() => {
        // Capture current event buffer as new replay
        void replay.sendBufferedReplayOrFlush();
      });
    }
  };
}

function isBaseTransportSend() {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  if (!client) {
    return false;
  }

  const transport = client.getTransport();
  if (!transport) {
    return false;
  }

  return (
    (transport.send ).__sentry__baseTransport__ || false
  );
}

var NodeType;
(function (NodeType) {
    NodeType[NodeType["Document"] = 0] = "Document";
    NodeType[NodeType["DocumentType"] = 1] = "DocumentType";
    NodeType[NodeType["Element"] = 2] = "Element";
    NodeType[NodeType["Text"] = 3] = "Text";
    NodeType[NodeType["CDATA"] = 4] = "CDATA";
    NodeType[NodeType["Comment"] = 5] = "Comment";
})(NodeType || (NodeType = {}));

/**
 * Create a breadcrumb for a replay.
 */
function createBreadcrumb(
  breadcrumb,
) {
  return {
    timestamp: Date.now() / 1000,
    type: 'default',
    ...breadcrumb,
  };
}

/**
 * Add a breadcrumb event to replay.
 */
function addBreadcrumbEvent(replay, breadcrumb) {
  if (breadcrumb.category === 'sentry.transaction') {
    return;
  }

  if (['ui.click', 'ui.input'].includes(breadcrumb.category )) {
    replay.triggerUserActivity();
  } else {
    replay.checkAndHandleExpiredSession();
  }

  replay.addUpdate(() => {
    void addEvent(replay, {
      type: EventType.Custom,
      // TODO: We were converting from ms to seconds for breadcrumbs, spans,
      // but maybe we should just keep them as milliseconds
      timestamp: (breadcrumb.timestamp || 0) * 1000,
      data: {
        tag: 'breadcrumb',
        // normalize to max. 10 depth and 1_000 properties per object
        payload: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["normalize"])(breadcrumb, 10, 1000),
      },
    });

    // Do not flush after console log messages
    return breadcrumb.category === 'console';
  });
}

// Note that these are the serialized attributes and not attributes directly on
// the DOM Node. Attributes we are interested in:
const ATTRIBUTES_TO_RECORD = new Set([
  'id',
  'class',
  'aria-label',
  'role',
  'name',
  'alt',
  'title',
  'data-test-id',
  'data-testid',
]);

/**
 * Inclusion list of attributes that we want to record from the DOM element
 */
function getAttributesToRecord(attributes) {
  const obj = {};
  for (const key in attributes) {
    if (ATTRIBUTES_TO_RECORD.has(key)) {
      let normalizedKey = key;

      if (key === 'data-testid' || key === 'data-test-id') {
        normalizedKey = 'testId';
      }

      obj[normalizedKey] = attributes[key];
    }
  }

  return obj;
}

const handleDomListener =
  (replay) =>
  (handlerData) => {
    if (!replay.isEnabled()) {
      return;
    }

    const result = handleDom(handlerData);

    if (!result) {
      return;
    }

    addBreadcrumbEvent(replay, result);
  };

/**
 * An event handler to react to DOM events.
 */
function handleDom(handlerData) {
  let target;
  let targetNode;

  // Accessing event.target can throw (see getsentry/raven-js#838, #768)
  try {
    targetNode = getTargetNode(handlerData);
    target = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["htmlTreeAsString"])(targetNode);
  } catch (e) {
    target = '<unknown>';
  }

  // `__sn` property is the serialized node created by rrweb
  const serializedNode =
    targetNode && '__sn' in targetNode && targetNode.__sn.type === NodeType.Element ? targetNode.__sn : null;

  return createBreadcrumb({
    category: `ui.${handlerData.name}`,
    message: target,
    data: serializedNode
      ? {
          nodeId: serializedNode.id,
          node: {
            id: serializedNode.id,
            tagName: serializedNode.tagName,
            textContent: targetNode
              ? Array.from(targetNode.childNodes)
                  .map(
                    (node) => '__sn' in node && node.__sn.type === NodeType.Text && node.__sn.textContent,
                  )
                  .filter(Boolean) // filter out empty values
                  .map(text => (text ).trim())
                  .join('')
              : '',
            attributes: getAttributesToRecord(serializedNode.attributes),
          },
        }
      : {},
  });
}

function getTargetNode(handlerData) {
  if (isEventWithTarget(handlerData.event)) {
    return handlerData.event.target;
  }

  return handlerData.event;
}

function isEventWithTarget(event) {
  return !!(event ).target;
}

/**
 * Returns true if we think the given event is an error originating inside of rrweb.
 */
function isRrwebError(event, hint) {
  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {
    return false;
  }

  // @ts-ignore this may be set by rrweb when it finds errors
  if (hint.originalException && hint.originalException.__rrweb__) {
    return true;
  }

  // Check if any exception originates from rrweb
  return event.exception.values.some(exception => {
    if (!exception.stacktrace || !exception.stacktrace.frames || !exception.stacktrace.frames.length) {
      return false;
    }

    return exception.stacktrace.frames.some(frame => frame.filename && frame.filename.includes('/rrweb/src/'));
  });
}

/**
 * Returns a listener to be added to `addGlobalEventProcessor(listener)`.
 */
function handleGlobalEventListener(
  replay,
  includeAfterSendEventHandling = false,
) {
  const afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;

  return (event, hint) => {
    if (isReplayEvent(event)) {
      // Replays have separate set of breadcrumbs, do not include breadcrumbs
      // from core SDK
      delete event.breadcrumbs;
      return event;
    }

    // We only want to handle errors & transactions, nothing else
    if (!isErrorEvent(event) && !isTransactionEvent(event)) {
      return event;
    }

    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb
    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users
    if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Ignoring error from rrweb internals', event);
      return null;
    }

    // Only tag transactions with replayId if not waiting for an error
    if (isErrorEvent(event) || (isTransactionEvent(event) && replay.recordingMode === 'session')) {
      event.tags = { ...event.tags, replayId: replay.getSessionId() };
    }

    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && replay.getOptions()._experiments.traceInternals && isErrorEvent(event)) {
      const exc = getEventExceptionValues(event);
      addInternalBreadcrumb({
        message: `Tagging event (${event.event_id}) - ${event.message} - ${exc.type}: ${exc.value}`,
      });
    }

    // In cases where a custom client is used that does not support the new hooks (yet),
    // we manually call this hook method here
    if (afterSendHandler) {
      // Pretend the error had a 200 response so we always capture it
      afterSendHandler(event, { statusCode: 200 });
    }

    return event;
  };
}

function addInternalBreadcrumb(arg) {
  const { category, level, message, ...rest } = arg;

  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["addBreadcrumb"])({
    category: category || 'console',
    level: level || 'debug',
    message: `[debug]: ${message}`,
    ...rest,
  });
}

function getEventExceptionValues(event) {
  return {
    type: 'Unknown',
    value: 'n/a',
    ...(event.exception && event.exception.values && event.exception.values[0]),
  };
}

/**
 * Create a "span" for each performance entry. The parent transaction is `this.replayEvent`.
 */
function createPerformanceSpans(
  replay,
  entries,
) {
  return entries.map(({ type, start, end, name, data }) =>
    addEvent(replay, {
      type: EventType.Custom,
      timestamp: start,
      data: {
        tag: 'performanceSpan',
        payload: {
          op: type,
          description: name,
          startTimestamp: start,
          endTimestamp: end,
          data,
        },
      },
    }),
  );
}

function handleHistory(handlerData) {
  const { from, to } = handlerData;

  const now = Date.now() / 1000;

  return {
    type: 'navigation.push',
    start: now,
    end: now,
    name: to,
    data: {
      previous: from,
    },
  };
}

/**
 * Returns a listener to be added to `addInstrumentationHandler('history', listener)`.
 */
function handleHistorySpanListener(replay) {
  return (handlerData) => {
    if (!replay.isEnabled()) {
      return;
    }

    const result = handleHistory(handlerData);

    if (result === null) {
      return;
    }

    // Need to collect visited URLs
    replay.getContext().urls.push(result.name);
    replay.triggerUserActivity();

    replay.addUpdate(() => {
      createPerformanceSpans(replay, [result]);
      // Returning false to flush
      return false;
    });
  };
}

/**
 * Check whether a given request URL should be filtered out. This is so we
 * don't log Sentry ingest requests.
 */
function shouldFilterRequest(replay, url) {
  // If we enabled the `traceInternals` experiment, we want to trace everything
  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && replay.getOptions()._experiments.traceInternals) {
    return false;
  }

  return _isSentryRequest(url);
}

/**
 * Checks wether a given URL belongs to the configured Sentry DSN.
 */
function _isSentryRequest(url) {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  const dsn = client && client.getDsn();
  return dsn ? url.includes(dsn.host) : false;
}

/** Add a performance entry breadcrumb */
function addNetworkBreadcrumb(
  replay,
  result,
) {
  if (!replay.isEnabled()) {
    return;
  }

  if (result === null) {
    return;
  }

  if (shouldFilterRequest(replay, result.name)) {
    return;
  }

  replay.addUpdate(() => {
    createPerformanceSpans(replay, [result]);
    // Returning true will cause `addUpdate` to not flush
    // We do not want network requests to cause a flush. This will prevent
    // recurring/polling requests from keeping the replay session alive.
    return true;
  });
}

/** only exported for tests */
function handleFetch(handlerData) {
  const { startTimestamp, endTimestamp, fetchData, response } = handlerData;

  if (!endTimestamp) {
    return null;
  }

  // This is only used as a fallback, so we know the body sizes are never set here
  const { method, url } = fetchData;

  return {
    type: 'resource.fetch',
    start: startTimestamp / 1000,
    end: endTimestamp / 1000,
    name: url,
    data: {
      method,
      statusCode: response && (response ).status,
    },
  };
}

/**
 * Returns a listener to be added to `addInstrumentationHandler('fetch', listener)`.
 */
function handleFetchSpanListener(replay) {
  return (handlerData) => {
    if (!replay.isEnabled()) {
      return;
    }

    const result = handleFetch(handlerData);

    addNetworkBreadcrumb(replay, result);
  };
}

/** only exported for tests */
function handleXhr(handlerData) {
  const { startTimestamp, endTimestamp, xhr } = handlerData;

  const sentryXhrData = xhr[_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["SENTRY_XHR_DATA_KEY"]];

  if (!startTimestamp || !endTimestamp || !sentryXhrData) {
    return null;
  }

  // This is only used as a fallback, so we know the body sizes are never set here
  const { method, url, status_code: statusCode } = sentryXhrData;

  if (url === undefined) {
    return null;
  }

  return {
    type: 'resource.xhr',
    name: url,
    start: startTimestamp / 1000,
    end: endTimestamp / 1000,
    data: {
      method,
      statusCode,
    },
  };
}

/**
 * Returns a listener to be added to `addInstrumentationHandler('xhr', listener)`.
 */
function handleXhrSpanListener(replay) {
  return (handlerData) => {
    if (!replay.isEnabled()) {
      return;
    }

    const result = handleXhr(handlerData);

    addNetworkBreadcrumb(replay, result);
  };
}

const OBJ = 10;
const OBJ_KEY = 11;
const OBJ_KEY_STR = 12;
const OBJ_VAL = 13;
const OBJ_VAL_STR = 14;
const OBJ_VAL_COMPLETED = 15;

const ARR = 20;
const ARR_VAL = 21;
const ARR_VAL_STR = 22;
const ARR_VAL_COMPLETED = 23;

const ALLOWED_PRIMITIVES = ['true', 'false', 'null'];

/**
 * Complete an incomplete JSON string.
 * This will ensure that the last element always has a `"~~"` to indicate it was truncated.
 * For example, `[1,2,` will be completed to `[1,2,"~~"]`
 * and `{"aa":"b` will be completed to `{"aa":"b~~"}`
 */
function completeJson(incompleteJson, stack) {
  if (!stack.length) {
    return incompleteJson;
  }

  let json = incompleteJson;

  // Most checks are only needed for the last step in the stack
  const lastPos = stack.length - 1;
  const lastStep = stack[lastPos];

  json = _fixLastStep(json, lastStep);

  // Complete remaining steps - just add closing brackets
  for (let i = lastPos; i >= 0; i--) {
    const step = stack[i];

    switch (step) {
      case OBJ:
        json = `${json}}`;
        break;
      case ARR:
        json = `${json}]`;
        break;
    }
  }

  return json;
}

function _fixLastStep(json, lastStep) {
  switch (lastStep) {
    // Object cases
    case OBJ:
      return `${json}"~~":"~~"`;
    case OBJ_KEY:
      return `${json}:"~~"`;
    case OBJ_KEY_STR:
      return `${json}~~":"~~"`;
    case OBJ_VAL:
      return _maybeFixIncompleteObjValue(json);
    case OBJ_VAL_STR:
      return `${json}~~"`;
    case OBJ_VAL_COMPLETED:
      return `${json},"~~":"~~"`;

    // Array cases
    case ARR:
      return `${json}"~~"`;
    case ARR_VAL:
      return _maybeFixIncompleteArrValue(json);
    case ARR_VAL_STR:
      return `${json}~~"`;
    case ARR_VAL_COMPLETED:
      return `${json},"~~"`;
  }

  return json;
}

function _maybeFixIncompleteArrValue(json) {
  const pos = _findLastArrayDelimiter(json);

  if (pos > -1) {
    const part = json.slice(pos + 1);

    if (ALLOWED_PRIMITIVES.includes(part.trim())) {
      return `${json},"~~"`;
    }

    // Everything else is replaced with `"~~"`
    return `${json.slice(0, pos + 1)}"~~"`;
  }

  // fallback, this shouldn't happen, to be save
  return json;
}

function _findLastArrayDelimiter(json) {
  for (let i = json.length - 1; i >= 0; i--) {
    const char = json[i];

    if (char === ',' || char === '[') {
      return i;
    }
  }

  return -1;
}

function _maybeFixIncompleteObjValue(json) {
  const startPos = json.lastIndexOf(':');

  const part = json.slice(startPos + 1);

  if (ALLOWED_PRIMITIVES.includes(part.trim())) {
    return `${json},"~~":"~~"`;
  }

  // Everything else is replaced with `"~~"`
  // This also means we do not have incomplete numbers, e.g `[1` is replaced with `["~~"]`
  return `${json.slice(0, startPos + 1)}"~~"`;
}

/**
 * Evaluate an (incomplete) JSON string.
 */
function evaluateJson(json) {
  const stack = [];

  for (let pos = 0; pos < json.length; pos++) {
    _evaluateJsonPos(stack, json, pos);
  }

  return stack;
}

function _evaluateJsonPos(stack, json, pos) {
  const curStep = stack[stack.length - 1];

  const char = json[pos];

  const whitespaceRegex = /\s/;

  if (whitespaceRegex.test(char)) {
    return;
  }

  if (char === '"' && !_isEscaped(json, pos)) {
    _handleQuote(stack, curStep);
    return;
  }

  switch (char) {
    case '{':
      _handleObj(stack, curStep);
      break;
    case '[':
      _handleArr(stack, curStep);
      break;
    case ':':
      _handleColon(stack, curStep);
      break;
    case ',':
      _handleComma(stack, curStep);
      break;
    case '}':
      _handleObjClose(stack, curStep);
      break;
    case ']':
      _handleArrClose(stack, curStep);
      break;
  }
}

function _handleQuote(stack, curStep) {
  // End of obj value
  if (curStep === OBJ_VAL_STR) {
    stack.pop();
    stack.push(OBJ_VAL_COMPLETED);
    return;
  }

  // End of arr value
  if (curStep === ARR_VAL_STR) {
    stack.pop();
    stack.push(ARR_VAL_COMPLETED);
    return;
  }

  // Start of obj value
  if (curStep === OBJ_VAL) {
    stack.push(OBJ_VAL_STR);
    return;
  }

  // Start of arr value
  if (curStep === ARR_VAL) {
    stack.push(ARR_VAL_STR);
    return;
  }

  // Start of obj key
  if (curStep === OBJ) {
    stack.push(OBJ_KEY_STR);
    return;
  }

  // End of obj key
  if (curStep === OBJ_KEY_STR) {
    stack.pop();
    stack.push(OBJ_KEY);
    return;
  }
}

function _handleObj(stack, curStep) {
  // Initial object
  if (!curStep) {
    stack.push(OBJ);
    return;
  }

  // New object as obj value
  if (curStep === OBJ_VAL) {
    stack.push(OBJ);
    return;
  }

  // New object as array element
  if (curStep === ARR_VAL) {
    stack.push(OBJ);
  }

  // New object as first array element
  if (curStep === ARR) {
    stack.push(OBJ);
    return;
  }
}

function _handleArr(stack, curStep) {
  // Initial array
  if (!curStep) {
    stack.push(ARR);
    stack.push(ARR_VAL);
    return;
  }

  // New array as obj value
  if (curStep === OBJ_VAL) {
    stack.push(ARR);
    stack.push(ARR_VAL);
    return;
  }

  // New array as array element
  if (curStep === ARR_VAL) {
    stack.push(ARR);
    stack.push(ARR_VAL);
  }

  // New array as first array element
  if (curStep === ARR) {
    stack.push(ARR);
    stack.push(ARR_VAL);
    return;
  }
}

function _handleColon(stack, curStep) {
  if (curStep === OBJ_KEY) {
    stack.pop();
    stack.push(OBJ_VAL);
  }
}

function _handleComma(stack, curStep) {
  // Comma after obj value
  if (curStep === OBJ_VAL) {
    stack.pop();
    return;
  }
  if (curStep === OBJ_VAL_COMPLETED) {
    // Pop OBJ_VAL_COMPLETED & OBJ_VAL
    stack.pop();
    stack.pop();
    return;
  }

  // Comma after arr value
  if (curStep === ARR_VAL) {
    // do nothing - basically we'd pop ARR_VAL but add it right back
    return;
  }

  if (curStep === ARR_VAL_COMPLETED) {
    // Pop ARR_VAL_COMPLETED
    stack.pop();

    // basically we'd pop ARR_VAL but add it right back
    return;
  }
}

function _handleObjClose(stack, curStep) {
  // Empty object {}
  if (curStep === OBJ) {
    stack.pop();
  }

  // Object with element
  if (curStep === OBJ_VAL) {
    // Pop OBJ_VAL, OBJ
    stack.pop();
    stack.pop();
  }

  // Obj with element
  if (curStep === OBJ_VAL_COMPLETED) {
    // Pop OBJ_VAL_COMPLETED, OBJ_VAL, OBJ
    stack.pop();
    stack.pop();
    stack.pop();
  }

  // if was obj value, complete it
  if (stack[stack.length - 1] === OBJ_VAL) {
    stack.push(OBJ_VAL_COMPLETED);
  }

  // if was arr value, complete it
  if (stack[stack.length - 1] === ARR_VAL) {
    stack.push(ARR_VAL_COMPLETED);
  }
}

function _handleArrClose(stack, curStep) {
  // Empty array []
  if (curStep === ARR) {
    stack.pop();
  }

  // Array with element
  if (curStep === ARR_VAL) {
    // Pop ARR_VAL, ARR
    stack.pop();
    stack.pop();
  }

  // Array with element
  if (curStep === ARR_VAL_COMPLETED) {
    // Pop ARR_VAL_COMPLETED, ARR_VAL, ARR
    stack.pop();
    stack.pop();
    stack.pop();
  }

  // if was obj value, complete it
  if (stack[stack.length - 1] === OBJ_VAL) {
    stack.push(OBJ_VAL_COMPLETED);
  }

  // if was arr value, complete it
  if (stack[stack.length - 1] === ARR_VAL) {
    stack.push(ARR_VAL_COMPLETED);
  }
}

function _isEscaped(str, pos) {
  const previousChar = str[pos - 1];

  return previousChar === '\\' && !_isEscaped(str, pos - 1);
}

/* eslint-disable max-lines */

/**
 * Takes an incomplete JSON string, and returns a hopefully valid JSON string.
 * Note that this _can_ fail, so you should check the return value is valid JSON.
 */
function fixJson(incompleteJson) {
  const stack = evaluateJson(incompleteJson);

  return completeJson(incompleteJson, stack);
}

/** Get the size of a body. */
function getBodySize(
  body,
  textEncoder,
) {
  if (!body) {
    return undefined;
  }

  try {
    if (typeof body === 'string') {
      return textEncoder.encode(body).length;
    }

    if (body instanceof URLSearchParams) {
      return textEncoder.encode(body.toString()).length;
    }

    if (body instanceof FormData) {
      const formDataStr = _serializeFormData(body);
      return textEncoder.encode(formDataStr).length;
    }

    if (body instanceof Blob) {
      return body.size;
    }

    if (body instanceof ArrayBuffer) {
      return body.byteLength;
    }

    // Currently unhandled types: ArrayBufferView, ReadableStream
  } catch (e) {
    // just return undefined
  }

  return undefined;
}

/** Convert a Content-Length header to number/undefined.  */
function parseContentLengthHeader(header) {
  if (!header) {
    return undefined;
  }

  const size = parseInt(header, 10);
  return isNaN(size) ? undefined : size;
}

/** Get the string representation of a body. */
function getBodyString(body) {
  if (typeof body === 'string') {
    return body;
  }

  if (body instanceof URLSearchParams) {
    return body.toString();
  }

  if (body instanceof FormData) {
    return _serializeFormData(body);
  }

  return undefined;
}

/** Convert ReplayNetworkRequestData to a PerformanceEntry. */
function makeNetworkReplayBreadcrumb(
  type,
  data,
) {
  if (!data) {
    return null;
  }

  const { startTimestamp, endTimestamp, url, method, statusCode, request, response } = data;

  const result = {
    type,
    start: startTimestamp / 1000,
    end: endTimestamp / 1000,
    name: url,
    data: Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dropUndefinedKeys"])({
      method,
      statusCode,
      request,
      response,
    }),
  };

  return result;
}

/** Build the request or response part of a replay network breadcrumb that was skipped. */
function buildSkippedNetworkRequestOrResponse(bodySize) {
  return {
    headers: {},
    size: bodySize,
    _meta: {
      warnings: ['URL_SKIPPED'],
    },
  };
}

/** Build the request or response part of a replay network breadcrumb. */
function buildNetworkRequestOrResponse(
  headers,
  bodySize,
  body,
) {
  if (!bodySize && Object.keys(headers).length === 0) {
    return undefined;
  }

  if (!bodySize) {
    return {
      headers,
    };
  }

  if (!body) {
    return {
      headers,
      size: bodySize,
    };
  }

  const info = {
    headers,
    size: bodySize,
  };

  const { body: normalizedBody, warnings } = normalizeNetworkBody(body);
  info.body = normalizedBody;
  if (warnings.length > 0) {
    info._meta = {
      warnings,
    };
  }

  return info;
}

/** Filter a set of headers */
function getAllowedHeaders(headers, allowedHeaders) {
  return Object.keys(headers).reduce((filteredHeaders, key) => {
    const normalizedKey = key.toLowerCase();
    // Avoid putting empty strings into the headers
    if (allowedHeaders.includes(normalizedKey) && headers[key]) {
      filteredHeaders[normalizedKey] = headers[key];
    }
    return filteredHeaders;
  }, {});
}

function _serializeFormData(formData) {
  // This is a bit simplified, but gives us a decent estimate
  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'
  // @ts-ignore passing FormData to URLSearchParams actually works
  return new URLSearchParams(formData).toString();
}

function normalizeNetworkBody(body)

 {
  if (!body || typeof body !== 'string') {
    return {
      body,
      warnings: [],
    };
  }

  const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;

  if (_strIsProbablyJson(body)) {
    try {
      const json = exceedsSizeLimit ? fixJson(body.slice(0, NETWORK_BODY_MAX_SIZE)) : body;
      const normalizedBody = JSON.parse(json);
      return {
        body: normalizedBody,
        warnings: exceedsSizeLimit ? ['JSON_TRUNCATED'] : [],
      };
    } catch (e3) {
      return {
        body: exceedsSizeLimit ? `${body.slice(0, NETWORK_BODY_MAX_SIZE)}…` : body,
        warnings: exceedsSizeLimit ? ['INVALID_JSON', 'TEXT_TRUNCATED'] : ['INVALID_JSON'],
      };
    }
  }

  return {
    body: exceedsSizeLimit ? `${body.slice(0, NETWORK_BODY_MAX_SIZE)}…` : body,
    warnings: exceedsSizeLimit ? ['TEXT_TRUNCATED'] : [],
  };
}

function _strIsProbablyJson(str) {
  const first = str[0];
  const last = str[str.length - 1];

  // Simple check: If this does not start & end with {} or [], it's not JSON
  return (first === '[' && last === ']') || (first === '{' && last === '}');
}

/** Match an URL against a list of strings/Regex. */
function urlMatches(url, urls) {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["stringMatchesSomePattern"])(url, urls);
}

/**
 * Capture a fetch breadcrumb to a replay.
 * This adds additional data (where approriate).
 */
async function captureFetchBreadcrumbToReplay(
  breadcrumb,
  hint,
  options

,
) {
  try {
    const data = await _prepareFetchData(breadcrumb, hint, options);

    // Create a replay performance entry from this breadcrumb
    const result = makeNetworkReplayBreadcrumb('resource.fetch', data);
    addNetworkBreadcrumb(options.replay, result);
  } catch (error) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay] Failed to capture fetch breadcrumb', error);
  }
}

/**
 * Enrich a breadcrumb with additional data.
 * This has to be sync & mutate the given breadcrumb,
 * as the breadcrumb is afterwards consumed by other handlers.
 */
function enrichFetchBreadcrumb(
  breadcrumb,
  hint,
  options,
) {
  const { input, response } = hint;

  const body = _getFetchRequestArgBody(input);
  const reqSize = getBodySize(body, options.textEncoder);

  const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;

  if (reqSize !== undefined) {
    breadcrumb.data.request_body_size = reqSize;
  }
  if (resSize !== undefined) {
    breadcrumb.data.response_body_size = resSize;
  }
}

async function _prepareFetchData(
  breadcrumb,
  hint,
  options

,
) {
  const { startTimestamp, endTimestamp } = hint;

  const {
    url,
    method,
    status_code: statusCode = 0,
    request_body_size: requestBodySize,
    response_body_size: responseBodySize,
  } = breadcrumb.data;

  const captureDetails = urlMatches(url, options.networkDetailAllowUrls);

  const request = captureDetails
    ? _getRequestInfo(options, hint.input, requestBodySize)
    : buildSkippedNetworkRequestOrResponse(requestBodySize);
  const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);

  return {
    startTimestamp,
    endTimestamp,
    url,
    method,
    statusCode,
    request,
    response,
  };
}

function _getRequestInfo(
  { networkCaptureBodies, networkRequestHeaders },
  input,
  requestBodySize,
) {
  const headers = getRequestHeaders(input, networkRequestHeaders);

  if (!networkCaptureBodies) {
    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);
  }

  // We only want to transmit string or string-like bodies
  const requestBody = _getFetchRequestArgBody(input);
  const bodyStr = getBodyString(requestBody);
  return buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);
}

async function _getResponseInfo(
  captureDetails,
  {
    networkCaptureBodies,
    textEncoder,
    networkResponseHeaders,
  }

,
  response,
  responseBodySize,
) {
  if (!captureDetails && responseBodySize !== undefined) {
    return buildSkippedNetworkRequestOrResponse(responseBodySize);
  }

  const headers = getAllHeaders(response.headers, networkResponseHeaders);

  if (!networkCaptureBodies && responseBodySize !== undefined) {
    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);
  }

  // Only clone the response if we need to
  try {
    // We have to clone this, as the body can only be read once
    const res = response.clone();
    const bodyText = await _parseFetchBody(res);

    const size =
      bodyText && bodyText.length && responseBodySize === undefined
        ? getBodySize(bodyText, textEncoder)
        : responseBodySize;

    if (!captureDetails) {
      return buildSkippedNetworkRequestOrResponse(size);
    }

    if (networkCaptureBodies) {
      return buildNetworkRequestOrResponse(headers, size, bodyText);
    }

    return buildNetworkRequestOrResponse(headers, size, undefined);
  } catch (e) {
    // fallback
    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);
  }
}

async function _parseFetchBody(response) {
  try {
    return await response.text();
  } catch (e2) {
    return undefined;
  }
}

function _getFetchRequestArgBody(fetchArgs = []) {
  // We only support getting the body from the fetch options
  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {
    return undefined;
  }

  return (fetchArgs[1] ).body;
}

function getAllHeaders(headers, allowedHeaders) {
  const allHeaders = {};

  allowedHeaders.forEach(header => {
    if (headers.get(header)) {
      allHeaders[header] = headers.get(header) ;
    }
  });

  return allHeaders;
}

function getRequestHeaders(fetchArgs, allowedHeaders) {
  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {
    return getHeadersFromOptions(fetchArgs[0] , allowedHeaders);
  }

  if (fetchArgs.length === 2) {
    return getHeadersFromOptions(fetchArgs[1] , allowedHeaders);
  }

  return {};
}

function getHeadersFromOptions(
  input,
  allowedHeaders,
) {
  if (!input) {
    return {};
  }

  const headers = input.headers;

  if (!headers) {
    return {};
  }

  if (headers instanceof Headers) {
    return getAllHeaders(headers, allowedHeaders);
  }

  // We do not support this, as it is not really documented (anymore?)
  if (Array.isArray(headers)) {
    return {};
  }

  return getAllowedHeaders(headers, allowedHeaders);
}

/**
 * Capture an XHR breadcrumb to a replay.
 * This adds additional data (where approriate).
 */
async function captureXhrBreadcrumbToReplay(
  breadcrumb,
  hint,
  options,
) {
  try {
    const data = _prepareXhrData(breadcrumb, hint, options);

    // Create a replay performance entry from this breadcrumb
    const result = makeNetworkReplayBreadcrumb('resource.xhr', data);
    addNetworkBreadcrumb(options.replay, result);
  } catch (error) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay] Failed to capture fetch breadcrumb', error);
  }
}

/**
 * Enrich a breadcrumb with additional data.
 * This has to be sync & mutate the given breadcrumb,
 * as the breadcrumb is afterwards consumed by other handlers.
 */
function enrichXhrBreadcrumb(
  breadcrumb,
  hint,
  options,
) {
  const { xhr, input } = hint;

  const reqSize = getBodySize(input, options.textEncoder);
  const resSize = xhr.getResponseHeader('content-length')
    ? parseContentLengthHeader(xhr.getResponseHeader('content-length'))
    : getBodySize(xhr.response, options.textEncoder);

  if (reqSize !== undefined) {
    breadcrumb.data.request_body_size = reqSize;
  }
  if (resSize !== undefined) {
    breadcrumb.data.response_body_size = resSize;
  }
}

function _prepareXhrData(
  breadcrumb,
  hint,
  options,
) {
  const { startTimestamp, endTimestamp, input, xhr } = hint;

  const {
    url,
    method,
    status_code: statusCode = 0,
    request_body_size: requestBodySize,
    response_body_size: responseBodySize,
  } = breadcrumb.data;

  if (!url) {
    return null;
  }

  if (!urlMatches(url, options.networkDetailAllowUrls)) {
    const request = buildSkippedNetworkRequestOrResponse(requestBodySize);
    const response = buildSkippedNetworkRequestOrResponse(responseBodySize);
    return {
      startTimestamp,
      endTimestamp,
      url,
      method,
      statusCode,
      request,
      response,
    };
  }

  const xhrInfo = xhr[_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["SENTRY_XHR_DATA_KEY"]];
  const networkRequestHeaders = xhrInfo
    ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders)
    : {};
  const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);

  const request = buildNetworkRequestOrResponse(
    networkRequestHeaders,
    requestBodySize,
    options.networkCaptureBodies ? getBodyString(input) : undefined,
  );
  const response = buildNetworkRequestOrResponse(
    networkResponseHeaders,
    responseBodySize,
    options.networkCaptureBodies ? hint.xhr.responseText : undefined,
  );

  return {
    startTimestamp,
    endTimestamp,
    url,
    method,
    statusCode,
    request,
    response,
  };
}

function getResponseHeaders(xhr) {
  const headers = xhr.getAllResponseHeaders();

  if (!headers) {
    return {};
  }

  return headers.split('\r\n').reduce((acc, line) => {
    const [key, value] = line.split(': ');
    acc[key.toLowerCase()] = value;
    return acc;
  }, {});
}

/**
 * This method does two things:
 * - It enriches the regular XHR/fetch breadcrumbs with request/response size data
 * - It captures the XHR/fetch breadcrumbs to the replay
 *   (enriching it with further data that is _not_ added to the regular breadcrumbs)
 */
function handleNetworkBreadcrumbs(replay) {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();

  try {
    const textEncoder = new TextEncoder();

    const { networkDetailAllowUrls, networkCaptureBodies, networkRequestHeaders, networkResponseHeaders } =
      replay.getOptions();

    const options = {
      replay,
      textEncoder,
      networkDetailAllowUrls,
      networkCaptureBodies,
      networkRequestHeaders,
      networkResponseHeaders,
    };

    if (client && client.on) {
      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));
    } else {
      // Fallback behavior
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('fetch', handleFetchSpanListener(replay));
      Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('xhr', handleXhrSpanListener(replay));
    }
  } catch (e2) {
    // Do nothing
  }
}

/** just exported for tests */
function beforeAddNetworkBreadcrumb(
  options,
  breadcrumb,
  hint,
) {
  if (!breadcrumb.data) {
    return;
  }

  try {
    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {
      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick
      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on
      // So any async mutations to it will not be reflected in the final breadcrumb
      enrichXhrBreadcrumb(breadcrumb, hint, options);

      void captureXhrBreadcrumbToReplay(breadcrumb, hint, options);
    }

    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {
      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick
      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on
      // So any async mutations to it will not be reflected in the final breadcrumb
      enrichFetchBreadcrumb(breadcrumb, hint, options);

      void captureFetchBreadcrumbToReplay(breadcrumb, hint, options);
    }
  } catch (e) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('Error when enriching network breadcrumb');
  }
}

function _isXhrBreadcrumb(breadcrumb) {
  return breadcrumb.category === 'xhr';
}

function _isFetchBreadcrumb(breadcrumb) {
  return breadcrumb.category === 'fetch';
}

function _isXhrHint(hint) {
  return hint && hint.xhr;
}

function _isFetchHint(hint) {
  return hint && hint.response;
}

let _LAST_BREADCRUMB = null;

const handleScopeListener =
  (replay) =>
  (scope) => {
    if (!replay.isEnabled()) {
      return;
    }

    const result = handleScope(scope);

    if (!result) {
      return;
    }

    addBreadcrumbEvent(replay, result);
  };

/**
 * An event handler to handle scope changes.
 */
function handleScope(scope) {
  // TODO (v8): Remove this guard. This was put in place because we introduced
  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.
  // For now, we'll just return null if the method doesn't exist but we should eventually
  // get rid of this guard.
  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();

  // Listener can be called when breadcrumbs have not changed, so we store the
  // reference to the last crumb and only return a crumb if it has changed
  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {
    return null;
  }

  _LAST_BREADCRUMB = newBreadcrumb;

  if (
    newBreadcrumb.category &&
    (['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) ||
      newBreadcrumb.category.startsWith('ui.'))
  ) {
    return null;
  }

  if (newBreadcrumb.category === 'console') {
    return normalizeConsoleBreadcrumb(newBreadcrumb);
  }

  return createBreadcrumb(newBreadcrumb);
}

/** exported for tests only */
function normalizeConsoleBreadcrumb(breadcrumb) {
  const args = breadcrumb.data && breadcrumb.data.arguments;

  if (!Array.isArray(args) || args.length === 0) {
    return createBreadcrumb(breadcrumb);
  }

  let isTruncated = false;

  // Avoid giant args captures
  const normalizedArgs = args.map(arg => {
    if (!arg) {
      return arg;
    }
    if (typeof arg === 'string') {
      if (arg.length > CONSOLE_ARG_MAX_SIZE) {
        isTruncated = true;
        return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;
      }

      return arg;
    }
    if (typeof arg === 'object') {
      try {
        const normalizedArg = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["normalize"])(arg, 7);
        const stringified = JSON.stringify(normalizedArg);
        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {
          const fixedJson = fixJson(stringified.slice(0, CONSOLE_ARG_MAX_SIZE));
          const json = JSON.parse(fixedJson);
          // We only set this after JSON.parse() was successfull, so we know we didn't run into `catch`
          isTruncated = true;
          return json;
        }
        return normalizedArg;
      } catch (e) {
        // fall back to default
      }
    }

    return arg;
  });

  return createBreadcrumb({
    ...breadcrumb,
    data: {
      ...breadcrumb.data,
      arguments: normalizedArgs,
      ...(isTruncated ? { _meta: { warnings: ['CONSOLE_ARG_TRUNCATED'] } } : {}),
    },
  });
}

/**
 * Add global listeners that cannot be removed.
 */
function addGlobalListeners(replay) {
  // Listeners from core SDK //
  const scope = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getScope();
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();

  if (scope) {
    scope.addScopeListener(handleScopeListener(replay));
  }
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('dom', handleDomListener(replay));
  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["addInstrumentationHandler"])('history', handleHistorySpanListener(replay));
  handleNetworkBreadcrumbs(replay);

  // Tag all (non replay) events that get sent to Sentry with the current
  // replay ID so that we can reference them later in the UI
  Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["addGlobalEventProcessor"])(handleGlobalEventListener(replay, !hasHooks(client)));

  // If a custom client has no hooks yet, we continue to use the "old" implementation
  if (hasHooks(client)) {
    client.on('afterSendEvent', handleAfterSendEvent(replay));
    client.on('createDsc', (dsc) => {
      const replayId = replay.getSessionId();
      if (replayId && replay.isEnabled()) {
        dsc.replay_id = replayId;
      }
    });
  }
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasHooks(client) {
  return !!(client && client.on);
}

/**
 * Create a "span" for the total amount of memory being used by JS objects
 * (including v8 internal objects).
 */
async function addMemoryEntry(replay) {
  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this
  try {
    return Promise.all(
      createPerformanceSpans(replay, [
        // @ts-ignore memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)
        createMemoryEntry(WINDOW.performance.memory),
      ]),
    );
  } catch (error) {
    // Do nothing
    return [];
  }
}

function createMemoryEntry(memoryEntry) {
  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;
  // we don't want to use `getAbsoluteTime` because it adds the event time to the
  // time origin, so we get the current timestamp instead
  const time = Date.now() / 1000;
  return {
    type: 'memory',
    name: 'memory',
    start: time,
    end: time,
    data: {
      memory: {
        jsHeapSizeLimit,
        totalJSHeapSize,
        usedJSHeapSize,
      },
    },
  };
}

// Map entryType -> function to normalize data for event
// @ts-ignore TODO: entry type does not fit the create* functions entry type
const ENTRY_TYPES

 = {
  // @ts-ignore TODO: entry type does not fit the create* functions entry type
  resource: createResourceEntry,
  paint: createPaintEntry,
  // @ts-ignore TODO: entry type does not fit the create* functions entry type
  navigation: createNavigationEntry,
  // @ts-ignore TODO: entry type does not fit the create* functions entry type
  ['largest-contentful-paint']: createLargestContentfulPaint,
};

/**
 * Create replay performance entries from the browser performance entries.
 */
function createPerformanceEntries(
  entries,
) {
  return entries.map(createPerformanceEntry).filter(Boolean) ;
}

function createPerformanceEntry(entry) {
  if (ENTRY_TYPES[entry.entryType] === undefined) {
    return null;
  }

  return ENTRY_TYPES[entry.entryType](entry);
}

function getAbsoluteTime(time) {
  // browserPerformanceTimeOrigin can be undefined if `performance` or
  // `performance.now` doesn't exist, but this is already checked by this integration
  return ((_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["browserPerformanceTimeOrigin"] || WINDOW.performance.timeOrigin) + time) / 1000;
}

function createPaintEntry(entry) {
  const { duration, entryType, name, startTime } = entry;

  const start = getAbsoluteTime(startTime);
  return {
    type: entryType,
    name,
    start,
    end: start + duration,
    data: undefined,
  };
}

function createNavigationEntry(entry) {
  const {
    entryType,
    name,
    decodedBodySize,
    duration,
    domComplete,
    encodedBodySize,
    domContentLoadedEventStart,
    domContentLoadedEventEnd,
    domInteractive,
    loadEventStart,
    loadEventEnd,
    redirectCount,
    startTime,
    transferSize,
    type,
  } = entry;

  // Ignore entries with no duration, they do not seem to be useful and cause dupes
  if (duration === 0) {
    return null;
  }

  return {
    type: `${entryType}.${type}`,
    start: getAbsoluteTime(startTime),
    end: getAbsoluteTime(domComplete),
    name,
    data: {
      size: transferSize,
      decodedBodySize,
      encodedBodySize,
      duration,
      domInteractive,
      domContentLoadedEventStart,
      domContentLoadedEventEnd,
      loadEventStart,
      loadEventEnd,
      domComplete,
      redirectCount,
    },
  };
}

function createResourceEntry(
  entry,
) {
  const {
    entryType,
    initiatorType,
    name,
    responseEnd,
    startTime,
    decodedBodySize,
    encodedBodySize,
    responseStatus,
    transferSize,
  } = entry;

  // Core SDK handles these
  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {
    return null;
  }

  return {
    type: `${entryType}.${initiatorType}`,
    start: getAbsoluteTime(startTime),
    end: getAbsoluteTime(responseEnd),
    name,
    data: {
      size: transferSize,
      statusCode: responseStatus,
      decodedBodySize,
      encodedBodySize,
    },
  };
}

function createLargestContentfulPaint(
  entry,
) {
  const { entryType, startTime, size } = entry;

  let startTimeOrNavigationActivation = 0;

  if (WINDOW.performance) {
    const navEntry = WINDOW.performance.getEntriesByType('navigation')[0]

;

    // See https://github.com/GoogleChrome/web-vitals/blob/9f11c4c6578fb4c5ee6fa4e32b9d1d756475f135/src/lib/getActivationStart.ts#L21
    startTimeOrNavigationActivation = (navEntry && navEntry.activationStart) || 0;
  }

  // value is in ms
  const value = Math.max(startTime - startTimeOrNavigationActivation, 0);
  // LCP doesn't have a "duration", it just happens at a single point in time.
  // But the UI expects both, so use end (in seconds) for both timestamps.
  const end = getAbsoluteTime(startTimeOrNavigationActivation) + value / 1000;

  return {
    type: entryType,
    name: entryType,
    start: end,
    end,
    data: {
      value, // LCP "duration" in ms
      size,
      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      nodeId: record.mirror.getId(entry.element ),
    },
  };
}

/**
 * Heavily simplified debounce function based on lodash.debounce.
 *
 * This function takes a callback function (@param fun) and delays its invocation
 * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,
 * which ensures that the callback is invoked at least once after the specified max. wait time.
 *
 * @param func the function whose invocation is to be debounced
 * @param wait the minimum time until the function is invoked after it was called once
 * @param options the options object, which can contain the `maxWait` property
 *
 * @returns the debounced version of the function, which needs to be called at least once to start the
 *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc
 *          was already invoked in the meantime, return @param func's return value.
 *          The debounced function has two additional properties:
 *          - `flush`: Invokes the debounced function immediately and returns its return value
 *          - `cancel`: Cancels the debouncing process and resets the debouncing timer
 */
function debounce(func, wait, options) {
  let callbackReturnValue;

  let timerId;
  let maxTimerId;

  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;

  function invokeFunc() {
    cancelTimers();
    callbackReturnValue = func();
    return callbackReturnValue;
  }

  function cancelTimers() {
    timerId !== undefined && clearTimeout(timerId);
    maxTimerId !== undefined && clearTimeout(maxTimerId);
    timerId = maxTimerId = undefined;
  }

  function flush() {
    if (timerId !== undefined || maxTimerId !== undefined) {
      return invokeFunc();
    }
    return callbackReturnValue;
  }

  function debounced() {
    if (timerId) {
      clearTimeout(timerId);
    }
    timerId = setTimeout(invokeFunc, wait);

    if (maxWait && maxTimerId === undefined) {
      maxTimerId = setTimeout(invokeFunc, maxWait);
    }

    return callbackReturnValue;
  }

  debounced.cancel = cancelTimers;
  debounced.flush = flush;
  return debounced;
}

/**
 * Handler for recording events.
 *
 * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.
 */
function getHandleRecordingEmit(replay) {
  let hadFirstEvent = false;

  return (event, _isCheckout) => {
    // If this is false, it means session is expired, create and a new session and wait for checkout
    if (!replay.checkAndHandleExpiredSession()) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('[Replay] Received replay event after session expired.');

      return;
    }

    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`
    // We also want to treat the first event as a checkout, so we handle this specifically here
    const isCheckout = _isCheckout || !hadFirstEvent;
    hadFirstEvent = true;

    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.
    replay.addUpdate(() => {
      // The session is always started immediately on pageload/init, but for
      // error-only replays, it should reflect the most recent checkout
      // when an error occurs. Clear any state that happens before this current
      // checkout. This needs to happen before `addEvent()` which updates state
      // dependent on this reset.
      if (replay.recordingMode === 'buffer' && isCheckout) {
        replay.setInitialState();
      }

      // We need to clear existing events on a checkout, otherwise they are
      // incremental event updates and should be appended
      void addEvent(replay, event, isCheckout);

      // Different behavior for full snapshots (type=2), ignore other event types
      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16
      if (!isCheckout) {
        return false;
      }

      // If there is a previousSessionId after a full snapshot occurs, then
      // the replay session was started due to session expiration. The new session
      // is started before triggering a new checkout and contains the id
      // of the previous session. Do not immediately flush in this case
      // to avoid capturing only the checkout and instead the replay will
      // be captured if they perform any follow-up actions.
      if (replay.session && replay.session.previousSessionId) {
        return true;
      }

      // See note above re: session start needs to reflect the most recent
      // checkout.
      if (replay.recordingMode === 'buffer' && replay.session) {
        const { earliestEvent } = replay.getContext();
        if (earliestEvent) {
          replay.session.started = earliestEvent;

          if (replay.getOptions().stickySession) {
            saveSession(replay.session);
          }
        }
      }

      // Flush immediately so that we do not miss the first segment, otherwise
      // it can prevent loading on the UI. This will cause an increase in short
      // replays (e.g. opening and closing a tab quickly), but these can be
      // filtered on the UI.
      if (replay.recordingMode === 'session') {
        // We want to ensure the worker is ready, as otherwise we'd always send the first event uncompressed
        void replay.flushImmediate();
      }

      return true;
    });
  };
}

/**
 * Create a replay envelope ready to be sent.
 * This includes both the replay event, as well as the recording data.
 */
function createReplayEnvelope(
  replayEvent,
  recordingData,
  dsn,
  tunnel,
) {
  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["createEnvelope"])(
    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["createEventEnvelopeHeaders"])(replayEvent, Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["getSdkMetadataForEnvelopeHeader"])(replayEvent), tunnel, dsn),
    [
      [{ type: 'replay_event' }, replayEvent],
      [
        {
          type: 'replay_recording',
          // If string then we need to encode to UTF8, otherwise will have
          // wrong size. TextEncoder has similar browser support to
          // MutationObserver, although it does not accept IE11.
          length:
            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,
        },
        recordingData,
      ],
    ],
  );
}

/**
 * Prepare the recording data ready to be sent.
 */
function prepareRecordingData({
  recordingData,
  headers,
}

) {
  let payloadWithSequence;

  // XXX: newline is needed to separate sequence id from events
  const replayHeaders = `${JSON.stringify(headers)}
`;

  if (typeof recordingData === 'string') {
    payloadWithSequence = `${replayHeaders}${recordingData}`;
  } else {
    const enc = new TextEncoder();
    // XXX: newline is needed to separate sequence id from events
    const sequence = enc.encode(replayHeaders);
    // Merge the two Uint8Arrays
    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);
    payloadWithSequence.set(sequence);
    payloadWithSequence.set(recordingData, sequence.length);
  }

  return payloadWithSequence;
}

/**
 * Prepare a replay event & enrich it with the SDK metadata.
 */
async function prepareReplayEvent({
  client,
  scope,
  replayId: event_id,
  event,
}

) {
  const integrations =
    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)
      ? Object.keys(client._integrations)
      : undefined;
  const preparedEvent = (await Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["prepareEvent"])(
    client.getOptions(),
    event,
    { event_id, integrations },
    scope,
  )) ;

  // If e.g. a global event processor returned null
  if (!preparedEvent) {
    return null;
  }

  // This normally happens in browser client "_prepareEvent"
  // but since we do not use this private method from the client, but rather the plain import
  // we need to do this manually.
  preparedEvent.platform = preparedEvent.platform || 'javascript';

  // extract the SDK name because `client._prepareEvent` doesn't add it to the event
  const metadata = client.getSdkMetadata && client.getSdkMetadata();
  const { name, version } = (metadata && metadata.sdk) || {};

  preparedEvent.sdk = {
    ...preparedEvent.sdk,
    name: name || 'sentry.javascript.unknown',
    version: version || '0.0.0',
  };

  return preparedEvent;
}

/**
 * Send replay attachment using `fetch()`
 */
async function sendReplayRequest({
  recordingData,
  replayId,
  segmentId: segment_id,
  eventContext,
  timestamp,
  session,
  options,
}) {
  const preparedRecordingData = prepareRecordingData({
    recordingData,
    headers: {
      segment_id,
    },
  });

  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;

  const hub = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])();
  const client = hub.getClient();
  const scope = hub.getScope();
  const transport = client && client.getTransport();
  const dsn = client && client.getDsn();

  if (!client || !scope || !transport || !dsn || !session.sampled) {
    return;
  }

  const baseEvent = {
    type: REPLAY_EVENT_NAME,
    replay_start_timestamp: initialTimestamp / 1000,
    timestamp: timestamp / 1000,
    error_ids: errorIds,
    trace_ids: traceIds,
    urls,
    replay_id: replayId,
    segment_id,
    replay_type: session.sampled,
  };

  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });

  if (!replayEvent) {
    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions
    client.recordDroppedEvent('event_processor', 'replay', baseEvent);
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('An event processor returned `null`, will not send event.');
    return;
  }

  replayEvent.contexts = {
    ...replayEvent.contexts,
    replay: {
      ...(replayEvent.contexts && replayEvent.contexts.replay),
      session_sample_rate: options.sessionSampleRate,
      error_sample_rate: options.errorSampleRate,
    },
  };

  /*
  For reference, the fully built event looks something like this:
  {
      "type": "replay_event",
      "timestamp": 1670837008.634,
      "error_ids": [
          "errorId"
      ],
      "trace_ids": [
          "traceId"
      ],
      "urls": [
          "https://example.com"
      ],
      "replay_id": "eventId",
      "segment_id": 3,
      "replay_type": "error",
      "platform": "javascript",
      "event_id": "eventId",
      "environment": "production",
      "sdk": {
          "integrations": [
              "BrowserTracing",
              "Replay"
          ],
          "name": "sentry.javascript.browser",
          "version": "7.25.0"
      },
      "sdkProcessingMetadata": {},
      "contexts": {
        "replay": {
          "session_sample_rate": 1,
          "error_sample_rate": 0,
        },
      },
  }
  */

  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);

  let response;

  try {
    response = await transport.send(envelope);
  } catch (err) {
    const error = new Error(UNABLE_TO_SEND_REPLAY);

    try {
      // In case browsers don't allow this property to be writable
      // @ts-ignore This needs lib es2022 and newer
      error.cause = err;
    } catch (e) {
      // nothing to do
    }
    throw error;
  }

  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore
  if (!response) {
    return response;
  }

  // If the status code is invalid, we want to immediately stop & not retry
  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {
    throw new TransportStatusCodeError(response.statusCode);
  }

  return response;
}

/**
 * This error indicates that the transport returned an invalid status code.
 */
class TransportStatusCodeError extends Error {
   constructor(statusCode) {
    super(`Transport returned status code ${statusCode}`);
  }
}

/**
 * Finalize and send the current replay event to Sentry
 */
async function sendReplay(
  replayData,
  retryConfig = {
    count: 0,
    interval: RETRY_BASE_INTERVAL,
  },
) {
  const { recordingData, options } = replayData;

  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)
  if (!recordingData.length) {
    return;
  }

  try {
    await sendReplayRequest(replayData);
    return true;
  } catch (err) {
    if (err instanceof TransportStatusCodeError) {
      throw err;
    }

    // Capture error for every failed replay
    Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["setContext"])('Replays', {
      _retryCount: retryConfig.count,
    });

    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && options._experiments && options._experiments.captureExceptions) {
      Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["captureException"])(err);
    }

    // If an error happened here, it's likely that uploading the attachment
    // failed, we'll can retry with the same events payload
    if (retryConfig.count >= RETRY_MAX_COUNT) {
      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);

      try {
        // In case browsers don't allow this property to be writable
        // @ts-ignore This needs lib es2022 and newer
        error.cause = err;
      } catch (e) {
        // nothing to do
      }

      throw error;
    }

    // will retry in intervals of 5, 10, 30
    retryConfig.interval *= ++retryConfig.count;

    return await new Promise((resolve, reject) => {
      setTimeout(async () => {
        try {
          await sendReplay(replayData, retryConfig);
          resolve(true);
        } catch (err) {
          reject(err);
        }
      }, retryConfig.interval);
    });
  }
}

/* eslint-disable max-lines */ // TODO: We might want to split this file up

/**
 * The main replay container class, which holds all the state and methods for recording and sending replays.
 */
class ReplayContainer  {
   __init() {this.eventBuffer = null;}

  /**
   * List of PerformanceEntry from PerformanceObserver
   */
   __init2() {this.performanceEvents = [];}

  /**
   * Recording can happen in one of three modes:
   *   - session: Record the whole session, sending it continuously
   *   - buffer: Always keep the last 60s of recording, requires:
   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs
   *     - or calling `flush()` to send the replay
   */
   __init3() {this.recordingMode = 'session';}

  /**
   * These are here so we can overwrite them in tests etc.
   * @hidden
   */
    __init4() {this.timeouts = {
    sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,
    sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION,
    maxSessionLife: MAX_SESSION_LIFE,
  }; }

  /**
   * Options to pass to `rrweb.record()`
   */

   __init5() {this._performanceObserver = null;}

   __init6() {this._flushLock = null;}

  /**
   * Timestamp of the last user activity. This lives across sessions.
   */
   __init7() {this._lastActivity = Date.now();}

  /**
   * Is the integration currently active?
   */
   __init8() {this._isEnabled = false;}

  /**
   * Paused is a state where:
   * - DOM Recording is not listening at all
   * - Nothing will be added to event buffer (e.g. core SDK events)
   */
   __init9() {this._isPaused = false;}

  /**
   * Have we attached listeners to the core SDK?
   * Note we have to track this as there is no way to remove instrumentation handlers.
   */
   __init10() {this._hasInitializedCoreListeners = false;}

  /**
   * Function to stop recording
   */
   __init11() {this._stopRecording = null;}

   __init12() {this._context = {
    errorIds: new Set(),
    traceIds: new Set(),
    urls: [],
    earliestEvent: null,
    initialTimestamp: Date.now(),
    initialUrl: '',
  };}

   constructor({
    options,
    recordingOptions,
  }

) {ReplayContainer.prototype.__init.call(this);ReplayContainer.prototype.__init2.call(this);ReplayContainer.prototype.__init3.call(this);ReplayContainer.prototype.__init4.call(this);ReplayContainer.prototype.__init5.call(this);ReplayContainer.prototype.__init6.call(this);ReplayContainer.prototype.__init7.call(this);ReplayContainer.prototype.__init8.call(this);ReplayContainer.prototype.__init9.call(this);ReplayContainer.prototype.__init10.call(this);ReplayContainer.prototype.__init11.call(this);ReplayContainer.prototype.__init12.call(this);ReplayContainer.prototype.__init13.call(this);ReplayContainer.prototype.__init14.call(this);ReplayContainer.prototype.__init15.call(this);ReplayContainer.prototype.__init16.call(this);ReplayContainer.prototype.__init17.call(this);
    this._recordingOptions = recordingOptions;
    this._options = options;

    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {
      maxWait: this._options.flushMaxDelay,
    });
  }

  /** Get the event context. */
   getContext() {
    return this._context;
  }

  /** If recording is currently enabled. */
   isEnabled() {
    return this._isEnabled;
  }

  /** If recording is currently paused. */
   isPaused() {
    return this._isPaused;
  }

  /** Get the replay integration options. */
   getOptions() {
    return this._options;
  }

  /**
   * Initializes the plugin based on sampling configuration. Should not be
   * called outside of constructor.
   */
   initializeSampling() {
    const { errorSampleRate, sessionSampleRate } = this._options;

    // If neither sample rate is > 0, then do nothing - user will need to call one of
    // `start()` or `startBuffering` themselves.
    if (errorSampleRate <= 0 && sessionSampleRate <= 0) {
      return;
    }

    // Otherwise if there is _any_ sample rate set, try to load an existing
    // session, or create a new one.
    const isSessionSampled = this._loadAndCheckSession();

    if (!isSessionSampled) {
      // This should only occur if `errorSampleRate` is 0 and was unsampled for
      // session-based replay. In this case there is nothing to do.
      return;
    }

    if (!this.session) {
      // This should not happen, something wrong has occurred
      this._handleException(new Error('Unable to initialize and create session'));
      return;
    }

    if (this.session.sampled && this.session.sampled !== 'session') {
      // If not sampled as session-based, then recording mode will be `buffer`
      // Note that we don't explicitly check if `sampled === 'buffer'` because we
      // could have sessions from Session storage that are still `error` from
      // prior SDK version.
      this.recordingMode = 'buffer';
    }

    this._initializeRecording();
  }

  /**
   * Start a replay regardless of sampling rate. Calling this will always
   * create a new session. Will throw an error if replay is already in progress.
   *
   * Creates or loads a session, attaches listeners to varying events (DOM,
   * _performanceObserver, Recording, Sentry SDK, etc)
   */
   start() {
    if (this._isEnabled && this.recordingMode === 'session') {
      throw new Error('Replay recording is already in progress');
    }

    if (this._isEnabled && this.recordingMode === 'buffer') {
      throw new Error('Replay buffering is in progress, call `flush()` to save the replay');
    }

    const previousSessionId = this.session && this.session.id;

    const { session } = getSession({
      timeouts: this.timeouts,
      stickySession: Boolean(this._options.stickySession),
      currentSession: this.session,
      // This is intentional: create a new session-based replay when calling `start()`
      sessionSampleRate: 1,
      allowBuffering: false,
    });

    session.previousSessionId = previousSessionId;
    this.session = session;

    this._initializeRecording();
  }

  /**
   * Start replay buffering. Buffers until `flush()` is called or, if
   * `replaysOnErrorSampleRate` > 0, an error occurs.
   */
   startBuffering() {
    if (this._isEnabled) {
      throw new Error('Replay recording is already in progress');
    }

    const previousSessionId = this.session && this.session.id;

    const { session } = getSession({
      timeouts: this.timeouts,
      stickySession: Boolean(this._options.stickySession),
      currentSession: this.session,
      sessionSampleRate: 0,
      allowBuffering: true,
    });

    session.previousSessionId = previousSessionId;
    this.session = session;

    this.recordingMode = 'buffer';
    this._initializeRecording();
  }

  /**
   * Start recording.
   *
   * Note that this will cause a new DOM checkout
   */
   startRecording() {
    try {
      this._stopRecording = record({
        ...this._recordingOptions,
        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`
        // Without this, it would record forever, until an error happens, which we don't want
        // instead, we'll always keep the last 60 seconds of replay before an error happened
        ...(this.recordingMode === 'buffer' && { checkoutEveryNms: BUFFER_CHECKOUT_TIME }),
        emit: getHandleRecordingEmit(this),
        onMutation: this._onMutationHandler,
      });
    } catch (err) {
      this._handleException(err);
    }
  }

  /**
   * Stops the recording, if it was running.
   *
   * Returns true if it was previously stopped, or is now stopped,
   * otherwise false.
   */
   stopRecording() {
    try {
      if (this._stopRecording) {
        this._stopRecording();
        this._stopRecording = undefined;
      }

      return true;
    } catch (err) {
      this._handleException(err);
      return false;
    }
  }

  /**
   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK
   * does not support a teardown
   */
   async stop(reason) {
    if (!this._isEnabled) {
      return;
    }

    try {
      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
        const msg = `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`;

        // When `traceInternals` is enabled, we want to log this to the console
        // Else, use the regular debug output
        // eslint-disable-next-line
        const log = this.getOptions()._experiments.traceInternals ? console.warn : _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log;
        log(msg);
      }

      // We can't move `_isEnabled` after awaiting a flush, otherwise we can
      // enter into an infinite loop when `stop()` is called while flushing.
      this._isEnabled = false;
      this._removeListeners();
      this.stopRecording();

      this._debouncedFlush.cancel();
      // See comment above re: `_isEnabled`, we "force" a flush, ignoring the
      // `_isEnabled` state of the plugin since it was disabled above.
      await this._flush({ force: true });

      // After flush, destroy event buffer
      this.eventBuffer && this.eventBuffer.destroy();
      this.eventBuffer = null;

      // Clear session from session storage, note this means if a new session
      // is started after, it will not have `previousSessionId`
      clearSession(this);
    } catch (err) {
      this._handleException(err);
    }
  }

  /**
   * Pause some replay functionality. See comments for `_isPaused`.
   * This differs from stop as this only stops DOM recording, it is
   * not as thorough of a shutdown as `stop()`.
   */
   pause() {
    this._isPaused = true;
    this.stopRecording();
  }

  /**
   * Resumes recording, see notes for `pause().
   *
   * Note that calling `startRecording()` here will cause a
   * new DOM checkout.`
   */
   resume() {
    if (!this._loadAndCheckSession()) {
      return;
    }

    this._isPaused = false;
    this.startRecording();
  }

  /**
   * If not in "session" recording mode, flush event buffer which will create a new replay.
   * Unless `continueRecording` is false, the replay will continue to record and
   * behave as a "session"-based replay.
   *
   * Otherwise, queue up a flush.
   */
   async sendBufferedReplayOrFlush({ continueRecording = true } = {}) {
    if (this.recordingMode === 'session') {
      return this.flushImmediate();
    }

    // Allow flush to complete before resuming as a session recording, otherwise
    // the checkout from `startRecording` may be included in the payload.
    // Prefer to keep the error replay as a separate (and smaller) segment
    // than the session replay.
    await this.flushImmediate();

    const hasStoppedRecording = this.stopRecording();

    if (!continueRecording || !hasStoppedRecording) {
      return;
    }

    // Re-start recording, but in "session" recording mode

    // Reset all "capture on error" configuration before
    // starting a new recording
    this.recordingMode = 'session';

    // Once this session ends, we do not want to refresh it
    if (this.session) {
      this.session.shouldRefresh = false;
      this._maybeSaveSession();
    }

    this.startRecording();
  }

  /**
   * We want to batch uploads of replay events. Save events only if
   * `<flushMinDelay>` milliseconds have elapsed since the last event
   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.
   *
   * Accepts a callback to perform side-effects and returns true to stop batch
   * processing and hand back control to caller.
   */
   addUpdate(cb) {
    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)
    const cbResult = cb();

    // If this option is turned on then we will only want to call `flush`
    // explicitly
    if (this.recordingMode === 'buffer') {
      return;
    }

    // If callback is true, we do not want to continue with flushing -- the
    // caller will need to handle it.
    if (cbResult === true) {
      return;
    }

    // addUpdate is called quite frequently - use _debouncedFlush so that it
    // respects the flush delays and does not flush immediately
    this._debouncedFlush();
  }

  /**
   * Updates the user activity timestamp and resumes recording. This should be
   * called in an event handler for a user action that we consider as the user
   * being "active" (e.g. a mouse click).
   */
   triggerUserActivity() {
    this._updateUserActivity();

    // This case means that recording was once stopped due to inactivity.
    // Ensure that recording is resumed.
    if (!this._stopRecording) {
      // Create a new session, otherwise when the user action is flushed, it
      // will get rejected due to an expired session.
      if (!this._loadAndCheckSession()) {
        return;
      }

      // Note: This will cause a new DOM checkout
      this.resume();
      return;
    }

    // Otherwise... recording was never suspended, continue as normalish
    this.checkAndHandleExpiredSession();

    this._updateSessionActivity();
  }

  /**
   *
   * Always flush via `_debouncedFlush` so that we do not have flushes triggered
   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be
   * cases of mulitple flushes happening closely together.
   */
   flushImmediate() {
    this._debouncedFlush();
    // `.flush` is provided by the debounced function, analogously to lodash.debounce
    return this._debouncedFlush.flush() ;
  }

  /** Get the current sesion (=replay) ID */
   getSessionId() {
    return this.session && this.session.id;
  }

  /**
   * Checks if recording should be stopped due to user inactivity. Otherwise
   * check if session is expired and create a new session if so. Triggers a new
   * full snapshot on new session.
   *
   * Returns true if session is not expired, false otherwise.
   * @hidden
   */
   checkAndHandleExpiredSession() {
    const oldSessionId = this.getSessionId();

    // Prevent starting a new session if the last user activity is older than
    // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new
    // session+recording. This creates noisy replays that do not have much
    // content in them.
    if (
      this._lastActivity &&
      isExpired(this._lastActivity, this.timeouts.sessionIdlePause) &&
      this.session &&
      this.session.sampled === 'session'
    ) {
      // Pause recording only for session-based replays. Otherwise, resuming
      // will create a new replay and will conflict with users who only choose
      // to record error-based replays only. (e.g. the resumed replay will not
      // contain a reference to an error)
      this.pause();
      return;
    }

    // --- There is recent user activity --- //
    // This will create a new session if expired, based on expiry length
    if (!this._loadAndCheckSession()) {
      return;
    }

    // Session was expired if session ids do not match
    const expired = oldSessionId !== this.getSessionId();

    if (!expired) {
      return true;
    }

    // Session is expired, trigger a full snapshot (which will create a new session)
    this._triggerFullSnapshot();

    return false;
  }

  /**
   * Capture some initial state that can change throughout the lifespan of the
   * replay. This is required because otherwise they would be captured at the
   * first flush.
   */
   setInitialState() {
    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;
    const url = `${WINDOW.location.origin}${urlPath}`;

    this.performanceEvents = [];

    // Reset _context as well
    this._clearContext();

    this._context.initialUrl = url;
    this._context.initialTimestamp = Date.now();
    this._context.urls.push(url);
  }

  /**
   * Initialize and start all listeners to varying events (DOM,
   * Performance Observer, Recording, Sentry SDK, etc)
   */
   _initializeRecording() {
    this.setInitialState();

    // this method is generally called on page load or manually - in both cases
    // we should treat it as an activity
    this._updateSessionActivity();

    this.eventBuffer = createEventBuffer({
      useCompression: this._options.useCompression,
    });

    this._removeListeners();
    this._addListeners();

    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout
    this._isEnabled = true;

    this.startRecording();
  }

  /** A wrapper to conditionally capture exceptions. */
   _handleException(error) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay]', error);

    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && this._options._experiments && this._options._experiments.captureExceptions) {
      Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["captureException"])(error);
    }
  }

  /**
   * Loads (or refreshes) the current session.
   * Returns false if session is not recorded.
   */
   _loadAndCheckSession() {
    const { type, session } = getSession({
      timeouts: this.timeouts,
      stickySession: Boolean(this._options.stickySession),
      currentSession: this.session,
      sessionSampleRate: this._options.sessionSampleRate,
      allowBuffering: this._options.errorSampleRate > 0,
    });

    // If session was newly created (i.e. was not loaded from storage), then
    // enable flag to create the root replay
    if (type === 'new') {
      this.setInitialState();
    }

    const currentSessionId = this.getSessionId();
    if (session.id !== currentSessionId) {
      session.previousSessionId = currentSessionId;
    }

    this.session = session;

    if (!this.session.sampled) {
      void this.stop('session unsampled');
      return false;
    }

    return true;
  }

  /**
   * Adds listeners to record events for the replay
   */
   _addListeners() {
    try {
      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);
      WINDOW.addEventListener('blur', this._handleWindowBlur);
      WINDOW.addEventListener('focus', this._handleWindowFocus);

      // There is no way to remove these listeners, so ensure they are only added once
      if (!this._hasInitializedCoreListeners) {
        addGlobalListeners(this);

        this._hasInitializedCoreListeners = true;
      }
    } catch (err) {
      this._handleException(err);
    }

    // PerformanceObserver //
    if (!('PerformanceObserver' in WINDOW)) {
      return;
    }

    this._performanceObserver = setupPerformanceObserver(this);
  }

  /**
   * Cleans up listeners that were created in `_addListeners`
   */
   _removeListeners() {
    try {
      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);

      WINDOW.removeEventListener('blur', this._handleWindowBlur);
      WINDOW.removeEventListener('focus', this._handleWindowFocus);

      if (this._performanceObserver) {
        this._performanceObserver.disconnect();
        this._performanceObserver = null;
      }
    } catch (err) {
      this._handleException(err);
    }
  }

  /**
   * Handle when visibility of the page content changes. Opening a new tab will
   * cause the state to change to hidden because of content of current page will
   * be hidden. Likewise, moving a different window to cover the contents of the
   * page will also trigger a change to a hidden state.
   */
   __init13() {this._handleVisibilityChange = () => {
    if (WINDOW.document.visibilityState === 'visible') {
      this._doChangeToForegroundTasks();
    } else {
      this._doChangeToBackgroundTasks();
    }
  };}

  /**
   * Handle when page is blurred
   */
   __init14() {this._handleWindowBlur = () => {
    const breadcrumb = createBreadcrumb({
      category: 'ui.blur',
    });

    // Do not count blur as a user action -- it's part of the process of them
    // leaving the page
    this._doChangeToBackgroundTasks(breadcrumb);
  };}

  /**
   * Handle when page is focused
   */
   __init15() {this._handleWindowFocus = () => {
    const breadcrumb = createBreadcrumb({
      category: 'ui.focus',
    });

    // Do not count focus as a user action -- instead wait until they focus and
    // interactive with page
    this._doChangeToForegroundTasks(breadcrumb);
  };}

  /**
   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)
   */
   _doChangeToBackgroundTasks(breadcrumb) {
    if (!this.session) {
      return;
    }

    const expired = isSessionExpired(this.session, this.timeouts);

    if (breadcrumb && !expired) {
      this._createCustomBreadcrumb(breadcrumb);
    }

    // Send replay when the page/tab becomes hidden. There is no reason to send
    // replay if it becomes visible, since no actions we care about were done
    // while it was hidden
    this._conditionalFlush();
  }

  /**
   * Tasks to run when we consider a page to be visible (via focus and/or visibility)
   */
   _doChangeToForegroundTasks(breadcrumb) {
    if (!this.session) {
      return;
    }

    const isSessionActive = this.checkAndHandleExpiredSession();

    if (!isSessionActive) {
      // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION
      // ms, we will re-use the existing session, otherwise create a new
      // session
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Document has become active, but session has expired');
      return;
    }

    if (breadcrumb) {
      this._createCustomBreadcrumb(breadcrumb);
    }
  }

  /**
   * Trigger rrweb to take a full snapshot which will cause this plugin to
   * create a new Replay event.
   */
   _triggerFullSnapshot(checkout = true) {
    try {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].log('[Replay] Taking full rrweb snapshot');
      record.takeFullSnapshot(checkout);
    } catch (err) {
      this._handleException(err);
    }
  }

  /**
   * Update user activity (across session lifespans)
   */
   _updateUserActivity(_lastActivity = Date.now()) {
    this._lastActivity = _lastActivity;
  }

  /**
   * Updates the session's last activity timestamp
   */
   _updateSessionActivity(_lastActivity = Date.now()) {
    if (this.session) {
      this.session.lastActivity = _lastActivity;
      this._maybeSaveSession();
    }
  }

  /**
   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb
   */
   _createCustomBreadcrumb(breadcrumb) {
    this.addUpdate(() => {
      void addEvent(this, {
        type: EventType.Custom,
        timestamp: breadcrumb.timestamp || 0,
        data: {
          tag: 'breadcrumb',
          payload: breadcrumb,
        },
      });
    });
  }

  /**
   * Observed performance events are added to `this.performanceEvents`. These
   * are included in the replay event before it is finished and sent to Sentry.
   */
   _addPerformanceEntries() {
    // Copy and reset entries before processing
    const entries = [...this.performanceEvents];
    this.performanceEvents = [];

    return Promise.all(createPerformanceSpans(this, createPerformanceEntries(entries)));
  }

  /**
   * Only flush if `this.recordingMode === 'session'`
   */
   _conditionalFlush() {
    if (this.recordingMode === 'buffer') {
      return;
    }

    void this.flushImmediate();
  }

  /**
   * Clear _context
   */
   _clearContext() {
    // XXX: `initialTimestamp` and `initialUrl` do not get cleared
    this._context.errorIds.clear();
    this._context.traceIds.clear();
    this._context.urls = [];
    this._context.earliestEvent = null;
  }

  /**
   * Return and clear _context
   */
   _popEventContext() {
    if (this._context.earliestEvent && this._context.earliestEvent < this._context.initialTimestamp) {
      this._context.initialTimestamp = this._context.earliestEvent;
    }

    const _context = {
      initialTimestamp: this._context.initialTimestamp,
      initialUrl: this._context.initialUrl,
      errorIds: Array.from(this._context.errorIds).filter(Boolean),
      traceIds: Array.from(this._context.traceIds).filter(Boolean),
      urls: this._context.urls,
    };

    this._clearContext();

    return _context;
  }

  /**
   * Flushes replay event buffer to Sentry.
   *
   * Performance events are only added right before flushing - this is
   * due to the buffered performance observer events.
   *
   * Should never be called directly, only by `flush`
   */
   async _runFlush() {
    if (!this.session || !this.eventBuffer) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay] No session or eventBuffer found to flush.');
      return;
    }

    await this._addPerformanceEntries();

    // Check eventBuffer again, as it could have been stopped in the meanwhile
    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {
      return;
    }

    // Only attach memory event if eventBuffer is not empty
    await addMemoryEntry(this);

    // Check eventBuffer again, as it could have been stopped in the meanwhile
    if (!this.eventBuffer) {
      return;
    }

    try {
      // Note this empties the event buffer regardless of outcome of sending replay
      const recordingData = await this.eventBuffer.finish();

      // NOTE: Copy values from instance members, as it's possible they could
      // change before the flush finishes.
      const replayId = this.session.id;
      const eventContext = this._popEventContext();
      // Always increment segmentId regardless of outcome of sending replay
      const segmentId = this.session.segmentId++;
      this._maybeSaveSession();

      await sendReplay({
        replayId,
        recordingData,
        segmentId,
        eventContext,
        session: this.session,
        options: this.getOptions(),
        timestamp: Date.now(),
      });
    } catch (err) {
      this._handleException(err);

      // This means we retried 3 times and all of them failed,
      // or we ran into a problem we don't want to retry, like rate limiting.
      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments
      void this.stop('sendReplay');

      const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();

      if (client) {
        client.recordDroppedEvent('send_error', 'replay');
      }
    }
  }

  /**
   * Flush recording data to Sentry. Creates a lock so that only a single flush
   * can be active at a time. Do not call this directly.
   */
   __init16() {this._flush = async ({
    force = false,
  }

 = {}) => {
    if (!this._isEnabled && !force) {
      // This can happen if e.g. the replay was stopped because of exceeding the retry limit
      return;
    }

    if (!this.checkAndHandleExpiredSession()) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay] Attempting to finish replay event after session expired.');
      return;
    }

    if (!this.session) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error('[Replay] No session found to flush.');
      return;
    }

    // A flush is about to happen, cancel any queued flushes
    this._debouncedFlush.cancel();

    // this._flushLock acts as a lock so that future calls to `_flush()`
    // will be blocked until this promise resolves
    if (!this._flushLock) {
      this._flushLock = this._runFlush();
      await this._flushLock;
      this._flushLock = null;
      return;
    }

    // Wait for previous flush to finish, then call the debounced `_flush()`.
    // It's possible there are other flush requests queued and waiting for it
    // to resolve. We want to reduce all outstanding requests (as well as any
    // new flush requests that occur within a second of the locked flush
    // completing) into a single flush.

    try {
      await this._flushLock;
    } catch (err) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__["logger"].error(err);
    } finally {
      this._debouncedFlush();
    }
  };}

  /** Save the session, if it is sticky */
   _maybeSaveSession() {
    if (this.session && this._options.stickySession) {
      saveSession(this.session);
    }
  }

  /** Handler for rrweb.record.onMutation */
   __init17() {this._onMutationHandler = (mutations) => {
    const count = mutations.length;

    const mutationLimit = this._options._experiments.mutationLimit || 0;
    const mutationBreadcrumbLimit = this._options._experiments.mutationBreadcrumbLimit || 1000;
    const overMutationLimit = mutationLimit && count > mutationLimit;

    // Create a breadcrumb if a lot of mutations happen at the same time
    // We can show this in the UI as an information with potential performance improvements
    if (count > mutationBreadcrumbLimit || overMutationLimit) {
      const breadcrumb = createBreadcrumb({
        category: 'replay.mutations',
        data: {
          count,
        },
      });
      this._createCustomBreadcrumb(breadcrumb);
    }

    if (overMutationLimit) {
      // We want to skip doing an incremental snapshot if there are too many mutations
      // Instead, we do a full snapshot
      this._triggerFullSnapshot(false);
      return false;
    }

    // `true` means we use the regular mutation handling by rrweb
    return true;
  };}
}

function getOption(
  selectors,
  defaultSelectors,
  deprecatedClassOption,
  deprecatedSelectorOption,
) {
  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];

  const allSelectors = [
    ...selectors,
    // @deprecated
    ...deprecatedSelectors,

    // sentry defaults
    ...defaultSelectors,
  ];

  // @deprecated
  if (typeof deprecatedClassOption !== 'undefined') {
    // NOTE: No support for RegExp
    if (typeof deprecatedClassOption === 'string') {
      allSelectors.push(`.${deprecatedClassOption}`);
    }

    // eslint-disable-next-line no-console
    console.warn(
      '[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.',
    );
  }

  return allSelectors.join(',');
}

/**
 * Returns privacy related configuration for use in rrweb
 */
function getPrivacyOptions({
  mask,
  unmask,
  block,
  unblock,
  ignore,

  // eslint-disable-next-line deprecation/deprecation
  blockClass,
  // eslint-disable-next-line deprecation/deprecation
  blockSelector,
  // eslint-disable-next-line deprecation/deprecation
  maskTextClass,
  // eslint-disable-next-line deprecation/deprecation
  maskTextSelector,
  // eslint-disable-next-line deprecation/deprecation
  ignoreClass,
}) {
  const defaultBlockedElements = ['base[href="/"]'];

  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);
  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);

  const options = {
    // We are making the decision to make text and input selectors the same
    maskTextSelector: maskSelector,
    unmaskTextSelector: unmaskSelector,
    maskInputSelector: maskSelector,
    unmaskInputSelector: unmaskSelector,

    blockSelector: getOption(
      block,
      ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements],
      blockClass,
      blockSelector,
    ),
    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),
    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type="file"]'], ignoreClass),
  };

  if (blockClass instanceof RegExp) {
    options.blockClass = blockClass;
  }

  if (maskTextClass instanceof RegExp) {
    options.maskTextClass = maskTextClass;
  }

  return options;
}

/**
 * Returns true if we are in the browser.
 */
function isBrowser() {
  // eslint-disable-next-line no-restricted-globals
  return typeof window !== 'undefined' && (!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["isNodeEnv"])() || isElectronNodeRenderer());
}

// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them
function isElectronNodeRenderer() {
  return typeof process !== 'undefined' && (process ).type === 'renderer';
}

const MEDIA_SELECTORS =
  'img,image,svg,video,object,picture,embed,map,audio,link[rel="icon"],link[rel="apple-touch-icon"]';

const DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];

let _initialized = false;

/**
 * The main replay integration class, to be passed to `init({  integrations: [] })`.
 */
class Replay  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'Replay';}

  /**
   * @inheritDoc
   */
   __init() {this.name = Replay.id;}

  /**
   * Options to pass to `rrweb.record()`
   */

  /**
   * Initial options passed to the replay integration, merged with default values.
   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they
   * can only be finally set when setupOnce() is called.
   *
   * @private
   */

   constructor({
    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,
    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,
    stickySession = true,
    useCompression = true,
    _experiments = {},
    sessionSampleRate,
    errorSampleRate,
    maskAllText = true,
    maskAllInputs = true,
    blockAllMedia = true,

    networkDetailAllowUrls = [],
    networkCaptureBodies = true,
    networkRequestHeaders = [],
    networkResponseHeaders = [],

    mask = [],
    unmask = [],
    block = [],
    unblock = [],
    ignore = [],
    maskFn,

    // eslint-disable-next-line deprecation/deprecation
    blockClass,
    // eslint-disable-next-line deprecation/deprecation
    blockSelector,
    // eslint-disable-next-line deprecation/deprecation
    maskInputOptions,
    // eslint-disable-next-line deprecation/deprecation
    maskTextClass,
    // eslint-disable-next-line deprecation/deprecation
    maskTextSelector,
    // eslint-disable-next-line deprecation/deprecation
    ignoreClass,
  } = {}) {Replay.prototype.__init.call(this);
    this._recordingOptions = {
      maskAllInputs,
      maskAllText,
      maskInputOptions: { ...(maskInputOptions || {}), password: true },
      maskTextFn: maskFn,
      maskInputFn: maskFn,

      ...getPrivacyOptions({
        mask,
        unmask,
        block,
        unblock,
        ignore,
        blockClass,
        blockSelector,
        maskTextClass,
        maskTextSelector,
        ignoreClass,
      }),

      // Our defaults
      slimDOMOptions: 'all',
      inlineStylesheet: true,
      // Disable inline images as it will increase segment/replay size
      inlineImages: false,
      // collect fonts, but be aware that `sentry.io` needs to be an allowed
      // origin for playback
      collectFonts: true,
    };

    this._initialOptions = {
      flushMinDelay,
      flushMaxDelay,
      stickySession,
      sessionSampleRate,
      errorSampleRate,
      useCompression,
      blockAllMedia,
      networkDetailAllowUrls,
      networkCaptureBodies,
      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),
      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),

      _experiments,
    };

    if (typeof sessionSampleRate === 'number') {
      // eslint-disable-next-line
      console.warn(
        `[Replay] You are passing \`sessionSampleRate\` to the Replay integration.
This option is deprecated and will be removed soon.
Instead, configure \`replaysSessionSampleRate\` directly in the SDK init options, e.g.:
Sentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`,
      );

      this._initialOptions.sessionSampleRate = sessionSampleRate;
    }

    if (typeof errorSampleRate === 'number') {
      // eslint-disable-next-line
      console.warn(
        `[Replay] You are passing \`errorSampleRate\` to the Replay integration.
This option is deprecated and will be removed soon.
Instead, configure \`replaysOnErrorSampleRate\` directly in the SDK init options, e.g.:
Sentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`,
      );

      this._initialOptions.errorSampleRate = errorSampleRate;
    }

    if (this._initialOptions.blockAllMedia) {
      // `blockAllMedia` is a more user friendly option to configure blocking
      // embedded media elements
      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector
        ? MEDIA_SELECTORS
        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;
    }

    if (this._isInitialized && isBrowser()) {
      throw new Error('Multiple Sentry Session Replay instances are not supported');
    }

    this._isInitialized = true;
  }

  /** If replay has already been initialized */
   get _isInitialized() {
    return _initialized;
  }

  /** Update _isInitialized */
   set _isInitialized(value) {
    _initialized = value;
  }

  /**
   * Setup and initialize replay container
   */
   setupOnce() {
    if (!isBrowser()) {
      return;
    }

    this._setup();

    // Once upon a time, we tried to create a transaction in `setupOnce` and it would
    // potentially create a transaction before some native SDK integrations have run
    // and applied their own global event processor. An example is:
    // https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts
    //
    // So we call `this._initialize()` in next event loop as a workaround to wait for other
    // global event processors to finish. This is no longer needed, but keeping it
    // here to avoid any future issues.
    setTimeout(() => this._initialize());
  }

  /**
   * Start a replay regardless of sampling rate. Calling this will always
   * create a new session. Will throw an error if replay is already in progress.
   *
   * Creates or loads a session, attaches listeners to varying events (DOM,
   * PerformanceObserver, Recording, Sentry SDK, etc)
   */
   start() {
    if (!this._replay) {
      return;
    }

    this._replay.start();
  }

  /**
   * Start replay buffering. Buffers until `flush()` is called or, if
   * `replaysOnErrorSampleRate` > 0, until an error occurs.
   */
   startBuffering() {
    if (!this._replay) {
      return;
    }

    this._replay.startBuffering();
  }

  /**
   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK
   * does not support a teardown
   */
   stop() {
    if (!this._replay) {
      return Promise.resolve();
    }

    return this._replay.stop();
  }

  /**
   * If not in "session" recording mode, flush event buffer which will create a new replay.
   * Unless `continueRecording` is false, the replay will continue to record and
   * behave as a "session"-based replay.
   *
   * Otherwise, queue up a flush.
   */
   flush(options) {
    if (!this._replay || !this._replay.isEnabled()) {
      return Promise.resolve();
    }

    return this._replay.sendBufferedReplayOrFlush(options);
  }

  /**
   * Get the current session ID.
   */
   getReplayId() {
    if (!this._replay || !this._replay.isEnabled()) {
      return;
    }

    return this._replay.getSessionId();
  }
  /**
   * Initializes replay.
   */
   _initialize() {
    if (!this._replay) {
      return;
    }

    this._replay.initializeSampling();
  }

  /** Setup the integration. */
   _setup() {
    // Client is not available in constructor, so we need to wait until setupOnce
    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);

    this._replay = new ReplayContainer({
      options: finalOptions,
      recordingOptions: this._recordingOptions,
    });
  }
} Replay.__initStatic();

/** Parse Replay-related options from SDK options */
function loadReplayOptionsFromClient(initialOptions) {
  const client = Object(_sentry_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentHub"])().getClient();
  const opt = client && (client.getOptions() );

  const finalOptions = { sessionSampleRate: 0, errorSampleRate: 0, ...Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__["dropUndefinedKeys"])(initialOptions) };

  if (!opt) {
    // eslint-disable-next-line no-console
    console.warn('SDK client is not available.');
    return finalOptions;
  }

  if (
    initialOptions.sessionSampleRate == null && // TODO remove once deprecated rates are removed
    initialOptions.errorSampleRate == null && // TODO remove once deprecated rates are removed
    opt.replaysSessionSampleRate == null &&
    opt.replaysOnErrorSampleRate == null
  ) {
    // eslint-disable-next-line no-console
    console.warn(
      'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',
    );
  }

  if (typeof opt.replaysSessionSampleRate === 'number') {
    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;
  }

  if (typeof opt.replaysOnErrorSampleRate === 'number') {
    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;
  }

  return finalOptions;
}

function _getMergedNetworkHeaders(headers) {
  return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];
}


//# sourceMappingURL=index.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/index.js ***!
  \***************************************************/
/*! exports provided: BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, IdleTransaction, Integrations, Span, SpanStatus, TRACEPARENT_REGEXP, Transaction, addExtensionMethods, defaultRequestInstrumentationOptions, extractTraceparentData, getActiveTransaction, hasTracingEnabled, instrumentOutgoingRequests, spanStatusfromHttpCode, startIdleTransaction, stripUrlQueryAndFragment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BROWSER_TRACING_INTEGRATION_ID", function() { return BROWSER_TRACING_INTEGRATION_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserTracing", function() { return BrowserTracing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IdleTransaction", function() { return IdleTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Integrations", function() { return Integrations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Span", function() { return Span; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpanStatus", function() { return SpanStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRACEPARENT_REGEXP", function() { return TRACEPARENT_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return Transaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addExtensionMethods", function() { return addExtensionMethods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultRequestInstrumentationOptions", function() { return defaultRequestInstrumentationOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return extractTraceparentData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getActiveTransaction", function() { return getActiveTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasTracingEnabled", function() { return hasTracingEnabled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "instrumentOutgoingRequests", function() { return instrumentOutgoingRequests; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanStatusfromHttpCode", function() { return spanStatusfromHttpCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startIdleTransaction", function() { return startIdleTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stripUrlQueryAndFragment", function() { return stripUrlQueryAndFragment; });
/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry-internal/tracing */ "./node_modules/@sentry-internal/tracing/esm/index.js");


// BrowserTracing is already exported as part of `Integrations` below (and for the moment will remain so for
// backwards compatibility), but that interferes with treeshaking, so we also export it separately
// here.
/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 * `BrowserTracing` can be imported from `@sentry/browser` or your framework SDK
 *
 * import { BrowserTracing } from '@sentry/browser';
 * new BrowserTracing()
 */
const BrowserTracing = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["BrowserTracing"];

// BrowserTracing is already exported as part of `Integrations` below (and for the moment will remain so for
// backwards compatibility), but that interferes with treeshaking, so we also export it separately
// here.
/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 * `BrowserTracing` can be imported from `@sentry/browser` or your framework SDK
 *
 * import { BrowserTracing } from '@sentry/browser';
 * new BrowserTracing()
 */

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
const addExtensionMethods = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["addExtensionMethods"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `getActiveTransaction` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */
const getActiveTransaction = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["getActiveTransaction"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `extractTraceparentData` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */
const extractTraceparentData = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["extractTraceparentData"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `spanStatusfromHttpCode` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */
const spanStatusfromHttpCode = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["spanStatusfromHttpCode"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `SpanStatusType` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `Transaction` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */
const Transaction = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Transaction"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `Transaction` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `Span` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */
const Span = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Span"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `Span` can be imported from `@sentry/node`, `@sentry/browser`, or your framework SDK
 */

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
const BROWSER_TRACING_INTEGRATION_ID = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["BROWSER_TRACING_INTEGRATION_ID"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `defaultRequestInstrumentationOptions` can be imported from `@sentry/browser`, or your framework SDK
 */
const defaultRequestInstrumentationOptions = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["defaultRequestInstrumentationOptions"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `hasTracingEnabled` can be imported from `@sentry/utils`
 */
const hasTracingEnabled = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["hasTracingEnabled"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `stripUrlQueryAndFragment` can be imported from `@sentry/utils`
 */
const stripUrlQueryAndFragment = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["stripUrlQueryAndFragment"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 *
 * `TRACEPARENT_REGEXP` can be imported from `@sentry/utils`
 */
const TRACEPARENT_REGEXP = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["TRACEPARENT_REGEXP"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
const IdleTransaction = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["IdleTransaction"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
const instrumentOutgoingRequests = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["instrumentOutgoingRequests"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
const startIdleTransaction = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["startIdleTransaction"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
// eslint-disable-next-line deprecation/deprecation
const SpanStatus = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["SpanStatus"];

/**
 * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
 */
// eslint-disable-next-line deprecation/deprecation

const Integrations = {
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `BrowserTracing` can be imported from `@sentry/browser` or your framework SDK
   *
   * import { BrowserTracing } from '@sentry/browser';
   * new BrowserTracing()
   */
  // eslint-disable-next-line deprecation/deprecation
  BrowserTracing: BrowserTracing,
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `Apollo` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.Apollo({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  Apollo: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Apollo"],
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `Express` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.Express({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  Express: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Express"],
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `GraphQL` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.GraphQL({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  GraphQL: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["GraphQL"],
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `Mongo` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.Mongo({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  Mongo: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Mongo"],
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `Mysql` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.Mysql({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  Mysql: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Mysql"],
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `Postgres` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.Postgres({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  Postgres: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Postgres"],
  /**
   * @deprecated `@sentry/tracing` has been deprecated and will be moved to to `@sentry/node`, `@sentry/browser`, or your framework SDK in the next major version.
   * `Prisma` can be imported from `@sentry/node`
   *
   * import { Integrations } from '@sentry/node';
   * new Integrations.Prisma({ ... })
   */
  // eslint-disable-next-line deprecation/deprecation
  Prisma: _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["Prisma"],
};

// Treeshakable guard to remove all code related to tracing

// Guard for tree
if (typeof __SENTRY_TRACING__ === 'undefined' || __SENTRY_TRACING__) {
  // We are patching the global object with our hub extension methods
  Object(_sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__["addExtensionMethods"])();
}


//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/baggage.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/baggage.js ***!
  \***************************************************/
/*! exports provided: BAGGAGE_HEADER_NAME, MAX_BAGGAGE_STRING_LENGTH, SENTRY_BAGGAGE_KEY_PREFIX, SENTRY_BAGGAGE_KEY_PREFIX_REGEX, baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BAGGAGE_HEADER_NAME", function() { return BAGGAGE_HEADER_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_BAGGAGE_STRING_LENGTH", function() { return MAX_BAGGAGE_STRING_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SENTRY_BAGGAGE_KEY_PREFIX", function() { return SENTRY_BAGGAGE_KEY_PREFIX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SENTRY_BAGGAGE_KEY_PREFIX_REGEX", function() { return SENTRY_BAGGAGE_KEY_PREFIX_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baggageHeaderToDynamicSamplingContext", function() { return baggageHeaderToDynamicSamplingContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dynamicSamplingContextToSentryBaggageHeader", function() { return dynamicSamplingContextToSentryBaggageHeader; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ "./node_modules/@sentry/utils/esm/logger.js");



const BAGGAGE_HEADER_NAME = 'baggage';

const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';

const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;

/**
 * Max length of a serialized baggage string
 *
 * https://www.w3.org/TR/baggage/#limits
 */
const MAX_BAGGAGE_STRING_LENGTH = 8192;

/**
 * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the "sentry-" prefixed values
 * from it.
 *
 * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.
 * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.
 */
function baggageHeaderToDynamicSamplingContext(
  // Very liberal definition of what any incoming header might look like
  baggageHeader,
) {
  if (!Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(baggageHeader) && !Array.isArray(baggageHeader)) {
    return undefined;
  }

  // Intermediary object to store baggage key value pairs of incoming baggage headers on.
  // It is later used to read Sentry-DSC-values from.
  let baggageObject = {};

  if (Array.isArray(baggageHeader)) {
    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it
    baggageObject = baggageHeader.reduce((acc, curr) => {
      const currBaggageObject = baggageHeaderToObject(curr);
      return {
        ...acc,
        ...currBaggageObject,
      };
    }, {});
  } else {
    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but
    // this is how we choose to handle it)
    if (!baggageHeader) {
      return undefined;
    }

    baggageObject = baggageHeaderToObject(baggageHeader);
  }

  // Read all "sentry-" prefixed values out of the baggage object and put it onto a dynamic sampling context object.
  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {
    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {
      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);
      acc[nonPrefixedKey] = value;
    }
    return acc;
  }, {});

  // Only return a dynamic sampling context object if there are keys in it.
  // A keyless object means there were no sentry values on the header, which means that there is no DSC.
  if (Object.keys(dynamicSamplingContext).length > 0) {
    return dynamicSamplingContext ;
  } else {
    return undefined;
  }
}

/**
 * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with "sentry-".
 *
 * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility
 * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is
 * `undefined` the function will return `undefined`.
 * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`
 * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.
 */
function dynamicSamplingContextToSentryBaggageHeader(
  // this also takes undefined for convenience and bundle size in other places
  dynamicSamplingContext,
) {
  // Prefix all DSC keys with "sentry-" and put them into a new object
  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce(
    (acc, [dscKey, dscValue]) => {
      if (dscValue) {
        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;
      }
      return acc;
    },
    {},
  );

  return objectToBaggageHeader(sentryPrefixedDSC);
}

/**
 * Will parse a baggage header, which is a simple key-value map, into a flat object.
 *
 * @param baggageHeader The baggage header to parse.
 * @returns a flat object containing all the key-value pairs from `baggageHeader`.
 */
function baggageHeaderToObject(baggageHeader) {
  return baggageHeader
    .split(',')
    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))
    .reduce((acc, [key, value]) => {
      acc[key] = value;
      return acc;
    }, {});
}

/**
 * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.
 *
 * @param object The object to turn into a baggage header.
 * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header
 * is not spec compliant.
 */
function objectToBaggageHeader(object) {
  if (Object.keys(object).length === 0) {
    // An empty baggage header is not spec compliant: We return undefined.
    return undefined;
  }

  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {
    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;
    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;
    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _logger_js__WEBPACK_IMPORTED_MODULE_1__["logger"].warn(
          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,
        );
      return baggageHeader;
    } else {
      return newBaggageHeader;
    }
  }, '');
}


//# sourceMappingURL=baggage.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/browser.js ***!
  \***************************************************/
/*! exports provided: getDomElement, getLocationHref, htmlTreeAsString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDomElement", function() { return getDomElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocationHref", function() { return getLocationHref; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlTreeAsString", function() { return htmlTreeAsString; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");



// eslint-disable-next-line deprecation/deprecation
const WINDOW = Object(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__["getGlobalObject"])();

const DEFAULT_MAX_STRING_LENGTH = 80;

/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */
function htmlTreeAsString(
  elem,
  options = {},
) {

  // try/catch both:
  // - accessing event.target (see getsentry/raven-js#838, #768)
  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
  // - can throw an exception in some circumstances.
  try {
    let currentElem = elem ;
    const MAX_TRAVERSE_HEIGHT = 5;
    const out = [];
    let height = 0;
    let len = 0;
    const separator = ' > ';
    const sepLength = separator.length;
    let nextStr;
    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;
    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;

    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
      nextStr = _htmlElementAsString(currentElem, keyAttrs);
      // bail out if
      // - nextStr is the 'html' element
      // - the length of the string that would be created exceeds maxStringLength
      //   (ignore this limit if we are on the first iteration)
      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {
        break;
      }

      out.push(nextStr);

      len += nextStr.length;
      currentElem = currentElem.parentNode;
    }

    return out.reverse().join(separator);
  } catch (_oO) {
    return '<unknown>';
  }
}

/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */
function _htmlElementAsString(el, keyAttrs) {
  const elem = el

;

  const out = [];
  let className;
  let classes;
  let key;
  let attr;
  let i;

  if (!elem || !elem.tagName) {
    return '';
  }

  out.push(elem.tagName.toLowerCase());

  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.
  const keyAttrPairs =
    keyAttrs && keyAttrs.length
      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])
      : null;

  if (keyAttrPairs && keyAttrPairs.length) {
    keyAttrPairs.forEach(keyAttrPair => {
      out.push(`[${keyAttrPair[0]}="${keyAttrPair[1]}"]`);
    });
  } else {
    if (elem.id) {
      out.push(`#${elem.id}`);
    }

    // eslint-disable-next-line prefer-const
    className = elem.className;
    if (className && Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(className)) {
      classes = className.split(/\s+/);
      for (i = 0; i < classes.length; i++) {
        out.push(`.${classes[i]}`);
      }
    }
  }
  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];
  for (i = 0; i < allowedAttrs.length; i++) {
    key = allowedAttrs[i];
    attr = elem.getAttribute(key);
    if (attr) {
      out.push(`[${key}="${attr}"]`);
    }
  }
  return out.join('');
}

/**
 * A safe form of location.href
 */
function getLocationHref() {
  try {
    return WINDOW.document.location.href;
  } catch (oO) {
    return '';
  }
}

/**
 * Gets a DOM element by using document.querySelector.
 *
 * This wrapper will first check for the existance of the function before
 * actually calling it so that we don't have to take care of this check,
 * every time we want to access the DOM.
 *
 * Reason: DOM/querySelector is not available in all environments.
 *
 * We have to cast to any because utils can be consumed by a variety of environments,
 * and we don't want to break TS users. If you know what element will be selected by
 * `document.querySelector`, specify it as part of the generic call. For example,
 * `const element = getDomElement<Element>('selector');`
 *
 * @param selector the selector string passed on to document.querySelector
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getDomElement(selector) {
  if (WINDOW.document && WINDOW.document.querySelector) {
    return WINDOW.document.querySelector(selector) ;
  }
  return null;
}


//# sourceMappingURL=browser.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js ***!
  \********************************************************************************/
/*! exports provided: _asyncNullishCoalesce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_asyncNullishCoalesce", function() { return _asyncNullishCoalesce; });
/* harmony import */ var _nullishCoalesce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nullishCoalesce.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js");


// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f

/**
 * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the
 * result of an async operation.
 *
 * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the
 * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param lhs The value of the expression to the left of the `??`
 * @param rhsFn A function returning the value of the expression to the right of the `??`
 * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value
 */
async function _asyncNullishCoalesce(lhs, rhsFn) {
  return Object(_nullishCoalesce_js__WEBPACK_IMPORTED_MODULE_0__["_nullishCoalesce"])(lhs, rhsFn);
}

// Sucrase version:
// async function _asyncNullishCoalesce(lhs, rhsFn) {
//   if (lhs != null) {
//     return lhs;
//   } else {
//     return await rhsFn();
//   }
// }


//# sourceMappingURL=_asyncNullishCoalesce.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChain.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChain.js ***!
  \******************************************************************************/
/*! exports provided: _asyncOptionalChain */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_asyncOptionalChain", function() { return _asyncOptionalChain; });
/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions, for situations in which at least one part of the expression is async.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See
 * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The value of the expression
 */
async function _asyncOptionalChain(ops) {
  let lastAccessLHS = undefined;
  let value = ops[0];
  let i = 1;
  while (i < ops.length) {
    const op = ops[i] ;
    const fn = ops[i + 1] ;
    i += 2;
    // by checking for loose equality to `null`, we catch both `null` and `undefined`
    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it
      return;
    }
    if (op === 'access' || op === 'optionalAccess') {
      lastAccessLHS = value;
      value = await fn(value);
    } else if (op === 'call' || op === 'optionalCall') {
      value = await fn((...args) => (value ).call(lastAccessLHS, ...args));
      lastAccessLHS = undefined;
    }
  }
  return value;
}

// Sucrase version:
// async function _asyncOptionalChain(ops) {
//   let lastAccessLHS = undefined;
//   let value = ops[0];
//   let i = 1;
//   while (i < ops.length) {
//     const op = ops[i];
//     const fn = ops[i + 1];
//     i += 2;
//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
//       return undefined;
//     }
//     if (op === 'access' || op === 'optionalAccess') {
//       lastAccessLHS = value;
//       value = await fn(value);
//     } else if (op === 'call' || op === 'optionalCall') {
//       value = await fn((...args) => value.call(lastAccessLHS, ...args));
//       lastAccessLHS = undefined;
//     }
//   }
//   return value;
// }


//# sourceMappingURL=_asyncOptionalChain.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChainDelete.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChainDelete.js ***!
  \************************************************************************************/
/*! exports provided: _asyncOptionalChainDelete */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_asyncOptionalChainDelete", function() { return _asyncOptionalChainDelete; });
/* harmony import */ var _asyncOptionalChain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_asyncOptionalChain.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChain.js");


// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f

/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions, in cases where the value of the expression is to be deleted.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See
 * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable
 * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which
 * case `false`.
 */
async function _asyncOptionalChainDelete(ops) {
  const result = (await Object(_asyncOptionalChain_js__WEBPACK_IMPORTED_MODULE_0__["_asyncOptionalChain"])(ops)) ;
  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,
  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in
  // which case we return whatever the `delete` returned, which will be a boolean.
  return result == null ? true : (result );
}

// Sucrase version:
// async function asyncOptionalChainDelete(ops) {
//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);
//   return result == null ? true : result;
// }


//# sourceMappingURL=_asyncOptionalChainDelete.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_createNamedExportFrom.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_createNamedExportFrom.js ***!
  \*********************************************************************************/
/*! exports provided: _createNamedExportFrom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_createNamedExportFrom", function() { return _createNamedExportFrom; });
/**
 * Copy a property from the given object into `exports`, under the given name.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param obj The object containing the property to copy.
 * @param localName The name under which to export the property
 * @param importedName The name under which the property lives in `obj`
 */
function _createNamedExportFrom(obj, localName, importedName) {
  exports[localName] = obj[importedName];
}

// Sucrase version:
// function _createNamedExportFrom(obj, localName, importedName) {
//   Object.defineProperty(exports, localName, {enumerable: true, get: () => obj[importedName]});
// }


//# sourceMappingURL=_createNamedExportFrom.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_createStarExport.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_createStarExport.js ***!
  \****************************************************************************/
/*! exports provided: _createStarExport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_createStarExport", function() { return _createStarExport; });
/**
 * Copy properties from an object into `exports`.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param obj The object containing the properties to copy.
 */
function _createStarExport(obj) {
  Object.keys(obj)
    .filter(key => key !== 'default' && key !== '__esModule' && !(key in exports))
    .forEach(key => (exports[key] = obj[key]));
}

// Sucrase version:
// function _createStarExport(obj) {
//   Object.keys(obj)
//     .filter(key => key !== 'default' && key !== '__esModule')
//     .forEach(key => {
//       if (exports.hasOwnProperty(key)) {
//         return;
//       }
//       Object.defineProperty(exports, key, { enumerable: true, get: () => obj[key] });
//     });
// }


//# sourceMappingURL=_createStarExport.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopDefault.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_interopDefault.js ***!
  \**************************************************************************/
/*! exports provided: _interopDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interopDefault", function() { return _interopDefault; });
/**
 * Unwraps a module if it has been wrapped in an object under the key `default`.
 *
 * Adapted from Rollup (https://github.com/rollup/rollup)
 *
 * @param requireResult The result of calling `require` on a module
 * @returns The full module, unwrapped if necessary.
 */
function _interopDefault(requireResult) {
  return requireResult.__esModule ? (requireResult.default ) : requireResult;
}

// Rollup version:
// function _interopDefault(e) {
//   return e && e.__esModule ? e['default'] : e;
// }


//# sourceMappingURL=_interopDefault.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopNamespace.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_interopNamespace.js ***!
  \****************************************************************************/
/*! exports provided: _interopNamespace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interopNamespace", function() { return _interopNamespace; });
/**
 * Adds a self-referential `default` property to CJS modules which aren't the result of transpilation from ESM modules.
 *
 * Adapted from Rollup (https://github.com/rollup/rollup)
 *
 * @param requireResult The result of calling `require` on a module
 * @returns Either `requireResult` or a copy of `requireResult` with an added self-referential `default` property
 */
function _interopNamespace(requireResult) {
  return requireResult.__esModule ? requireResult : { ...requireResult, default: requireResult };
}

// Rollup version (with `output.externalLiveBindings` and `output.freeze` both set to false)
// function _interopNamespace(e) {
//   if (e && e.__esModule) return e;
//   var n = Object.create(null);
//   if (e) {
//     for (var k in e) {
//       n[k] = e[k];
//     }
//   }
//   n["default"] = e;
//   return n;
// }


//# sourceMappingURL=_interopNamespace.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopNamespaceDefaultOnly.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_interopNamespaceDefaultOnly.js ***!
  \***************************************************************************************/
/*! exports provided: _interopNamespaceDefaultOnly */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interopNamespaceDefaultOnly", function() { return _interopNamespaceDefaultOnly; });
/**
 * Wrap a module in an object, as the value under the key `default`.
 *
 * Adapted from Rollup (https://github.com/rollup/rollup)
 *
 * @param requireResult The result of calling `require` on a module
 * @returns An object containing the key-value pair (`default`, `requireResult`)
 */
function _interopNamespaceDefaultOnly(requireResult) {
  return {
    __proto__: null,
    default: requireResult,
  };
}

// Rollup version
// function _interopNamespaceDefaultOnly(e) {
//   return {
//     __proto__: null,
//     'default': e
//   };
// }


//# sourceMappingURL=_interopNamespaceDefaultOnly.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopRequireDefault.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_interopRequireDefault.js ***!
  \*********************************************************************************/
/*! exports provided: _interopRequireDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interopRequireDefault", function() { return _interopRequireDefault; });
/**
 * Wraps modules which aren't the result of transpiling an ESM module in an object under the key `default`
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param requireResult The result of calling `require` on a module
 * @returns `requireResult` or `requireResult` wrapped in an object, keyed as `default`
 */
function _interopRequireDefault(requireResult) {
  return requireResult.__esModule ? requireResult : { default: requireResult };
}

// Sucrase version
// function _interopRequireDefault(obj) {
//   return obj && obj.__esModule ? obj : { default: obj };
// }


//# sourceMappingURL=_interopRequireDefault.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopRequireWildcard.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_interopRequireWildcard.js ***!
  \**********************************************************************************/
/*! exports provided: _interopRequireWildcard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_interopRequireWildcard", function() { return _interopRequireWildcard; });
/**
 * Adds a `default` property to CJS modules which aren't the result of transpilation from ESM modules.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param requireResult The result of calling `require` on a module
 * @returns Either `requireResult` or a copy of `requireResult` with an added self-referential `default` property
 */
function _interopRequireWildcard(requireResult) {
  return requireResult.__esModule ? requireResult : { ...requireResult, default: requireResult };
}

// Sucrase version
// function _interopRequireWildcard(obj) {
//   if (obj && obj.__esModule) {
//     return obj;
//   } else {
//     var newObj = {};
//     if (obj != null) {
//       for (var key in obj) {
//         if (Object.prototype.hasOwnProperty.call(obj, key)) {
//           newObj[key] = obj[key];
//         }
//       }
//     }
//     newObj.default = obj;
//     return newObj;
//   }
// }


//# sourceMappingURL=_interopRequireWildcard.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js ***!
  \***************************************************************************/
/*! exports provided: _nullishCoalesce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_nullishCoalesce", function() { return _nullishCoalesce; });
// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f
//
// The MIT License (MIT)
//
// Copyright (c) 2012-2018 various contributors (see AUTHORS)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/**
 * Polyfill for the nullish coalescing operator (`??`).
 *
 * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the
 * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param lhs The value of the expression to the left of the `??`
 * @param rhsFn A function returning the value of the expression to the right of the `??`
 * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value
 */
function _nullishCoalesce(lhs, rhsFn) {
  // by checking for loose equality to `null`, we catch both `null` and `undefined`
  return lhs != null ? lhs : rhsFn();
}

// Sucrase version:
// function _nullishCoalesce(lhs, rhsFn) {
//   if (lhs != null) {
//     return lhs;
//   } else {
//     return rhsFn();
//   }
// }


//# sourceMappingURL=_nullishCoalesce.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js ***!
  \*************************************************************************/
/*! exports provided: _optionalChain */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_optionalChain", function() { return _optionalChain; });
/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The value of the expression
 */
function _optionalChain(ops) {
  let lastAccessLHS = undefined;
  let value = ops[0];
  let i = 1;
  while (i < ops.length) {
    const op = ops[i] ;
    const fn = ops[i + 1] ;
    i += 2;
    // by checking for loose equality to `null`, we catch both `null` and `undefined`
    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it
      return;
    }
    if (op === 'access' || op === 'optionalAccess') {
      lastAccessLHS = value;
      value = fn(value);
    } else if (op === 'call' || op === 'optionalCall') {
      value = fn((...args) => (value ).call(lastAccessLHS, ...args));
      lastAccessLHS = undefined;
    }
  }
  return value;
}

// Sucrase version
// function _optionalChain(ops) {
//   let lastAccessLHS = undefined;
//   let value = ops[0];
//   let i = 1;
//   while (i < ops.length) {
//     const op = ops[i];
//     const fn = ops[i + 1];
//     i += 2;
//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
//       return undefined;
//     }
//     if (op === 'access' || op === 'optionalAccess') {
//       lastAccessLHS = value;
//       value = fn(value);
//     } else if (op === 'call' || op === 'optionalCall') {
//       value = fn((...args) => value.call(lastAccessLHS, ...args));
//       lastAccessLHS = undefined;
//     }
//   }
//   return value;
// }


//# sourceMappingURL=_optionalChain.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChainDelete.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChainDelete.js ***!
  \*******************************************************************************/
/*! exports provided: _optionalChainDelete */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_optionalChainDelete", function() { return _optionalChainDelete; });
/* harmony import */ var _optionalChain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_optionalChain.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js");


// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f

/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions, in cases where the value of the expression is to be deleted.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See
 * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable
 * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which
 * case `false`.
 */
function _optionalChainDelete(ops) {
  const result = Object(_optionalChain_js__WEBPACK_IMPORTED_MODULE_0__["_optionalChain"])(ops) ;
  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,
  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in
  // which case we return whatever the `delete` returned, which will be a boolean.
  return result == null ? true : result;
}

// Sucrase version:
// function _optionalChainDelete(ops) {
//   const result = _optionalChain(ops);
//   // by checking for loose equality to `null`, we catch both `null` and `undefined`
//   return result == null ? true : result;
// }


//# sourceMappingURL=_optionalChainDelete.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/buildPolyfills/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/index.js ***!
  \****************************************************************/
/*! exports provided: _asyncNullishCoalesce, _asyncOptionalChain, _asyncOptionalChainDelete, _createNamedExportFrom, _createStarExport, _interopDefault, _interopNamespace, _interopNamespaceDefaultOnly, _interopRequireDefault, _interopRequireWildcard, _nullishCoalesce, _optionalChain, _optionalChainDelete */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _asyncNullishCoalesce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_asyncNullishCoalesce.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_asyncNullishCoalesce", function() { return _asyncNullishCoalesce_js__WEBPACK_IMPORTED_MODULE_0__["_asyncNullishCoalesce"]; });

/* harmony import */ var _asyncOptionalChain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_asyncOptionalChain.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChain.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_asyncOptionalChain", function() { return _asyncOptionalChain_js__WEBPACK_IMPORTED_MODULE_1__["_asyncOptionalChain"]; });

/* harmony import */ var _asyncOptionalChainDelete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_asyncOptionalChainDelete.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_asyncOptionalChainDelete.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_asyncOptionalChainDelete", function() { return _asyncOptionalChainDelete_js__WEBPACK_IMPORTED_MODULE_2__["_asyncOptionalChainDelete"]; });

/* harmony import */ var _createNamedExportFrom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_createNamedExportFrom.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_createNamedExportFrom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_createNamedExportFrom", function() { return _createNamedExportFrom_js__WEBPACK_IMPORTED_MODULE_3__["_createNamedExportFrom"]; });

/* harmony import */ var _createStarExport_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_createStarExport.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_createStarExport.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_createStarExport", function() { return _createStarExport_js__WEBPACK_IMPORTED_MODULE_4__["_createStarExport"]; });

/* harmony import */ var _interopDefault_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_interopDefault.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopDefault.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_interopDefault", function() { return _interopDefault_js__WEBPACK_IMPORTED_MODULE_5__["_interopDefault"]; });

/* harmony import */ var _interopNamespace_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_interopNamespace.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopNamespace.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_interopNamespace", function() { return _interopNamespace_js__WEBPACK_IMPORTED_MODULE_6__["_interopNamespace"]; });

/* harmony import */ var _interopNamespaceDefaultOnly_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_interopNamespaceDefaultOnly.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopNamespaceDefaultOnly.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_interopNamespaceDefaultOnly", function() { return _interopNamespaceDefaultOnly_js__WEBPACK_IMPORTED_MODULE_7__["_interopNamespaceDefaultOnly"]; });

/* harmony import */ var _interopRequireDefault_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_interopRequireDefault.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopRequireDefault.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_interopRequireDefault", function() { return _interopRequireDefault_js__WEBPACK_IMPORTED_MODULE_8__["_interopRequireDefault"]; });

/* harmony import */ var _interopRequireWildcard_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./_interopRequireWildcard.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_interopRequireWildcard.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_interopRequireWildcard", function() { return _interopRequireWildcard_js__WEBPACK_IMPORTED_MODULE_9__["_interopRequireWildcard"]; });

/* harmony import */ var _nullishCoalesce_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./_nullishCoalesce.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_nullishCoalesce", function() { return _nullishCoalesce_js__WEBPACK_IMPORTED_MODULE_10__["_nullishCoalesce"]; });

/* harmony import */ var _optionalChain_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./_optionalChain.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_optionalChain", function() { return _optionalChain_js__WEBPACK_IMPORTED_MODULE_11__["_optionalChain"]; });

/* harmony import */ var _optionalChainDelete_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./_optionalChainDelete.js */ "./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChainDelete.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_optionalChainDelete", function() { return _optionalChainDelete_js__WEBPACK_IMPORTED_MODULE_12__["_optionalChainDelete"]; });














//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/clientreport.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/clientreport.js ***!
  \********************************************************/
/*! exports provided: createClientReportEnvelope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createClientReportEnvelope", function() { return createClientReportEnvelope; });
/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./envelope.js */ "./node_modules/@sentry/utils/esm/envelope.js");
/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./time.js */ "./node_modules/@sentry/utils/esm/time.js");



/**
 * Creates client report envelope
 * @param discarded_events An array of discard events
 * @param dsn A DSN that can be set on the header. Optional.
 */
function createClientReportEnvelope(
  discarded_events,
  dsn,
  timestamp,
) {
  const clientReportItem = [
    { type: 'client_report' },
    {
      timestamp: timestamp || Object(_time_js__WEBPACK_IMPORTED_MODULE_1__["dateTimestampInSeconds"])(),
      discarded_events,
    },
  ];
  return Object(_envelope_js__WEBPACK_IMPORTED_MODULE_0__["createEnvelope"])(dsn ? { dsn } : {}, [clientReportItem]);
}


//# sourceMappingURL=clientreport.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/dsn.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/esm/dsn.js ***!
  \***********************************************/
/*! exports provided: dsnFromString, dsnToString, makeDsn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dsnFromString", function() { return dsnFromString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dsnToString", function() { return dsnToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeDsn", function() { return makeDsn; });
/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error.js */ "./node_modules/@sentry/utils/esm/error.js");


/** Regular expression used to parse a Dsn. */
const DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;

function isValidProtocol(protocol) {
  return protocol === 'http' || protocol === 'https';
}

/**
 * Renders the string representation of this Dsn.
 *
 * By default, this will render the public representation without the password
 * component. To get the deprecated private representation, set `withPassword`
 * to true.
 *
 * @param withPassword When set to true, the password will be included.
 */
function dsnToString(dsn, withPassword = false) {
  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;
  return (
    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +
    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`
  );
}

/**
 * Parses a Dsn from a given string.
 *
 * @param str A Dsn as string
 * @returns Dsn as DsnComponents
 */
function dsnFromString(str) {
  const match = DSN_REGEX.exec(str);

  if (!match) {
    throw new _error_js__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`Invalid Sentry Dsn: ${str}`);
  }

  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);
  let path = '';
  let projectId = lastPath;

  const split = projectId.split('/');
  if (split.length > 1) {
    path = split.slice(0, -1).join('/');
    projectId = split.pop() ;
  }

  if (projectId) {
    const projectMatch = projectId.match(/^\d+/);
    if (projectMatch) {
      projectId = projectMatch[0];
    }
  }

  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });
}

function dsnFromComponents(components) {
  return {
    protocol: components.protocol,
    publicKey: components.publicKey || '',
    pass: components.pass || '',
    host: components.host,
    port: components.port || '',
    path: components.path || '',
    projectId: components.projectId,
  };
}

function validateDsn(dsn) {
  if (!(typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
    return;
  }

  const { port, projectId, protocol } = dsn;

  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];
  requiredComponents.forEach(component => {
    if (!dsn[component]) {
      throw new _error_js__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`Invalid Sentry Dsn: ${component} missing`);
    }
  });

  if (!projectId.match(/^\d+$/)) {
    throw new _error_js__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`Invalid Sentry Dsn: Invalid projectId ${projectId}`);
  }

  if (!isValidProtocol(protocol)) {
    throw new _error_js__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`Invalid Sentry Dsn: Invalid protocol ${protocol}`);
  }

  if (port && isNaN(parseInt(port, 10))) {
    throw new _error_js__WEBPACK_IMPORTED_MODULE_0__["SentryError"](`Invalid Sentry Dsn: Invalid port ${port}`);
  }

  return true;
}

/** The Sentry Dsn, identifying a Sentry instance and project. */
function makeDsn(from) {
  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);
  validateDsn(components);
  return components;
}


//# sourceMappingURL=dsn.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/env.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/esm/env.js ***!
  \***********************************************/
/*! exports provided: getSDKSource, isBrowserBundle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSDKSource", function() { return getSDKSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBrowserBundle", function() { return isBrowserBundle; });
/*
 * This module exists for optimizations in the build process through rollup and terser.  We define some global
 * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these
 * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will
 * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to
 * `logger` and preventing node-related code from appearing in browser bundles.
 *
 * Attention:
 * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by
 * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)
 * having issues tree-shaking these constants across package boundaries.
 * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want
 * users to be able to shake away expressions that it guards.
 */

/**
 * Figures out if we're building a browser bundle.
 *
 * @returns true if this is a browser bundle build.
 */
function isBrowserBundle() {
  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;
}

/**
 * Get source of SDK.
 */
function getSDKSource() {
  // @ts-ignore "npm" is injected by rollup during build process
  return "npm";
}


//# sourceMappingURL=env.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/envelope.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/envelope.js ***!
  \****************************************************/
/*! exports provided: addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addItemToEnvelope", function() { return addItemToEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAttachmentEnvelopeItem", function() { return createAttachmentEnvelopeItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEnvelope", function() { return createEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEventEnvelopeHeaders", function() { return createEventEnvelopeHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "envelopeContainsItemType", function() { return envelopeContainsItemType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "envelopeItemTypeToDataCategory", function() { return envelopeItemTypeToDataCategory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachEnvelopeItem", function() { return forEachEnvelopeItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSdkMetadataForEnvelopeHeader", function() { return getSdkMetadataForEnvelopeHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseEnvelope", function() { return parseEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeEnvelope", function() { return serializeEnvelope; });
/* harmony import */ var _dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dsn.js */ "./node_modules/@sentry/utils/esm/dsn.js");
/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalize.js */ "./node_modules/@sentry/utils/esm/normalize.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ "./node_modules/@sentry/utils/esm/object.js");




/**
 * Creates an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */
function createEnvelope(headers, items = []) {
  return [headers, items] ;
}

/**
 * Add an item to an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */
function addItemToEnvelope(envelope, newItem) {
  const [headers, items] = envelope;
  return [headers, [...items, newItem]] ;
}

/**
 * Convenience function to loop through the items and item types of an envelope.
 * (This function was mostly created because working with envelope types is painful at the moment)
 *
 * If the callback returns true, the rest of the items will be skipped.
 */
function forEachEnvelopeItem(
  envelope,
  callback,
) {
  const envelopeItems = envelope[1];

  for (const envelopeItem of envelopeItems) {
    const envelopeItemType = envelopeItem[0].type;
    const result = callback(envelopeItem, envelopeItemType);

    if (result) {
      return true;
    }
  }

  return false;
}

/**
 * Returns true if the envelope contains any of the given envelope item types
 */
function envelopeContainsItemType(envelope, types) {
  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));
}

/**
 * Encode a string to UTF8.
 */
function encodeUTF8(input, textEncoder) {
  const utf8 = textEncoder || new TextEncoder();
  return utf8.encode(input);
}

/**
 * Serializes an envelope.
 */
function serializeEnvelope(envelope, textEncoder) {
  const [envHeaders, items] = envelope;

  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data
  let parts = JSON.stringify(envHeaders);

  function append(next) {
    if (typeof parts === 'string') {
      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];
    } else {
      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);
    }
  }

  for (const item of items) {
    const [itemHeaders, payload] = item;

    append(`\n${JSON.stringify(itemHeaders)}\n`);

    if (typeof payload === 'string' || payload instanceof Uint8Array) {
      append(payload);
    } else {
      let stringifiedPayload;
      try {
        stringifiedPayload = JSON.stringify(payload);
      } catch (e) {
        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still
        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a
        // performance impact but in this case a performance hit is better than throwing.
        stringifiedPayload = JSON.stringify(Object(_normalize_js__WEBPACK_IMPORTED_MODULE_1__["normalize"])(payload));
      }
      append(stringifiedPayload);
    }
  }

  return typeof parts === 'string' ? parts : concatBuffers(parts);
}

function concatBuffers(buffers) {
  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);

  const merged = new Uint8Array(totalLength);
  let offset = 0;
  for (const buffer of buffers) {
    merged.set(buffer, offset);
    offset += buffer.length;
  }

  return merged;
}

/**
 * Parses an envelope
 */
function parseEnvelope(
  env,
  textEncoder,
  textDecoder,
) {
  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;

  function readBinary(length) {
    const bin = buffer.subarray(0, length);
    // Replace the buffer with the remaining data excluding trailing newline
    buffer = buffer.subarray(length + 1);
    return bin;
  }

  function readJson() {
    let i = buffer.indexOf(0xa);
    // If we couldn't find a newline, we must have found the end of the buffer
    if (i < 0) {
      i = buffer.length;
    }

    return JSON.parse(textDecoder.decode(readBinary(i))) ;
  }

  const envelopeHeader = readJson();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const items = [];

  while (buffer.length) {
    const itemHeader = readJson();
    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;

    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);
  }

  return [envelopeHeader, items];
}

/**
 * Creates attachment envelope items
 */
function createAttachmentEnvelopeItem(
  attachment,
  textEncoder,
) {
  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;

  return [
    Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["dropUndefinedKeys"])({
      type: 'attachment',
      length: buffer.length,
      filename: attachment.filename,
      content_type: attachment.contentType,
      attachment_type: attachment.attachmentType,
    }),
    buffer,
  ];
}

const ITEM_TYPE_TO_DATA_CATEGORY_MAP = {
  session: 'session',
  sessions: 'session',
  attachment: 'attachment',
  transaction: 'transaction',
  event: 'error',
  client_report: 'internal',
  user_report: 'default',
  profile: 'profile',
  replay_event: 'replay',
  replay_recording: 'replay',
  check_in: 'monitor',
};

/**
 * Maps the type of an envelope item to a data category.
 */
function envelopeItemTypeToDataCategory(type) {
  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];
}

/** Extracts the minimal SDK info from from the metadata or an events */
function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {
  if (!metadataOrEvent || !metadataOrEvent.sdk) {
    return;
  }
  const { name, version } = metadataOrEvent.sdk;
  return { name, version };
}

/**
 * Creates event envelope headers, based on event, sdk info and tunnel
 * Note: This function was extracted from the core package to make it available in Replay
 */
function createEventEnvelopeHeaders(
  event,
  sdkInfo,
  tunnel,
  dsn,
) {
  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;
  return {
    event_id: event.event_id ,
    sent_at: new Date().toISOString(),
    ...(sdkInfo && { sdk: sdkInfo }),
    ...(!!tunnel && { dsn: Object(_dsn_js__WEBPACK_IMPORTED_MODULE_0__["dsnToString"])(dsn) }),
    ...(dynamicSamplingContext && {
      trace: Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["dropUndefinedKeys"])({ ...dynamicSamplingContext }),
    }),
  };
}


//# sourceMappingURL=envelope.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/error.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/error.js ***!
  \*************************************************/
/*! exports provided: SentryError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SentryError", function() { return SentryError; });
/** An error emitted by Sentry SDKs and related utilities. */
class SentryError extends Error {
  /** Display name of this error instance. */

   constructor( message, logLevel = 'warn') {
    super(message);this.message = message;
    this.name = new.target.prototype.constructor.name;
    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line
    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes
    // instances of `SentryError` fail `obj instanceof SentryError` checks.
    Object.setPrototypeOf(this, new.target.prototype);
    this.logLevel = logLevel;
  }
}


//# sourceMappingURL=error.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/index.js ***!
  \*************************************************/
/*! exports provided: getDomElement, getLocationHref, htmlTreeAsString, dsnFromString, dsnToString, makeDsn, SentryError, GLOBAL_OBJ, getGlobalObject, getGlobalSingleton, SENTRY_XHR_DATA_KEY, addInstrumentationHandler, parseFetchArgs, isDOMError, isDOMException, isElement, isError, isErrorEvent, isEvent, isInstanceOf, isNaN, isPlainObject, isPrimitive, isRegExp, isString, isSyntheticEvent, isThenable, CONSOLE_LEVELS, consoleSandbox, logger, memoBuilder, addContextToFrame, addExceptionMechanism, addExceptionTypeValue, arrayify, checkOrSetAlreadyCaught, getEventDescription, parseSemver, uuid4, dynamicRequire, isNodeEnv, loadModule, normalize, normalizeToSize, walk, addNonEnumerableProperty, convertToPlainObject, dropUndefinedKeys, extractExceptionKeysForMessage, fill, getOriginalFunction, markFunctionWrapped, objectify, urlEncode, basename, dirname, isAbsolute, join, normalizePath, relative, resolve, makePromiseBuffer, addRequestDataToEvent, addRequestDataToTransaction, extractPathForTransaction, extractRequestData, severityFromString, severityLevelFromString, validSeverityLevels, createStackParser, getFunctionName, nodeStackLineParser, stackParserFromStackParserOptions, stripSentryFramesAndReverse, isMatchingPattern, safeJoin, snipLine, stringMatchesSomePattern, truncate, isNativeFetch, supportsDOMError, supportsDOMException, supportsErrorEvent, supportsFetch, supportsNativeFetch, supportsReferrerPolicy, supportsReportingObserver, SyncPromise, rejectedSyncPromise, resolvedSyncPromise, _browserPerformanceTimeOriginMode, browserPerformanceTimeOrigin, dateTimestampInSeconds, timestampInSeconds, timestampWithMs, usingPerformanceAPI, TRACEPARENT_REGEXP, extractTraceparentData, getSDKSource, isBrowserBundle, addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope, createClientReportEnvelope, DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits, BAGGAGE_HEADER_NAME, MAX_BAGGAGE_STRING_LENGTH, SENTRY_BAGGAGE_KEY_PREFIX, SENTRY_BAGGAGE_KEY_PREFIX_REGEX, baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader, getNumberOfUrlSegments, getSanitizedUrlString, parseUrl, stripUrlQueryAndFragment, addOrUpdateIntegration, escapeStringForRegex, supportsHistory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browser.js */ "./node_modules/@sentry/utils/esm/browser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDomElement", function() { return _browser_js__WEBPACK_IMPORTED_MODULE_0__["getDomElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getLocationHref", function() { return _browser_js__WEBPACK_IMPORTED_MODULE_0__["getLocationHref"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "htmlTreeAsString", function() { return _browser_js__WEBPACK_IMPORTED_MODULE_0__["htmlTreeAsString"]; });

/* harmony import */ var _dsn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dsn.js */ "./node_modules/@sentry/utils/esm/dsn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dsnFromString", function() { return _dsn_js__WEBPACK_IMPORTED_MODULE_1__["dsnFromString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dsnToString", function() { return _dsn_js__WEBPACK_IMPORTED_MODULE_1__["dsnToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeDsn", function() { return _dsn_js__WEBPACK_IMPORTED_MODULE_1__["makeDsn"]; });

/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error.js */ "./node_modules/@sentry/utils/esm/error.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SentryError", function() { return _error_js__WEBPACK_IMPORTED_MODULE_2__["SentryError"]; });

/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GLOBAL_OBJ", function() { return _worldwide_js__WEBPACK_IMPORTED_MODULE_3__["GLOBAL_OBJ"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getGlobalObject", function() { return _worldwide_js__WEBPACK_IMPORTED_MODULE_3__["getGlobalObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getGlobalSingleton", function() { return _worldwide_js__WEBPACK_IMPORTED_MODULE_3__["getGlobalSingleton"]; });

/* harmony import */ var _instrument_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instrument.js */ "./node_modules/@sentry/utils/esm/instrument.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SENTRY_XHR_DATA_KEY", function() { return _instrument_js__WEBPACK_IMPORTED_MODULE_4__["SENTRY_XHR_DATA_KEY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addInstrumentationHandler", function() { return _instrument_js__WEBPACK_IMPORTED_MODULE_4__["addInstrumentationHandler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseFetchArgs", function() { return _instrument_js__WEBPACK_IMPORTED_MODULE_4__["parseFetchArgs"]; });

/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDOMError", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isDOMError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDOMException", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isDOMException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isError", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isErrorEvent", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isErrorEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isEvent", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInstanceOf", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isInstanceOf"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isNaN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPlainObject", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isPlainObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPrimitive", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isPrimitive"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSyntheticEvent", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isSyntheticEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isThenable", function() { return _is_js__WEBPACK_IMPORTED_MODULE_5__["isThenable"]; });

/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./logger.js */ "./node_modules/@sentry/utils/esm/logger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CONSOLE_LEVELS", function() { return _logger_js__WEBPACK_IMPORTED_MODULE_6__["CONSOLE_LEVELS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "consoleSandbox", function() { return _logger_js__WEBPACK_IMPORTED_MODULE_6__["consoleSandbox"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return _logger_js__WEBPACK_IMPORTED_MODULE_6__["logger"]; });

/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./memo.js */ "./node_modules/@sentry/utils/esm/memo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoBuilder", function() { return _memo_js__WEBPACK_IMPORTED_MODULE_7__["memoBuilder"]; });

/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./misc.js */ "./node_modules/@sentry/utils/esm/misc.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addContextToFrame", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["addContextToFrame"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addExceptionMechanism", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["addExceptionMechanism"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addExceptionTypeValue", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["addExceptionTypeValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrayify", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["arrayify"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "checkOrSetAlreadyCaught", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["checkOrSetAlreadyCaught"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getEventDescription", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["getEventDescription"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseSemver", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["parseSemver"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "uuid4", function() { return _misc_js__WEBPACK_IMPORTED_MODULE_8__["uuid4"]; });

/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node.js */ "./node_modules/@sentry/utils/esm/node.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dynamicRequire", function() { return _node_js__WEBPACK_IMPORTED_MODULE_9__["dynamicRequire"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNodeEnv", function() { return _node_js__WEBPACK_IMPORTED_MODULE_9__["isNodeEnv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadModule", function() { return _node_js__WEBPACK_IMPORTED_MODULE_9__["loadModule"]; });

/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./normalize.js */ "./node_modules/@sentry/utils/esm/normalize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return _normalize_js__WEBPACK_IMPORTED_MODULE_10__["normalize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "normalizeToSize", function() { return _normalize_js__WEBPACK_IMPORTED_MODULE_10__["normalizeToSize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "walk", function() { return _normalize_js__WEBPACK_IMPORTED_MODULE_10__["walk"]; });

/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./object.js */ "./node_modules/@sentry/utils/esm/object.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addNonEnumerableProperty", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["addNonEnumerableProperty"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "convertToPlainObject", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["convertToPlainObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dropUndefinedKeys", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["dropUndefinedKeys"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractExceptionKeysForMessage", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["extractExceptionKeysForMessage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["fill"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOriginalFunction", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["getOriginalFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "markFunctionWrapped", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["markFunctionWrapped"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectify", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["objectify"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "urlEncode", function() { return _object_js__WEBPACK_IMPORTED_MODULE_11__["urlEncode"]; });

/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./path.js */ "./node_modules/@sentry/utils/esm/path.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basename", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["basename"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dirname", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["dirname"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isAbsolute", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["isAbsolute"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "join", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["join"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "normalizePath", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["normalizePath"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "relative", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["relative"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolve", function() { return _path_js__WEBPACK_IMPORTED_MODULE_12__["resolve"]; });

/* harmony import */ var _promisebuffer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./promisebuffer.js */ "./node_modules/@sentry/utils/esm/promisebuffer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makePromiseBuffer", function() { return _promisebuffer_js__WEBPACK_IMPORTED_MODULE_13__["makePromiseBuffer"]; });

/* harmony import */ var _requestdata_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./requestdata.js */ "./node_modules/@sentry/utils/esm/requestdata.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addRequestDataToEvent", function() { return _requestdata_js__WEBPACK_IMPORTED_MODULE_14__["addRequestDataToEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addRequestDataToTransaction", function() { return _requestdata_js__WEBPACK_IMPORTED_MODULE_14__["addRequestDataToTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractPathForTransaction", function() { return _requestdata_js__WEBPACK_IMPORTED_MODULE_14__["extractPathForTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractRequestData", function() { return _requestdata_js__WEBPACK_IMPORTED_MODULE_14__["extractRequestData"]; });

/* harmony import */ var _severity_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./severity.js */ "./node_modules/@sentry/utils/esm/severity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "severityFromString", function() { return _severity_js__WEBPACK_IMPORTED_MODULE_15__["severityFromString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "severityLevelFromString", function() { return _severity_js__WEBPACK_IMPORTED_MODULE_15__["severityLevelFromString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validSeverityLevels", function() { return _severity_js__WEBPACK_IMPORTED_MODULE_15__["validSeverityLevels"]; });

/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./stacktrace.js */ "./node_modules/@sentry/utils/esm/stacktrace.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createStackParser", function() { return _stacktrace_js__WEBPACK_IMPORTED_MODULE_16__["createStackParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFunctionName", function() { return _stacktrace_js__WEBPACK_IMPORTED_MODULE_16__["getFunctionName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nodeStackLineParser", function() { return _stacktrace_js__WEBPACK_IMPORTED_MODULE_16__["nodeStackLineParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stackParserFromStackParserOptions", function() { return _stacktrace_js__WEBPACK_IMPORTED_MODULE_16__["stackParserFromStackParserOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripSentryFramesAndReverse", function() { return _stacktrace_js__WEBPACK_IMPORTED_MODULE_16__["stripSentryFramesAndReverse"]; });

/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./string.js */ "./node_modules/@sentry/utils/esm/string.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isMatchingPattern", function() { return _string_js__WEBPACK_IMPORTED_MODULE_17__["isMatchingPattern"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "safeJoin", function() { return _string_js__WEBPACK_IMPORTED_MODULE_17__["safeJoin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "snipLine", function() { return _string_js__WEBPACK_IMPORTED_MODULE_17__["snipLine"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringMatchesSomePattern", function() { return _string_js__WEBPACK_IMPORTED_MODULE_17__["stringMatchesSomePattern"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "truncate", function() { return _string_js__WEBPACK_IMPORTED_MODULE_17__["truncate"]; });

/* harmony import */ var _supports_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./supports.js */ "./node_modules/@sentry/utils/esm/supports.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNativeFetch", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["isNativeFetch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsDOMError", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsDOMError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsDOMException", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsDOMException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsErrorEvent", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsErrorEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsFetch", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsFetch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsNativeFetch", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsNativeFetch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsReferrerPolicy", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsReferrerPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsReportingObserver", function() { return _supports_js__WEBPACK_IMPORTED_MODULE_18__["supportsReportingObserver"]; });

/* harmony import */ var _syncpromise_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./syncpromise.js */ "./node_modules/@sentry/utils/esm/syncpromise.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SyncPromise", function() { return _syncpromise_js__WEBPACK_IMPORTED_MODULE_19__["SyncPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rejectedSyncPromise", function() { return _syncpromise_js__WEBPACK_IMPORTED_MODULE_19__["rejectedSyncPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvedSyncPromise", function() { return _syncpromise_js__WEBPACK_IMPORTED_MODULE_19__["resolvedSyncPromise"]; });

/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./time.js */ "./node_modules/@sentry/utils/esm/time.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_browserPerformanceTimeOriginMode", function() { return _time_js__WEBPACK_IMPORTED_MODULE_20__["_browserPerformanceTimeOriginMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "browserPerformanceTimeOrigin", function() { return _time_js__WEBPACK_IMPORTED_MODULE_20__["browserPerformanceTimeOrigin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dateTimestampInSeconds", function() { return _time_js__WEBPACK_IMPORTED_MODULE_20__["dateTimestampInSeconds"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timestampInSeconds", function() { return _time_js__WEBPACK_IMPORTED_MODULE_20__["timestampInSeconds"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timestampWithMs", function() { return _time_js__WEBPACK_IMPORTED_MODULE_20__["timestampWithMs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "usingPerformanceAPI", function() { return _time_js__WEBPACK_IMPORTED_MODULE_20__["usingPerformanceAPI"]; });

/* harmony import */ var _tracing_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./tracing.js */ "./node_modules/@sentry/utils/esm/tracing.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TRACEPARENT_REGEXP", function() { return _tracing_js__WEBPACK_IMPORTED_MODULE_21__["TRACEPARENT_REGEXP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return _tracing_js__WEBPACK_IMPORTED_MODULE_21__["extractTraceparentData"]; });

/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./env.js */ "./node_modules/@sentry/utils/esm/env.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSDKSource", function() { return _env_js__WEBPACK_IMPORTED_MODULE_22__["getSDKSource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isBrowserBundle", function() { return _env_js__WEBPACK_IMPORTED_MODULE_22__["isBrowserBundle"]; });

/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./envelope.js */ "./node_modules/@sentry/utils/esm/envelope.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addItemToEnvelope", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["addItemToEnvelope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createAttachmentEnvelopeItem", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["createAttachmentEnvelopeItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createEnvelope", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["createEnvelope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createEventEnvelopeHeaders", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["createEventEnvelopeHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "envelopeContainsItemType", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["envelopeContainsItemType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "envelopeItemTypeToDataCategory", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["envelopeItemTypeToDataCategory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forEachEnvelopeItem", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["forEachEnvelopeItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSdkMetadataForEnvelopeHeader", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["getSdkMetadataForEnvelopeHeader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseEnvelope", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["parseEnvelope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeEnvelope", function() { return _envelope_js__WEBPACK_IMPORTED_MODULE_23__["serializeEnvelope"]; });

/* harmony import */ var _clientreport_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./clientreport.js */ "./node_modules/@sentry/utils/esm/clientreport.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createClientReportEnvelope", function() { return _clientreport_js__WEBPACK_IMPORTED_MODULE_24__["createClientReportEnvelope"]; });

/* harmony import */ var _ratelimit_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ratelimit.js */ "./node_modules/@sentry/utils/esm/ratelimit.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RETRY_AFTER", function() { return _ratelimit_js__WEBPACK_IMPORTED_MODULE_25__["DEFAULT_RETRY_AFTER"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disabledUntil", function() { return _ratelimit_js__WEBPACK_IMPORTED_MODULE_25__["disabledUntil"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isRateLimited", function() { return _ratelimit_js__WEBPACK_IMPORTED_MODULE_25__["isRateLimited"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseRetryAfterHeader", function() { return _ratelimit_js__WEBPACK_IMPORTED_MODULE_25__["parseRetryAfterHeader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "updateRateLimits", function() { return _ratelimit_js__WEBPACK_IMPORTED_MODULE_25__["updateRateLimits"]; });

/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./baggage.js */ "./node_modules/@sentry/utils/esm/baggage.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BAGGAGE_HEADER_NAME", function() { return _baggage_js__WEBPACK_IMPORTED_MODULE_26__["BAGGAGE_HEADER_NAME"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MAX_BAGGAGE_STRING_LENGTH", function() { return _baggage_js__WEBPACK_IMPORTED_MODULE_26__["MAX_BAGGAGE_STRING_LENGTH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SENTRY_BAGGAGE_KEY_PREFIX", function() { return _baggage_js__WEBPACK_IMPORTED_MODULE_26__["SENTRY_BAGGAGE_KEY_PREFIX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SENTRY_BAGGAGE_KEY_PREFIX_REGEX", function() { return _baggage_js__WEBPACK_IMPORTED_MODULE_26__["SENTRY_BAGGAGE_KEY_PREFIX_REGEX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "baggageHeaderToDynamicSamplingContext", function() { return _baggage_js__WEBPACK_IMPORTED_MODULE_26__["baggageHeaderToDynamicSamplingContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dynamicSamplingContextToSentryBaggageHeader", function() { return _baggage_js__WEBPACK_IMPORTED_MODULE_26__["dynamicSamplingContextToSentryBaggageHeader"]; });

/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./url.js */ "./node_modules/@sentry/utils/esm/url.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getNumberOfUrlSegments", function() { return _url_js__WEBPACK_IMPORTED_MODULE_27__["getNumberOfUrlSegments"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSanitizedUrlString", function() { return _url_js__WEBPACK_IMPORTED_MODULE_27__["getSanitizedUrlString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return _url_js__WEBPACK_IMPORTED_MODULE_27__["parseUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripUrlQueryAndFragment", function() { return _url_js__WEBPACK_IMPORTED_MODULE_27__["stripUrlQueryAndFragment"]; });

/* harmony import */ var _userIntegrations_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./userIntegrations.js */ "./node_modules/@sentry/utils/esm/userIntegrations.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addOrUpdateIntegration", function() { return _userIntegrations_js__WEBPACK_IMPORTED_MODULE_28__["addOrUpdateIntegration"]; });

/* harmony import */ var _vendor_escapeStringForRegex_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./vendor/escapeStringForRegex.js */ "./node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "escapeStringForRegex", function() { return _vendor_escapeStringForRegex_js__WEBPACK_IMPORTED_MODULE_29__["escapeStringForRegex"]; });

/* harmony import */ var _vendor_supportsHistory_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./vendor/supportsHistory.js */ "./node_modules/@sentry/utils/esm/vendor/supportsHistory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsHistory", function() { return _vendor_supportsHistory_js__WEBPACK_IMPORTED_MODULE_30__["supportsHistory"]; });
































//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/instrument.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/instrument.js ***!
  \******************************************************/
/*! exports provided: SENTRY_XHR_DATA_KEY, addInstrumentationHandler, parseFetchArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SENTRY_XHR_DATA_KEY", function() { return SENTRY_XHR_DATA_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addInstrumentationHandler", function() { return addInstrumentationHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFetchArgs", function() { return parseFetchArgs; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ "./node_modules/@sentry/utils/esm/logger.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ "./node_modules/@sentry/utils/esm/object.js");
/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ "./node_modules/@sentry/utils/esm/stacktrace.js");
/* harmony import */ var _supports_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./supports.js */ "./node_modules/@sentry/utils/esm/supports.js");
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");
/* harmony import */ var _vendor_supportsHistory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vendor/supportsHistory.js */ "./node_modules/@sentry/utils/esm/vendor/supportsHistory.js");








// eslint-disable-next-line deprecation/deprecation
const WINDOW = Object(_worldwide_js__WEBPACK_IMPORTED_MODULE_5__["getGlobalObject"])();

const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v2__';

/**
 * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.
 *  - Console API
 *  - Fetch API
 *  - XHR API
 *  - History API
 *  - DOM API (click/typing)
 *  - Error API
 *  - UnhandledRejection API
 */

const handlers = {};
const instrumented = {};

/** Instruments given API */
function instrument(type) {
  if (instrumented[type]) {
    return;
  }

  instrumented[type] = true;

  switch (type) {
    case 'console':
      instrumentConsole();
      break;
    case 'dom':
      instrumentDOM();
      break;
    case 'xhr':
      instrumentXHR();
      break;
    case 'fetch':
      instrumentFetch();
      break;
    case 'history':
      instrumentHistory();
      break;
    case 'error':
      instrumentError();
      break;
    case 'unhandledrejection':
      instrumentUnhandledRejection();
      break;
    default:
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && _logger_js__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('unknown instrumentation type:', type);
      return;
  }
}

/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */
function addInstrumentationHandler(type, callback) {
  handlers[type] = handlers[type] || [];
  (handlers[type] ).push(callback);
  instrument(type);
}

/** JSDoc */
function triggerHandlers(type, data) {
  if (!type || !handlers[type]) {
    return;
  }

  for (const handler of handlers[type] || []) {
    try {
      handler(data);
    } catch (e) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _logger_js__WEBPACK_IMPORTED_MODULE_1__["logger"].error(
          `Error while triggering instrumentation handler.\nType: ${type}\nName: ${Object(_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__["getFunctionName"])(handler)}\nError:`,
          e,
        );
    }
  }
}

/** JSDoc */
function instrumentConsole() {
  if (!('console' in WINDOW)) {
    return;
  }

  _logger_js__WEBPACK_IMPORTED_MODULE_1__["CONSOLE_LEVELS"].forEach(function (level) {
    if (!(level in WINDOW.console)) {
      return;
    }

    Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(WINDOW.console, level, function (originalConsoleMethod) {
      return function (...args) {
        triggerHandlers('console', { args, level });

        // this fails for some browsers. :(
        if (originalConsoleMethod) {
          originalConsoleMethod.apply(WINDOW.console, args);
        }
      };
    });
  });
}

/** JSDoc */
function instrumentFetch() {
  if (!Object(_supports_js__WEBPACK_IMPORTED_MODULE_4__["supportsNativeFetch"])()) {
    return;
  }

  Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(WINDOW, 'fetch', function (originalFetch) {
    return function (...args) {
      const { method, url } = parseFetchArgs(args);

      const handlerData = {
        args,
        fetchData: {
          method,
          url,
        },
        startTimestamp: Date.now(),
      };

      triggerHandlers('fetch', {
        ...handlerData,
      });

      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      return originalFetch.apply(WINDOW, args).then(
        (response) => {
          triggerHandlers('fetch', {
            ...handlerData,
            endTimestamp: Date.now(),
            response,
          });
          return response;
        },
        (error) => {
          triggerHandlers('fetch', {
            ...handlerData,
            endTimestamp: Date.now(),
            error,
          });
          // NOTE: If you are a Sentry user, and you are seeing this stack frame,
          //       it means the sentry.javascript SDK caught an error invoking your application code.
          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.
          throw error;
        },
      );
    };
  });
}

function hasProp(obj, prop) {
  return !!obj && typeof obj === 'object' && !!(obj )[prop];
}

function getUrlFromResource(resource) {
  if (typeof resource === 'string') {
    return resource;
  }

  if (!resource) {
    return '';
  }

  if (hasProp(resource, 'url')) {
    return resource.url;
  }

  if (resource.toString) {
    return resource.toString();
  }

  return '';
}

/**
 * Parses the fetch arguments to find the used Http method and the url of the request
 */
function parseFetchArgs(fetchArgs) {
  if (fetchArgs.length === 0) {
    return { method: 'GET', url: '' };
  }

  if (fetchArgs.length === 2) {
    const [url, options] = fetchArgs ;

    return {
      url: getUrlFromResource(url),
      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',
    };
  }

  const arg = fetchArgs[0];
  return {
    url: getUrlFromResource(arg ),
    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',
  };
}

/** JSDoc */
function instrumentXHR() {
  if (!('XMLHttpRequest' in WINDOW)) {
    return;
  }

  const xhrproto = XMLHttpRequest.prototype;

  Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(xhrproto, 'open', function (originalOpen) {
    return function ( ...args) {
      const url = args[1];
      const xhrInfo = (this[SENTRY_XHR_DATA_KEY] = {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        method: Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(args[0]) ? args[0].toUpperCase() : args[0],
        url: args[1],
        request_headers: {},
      });

      // if Sentry key appears in URL, don't capture it as a request
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      if (Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {
        this.__sentry_own_request__ = true;
      }

      const onreadystatechangeHandler = () => {
        // For whatever reason, this is not the same instance here as from the outer method
        const xhrInfo = this[SENTRY_XHR_DATA_KEY];

        if (!xhrInfo) {
          return;
        }

        if (this.readyState === 4) {
          try {
            // touching statusCode in some platforms throws
            // an exception
            xhrInfo.status_code = this.status;
          } catch (e) {
            /* do nothing */
          }

          triggerHandlers('xhr', {
            args: args ,
            endTimestamp: Date.now(),
            startTimestamp: Date.now(),
            xhr: this,
          } );
        }
      };

      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {
        Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(this, 'onreadystatechange', function (original) {
          return function ( ...readyStateArgs) {
            onreadystatechangeHandler();
            return original.apply(this, readyStateArgs);
          };
        });
      } else {
        this.addEventListener('readystatechange', onreadystatechangeHandler);
      }

      // Intercepting `setRequestHeader` to access the request headers of XHR instance.
      // This will only work for user/library defined headers, not for the default/browser-assigned headers.
      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.
      Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(this, 'setRequestHeader', function (original) {
        return function ( ...setRequestHeaderArgs) {
          const [header, value] = setRequestHeaderArgs ;

          const xhrInfo = this[SENTRY_XHR_DATA_KEY];

          if (xhrInfo) {
            xhrInfo.request_headers[header.toLowerCase()] = value;
          }

          return original.apply(this, setRequestHeaderArgs);
        };
      });

      return originalOpen.apply(this, args);
    };
  });

  Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(xhrproto, 'send', function (originalSend) {
    return function ( ...args) {
      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];
      if (sentryXhrData && args[0] !== undefined) {
        sentryXhrData.body = args[0];
      }

      triggerHandlers('xhr', {
        args,
        startTimestamp: Date.now(),
        xhr: this,
      });

      return originalSend.apply(this, args);
    };
  });
}

let lastHref;

/** JSDoc */
function instrumentHistory() {
  if (!Object(_vendor_supportsHistory_js__WEBPACK_IMPORTED_MODULE_6__["supportsHistory"])()) {
    return;
  }

  const oldOnPopState = WINDOW.onpopstate;
  WINDOW.onpopstate = function ( ...args) {
    const to = WINDOW.location.href;
    // keep track of the current URL state, as we always receive only the updated state
    const from = lastHref;
    lastHref = to;
    triggerHandlers('history', {
      from,
      to,
    });
    if (oldOnPopState) {
      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.
      // https://github.com/getsentry/sentry-javascript/issues/3344
      // https://github.com/bugsnag/bugsnag-js/issues/469
      try {
        return oldOnPopState.apply(this, args);
      } catch (_oO) {
        // no-empty
      }
    }
  };

  /** @hidden */
  function historyReplacementFunction(originalHistoryFunction) {
    return function ( ...args) {
      const url = args.length > 2 ? args[2] : undefined;
      if (url) {
        // coerce to string (this is what pushState does)
        const from = lastHref;
        const to = String(url);
        // keep track of the current URL state, as we always receive only the updated state
        lastHref = to;
        triggerHandlers('history', {
          from,
          to,
        });
      }
      return originalHistoryFunction.apply(this, args);
    };
  }

  Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(WINDOW.history, 'pushState', historyReplacementFunction);
  Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(WINDOW.history, 'replaceState', historyReplacementFunction);
}

const debounceDuration = 1000;
let debounceTimerID;
let lastCapturedEvent;

/**
 * Decide whether the current event should finish the debounce of previously captured one.
 * @param previous previously captured event
 * @param current event to be captured
 */
function shouldShortcircuitPreviousDebounce(previous, current) {
  // If there was no previous event, it should always be swapped for the new one.
  if (!previous) {
    return true;
  }

  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
  if (previous.type !== current.type) {
    return true;
  }

  try {
    // If both events have the same type, it's still possible that actions were performed on different targets.
    // e.g. 2 clicks on different buttons.
    if (previous.target !== current.target) {
      return true;
    }
  } catch (e) {
    // just accessing `target` property can throw an exception in some rare circumstances
    // see: https://github.com/getsentry/sentry-javascript/issues/838
  }

  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
  // to which an event listener was attached), we treat them as the same action, as we want to capture
  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
  return false;
}

/**
 * Decide whether an event should be captured.
 * @param event event to be captured
 */
function shouldSkipDOMEvent(event) {
  // We are only interested in filtering `keypress` events for now.
  if (event.type !== 'keypress') {
    return false;
  }

  try {
    const target = event.target ;

    if (!target || !target.tagName) {
      return true;
    }

    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body
    // e.g.tabbing through elements, hotkeys, etc.
    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
      return false;
    }
  } catch (e) {
    // just accessing `target` property can throw an exception in some rare circumstances
    // see: https://github.com/getsentry/sentry-javascript/issues/838
  }

  return true;
}

/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param handler function that will be triggered
 * @param globalListener indicates whether event was captured by the global event listener
 * @returns wrapped breadcrumb events handler
 * @hidden
 */
function makeDOMEventHandler(handler, globalListener = false) {
  return (event) => {
    // It's possible this handler might trigger multiple times for the same
    // event (e.g. event propagation through node ancestors).
    // Ignore if we've already captured that event.
    if (!event || lastCapturedEvent === event) {
      return;
    }

    // We always want to skip _some_ events.
    if (shouldSkipDOMEvent(event)) {
      return;
    }

    const name = event.type === 'keypress' ? 'input' : event.type;

    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.
    if (debounceTimerID === undefined) {
      handler({
        event: event,
        name,
        global: globalListener,
      });
      lastCapturedEvent = event;
    }
    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.
    // If that's the case, emit the previous event and store locally the newly-captured DOM event.
    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {
      handler({
        event: event,
        name,
        global: globalListener,
      });
      lastCapturedEvent = event;
    }

    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
    clearTimeout(debounceTimerID);
    debounceTimerID = WINDOW.setTimeout(() => {
      debounceTimerID = undefined;
    }, debounceDuration);
  };
}

/** JSDoc */
function instrumentDOM() {
  if (!('document' in WINDOW)) {
    return;
  }

  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
  // we instrument `addEventListener` so that we don't end up attaching this handler twice.
  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');
  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);
  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);

  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
  // guaranteed to fire at least once.)
  ['EventTarget', 'Node'].forEach((target) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const proto = (WINDOW )[target] && (WINDOW )[target].prototype;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
      return;
    }

    Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(proto, 'addEventListener', function (originalAddEventListener) {
      return function (

        type,
        listener,
        options,
      ) {
        if (type === 'click' || type == 'keypress') {
          try {
            const el = this ;
            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});
            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });

            if (!handlerForType.handler) {
              const handler = makeDOMEventHandler(triggerDOMHandler);
              handlerForType.handler = handler;
              originalAddEventListener.call(this, type, handler, options);
            }

            handlerForType.refCount++;
          } catch (e) {
            // Accessing dom properties is always fragile.
            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
          }
        }

        return originalAddEventListener.call(this, type, listener, options);
      };
    });

    Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["fill"])(
      proto,
      'removeEventListener',
      function (originalRemoveEventListener) {
        return function (

          type,
          listener,
          options,
        ) {
          if (type === 'click' || type == 'keypress') {
            try {
              const el = this ;
              const handlers = el.__sentry_instrumentation_handlers__ || {};
              const handlerForType = handlers[type];

              if (handlerForType) {
                handlerForType.refCount--;
                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.
                if (handlerForType.refCount <= 0) {
                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);
                  handlerForType.handler = undefined;
                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete
                }

                // If there are no longer any custom handlers of any type on this element, cleanup everything.
                if (Object.keys(handlers).length === 0) {
                  delete el.__sentry_instrumentation_handlers__;
                }
              }
            } catch (e) {
              // Accessing dom properties is always fragile.
              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
            }
          }

          return originalRemoveEventListener.call(this, type, listener, options);
        };
      },
    );
  });
}

let _oldOnErrorHandler = null;
/** JSDoc */
function instrumentError() {
  _oldOnErrorHandler = WINDOW.onerror;

  WINDOW.onerror = function (msg, url, line, column, error) {
    triggerHandlers('error', {
      column,
      error,
      line,
      msg,
      url,
    });

    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {
      // eslint-disable-next-line prefer-rest-params
      return _oldOnErrorHandler.apply(this, arguments);
    }

    return false;
  };

  WINDOW.onerror.__SENTRY_INSTRUMENTED__ = true;
}

let _oldOnUnhandledRejectionHandler = null;
/** JSDoc */
function instrumentUnhandledRejection() {
  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;

  WINDOW.onunhandledrejection = function (e) {
    triggerHandlers('unhandledrejection', e);

    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {
      // eslint-disable-next-line prefer-rest-params
      return _oldOnUnhandledRejectionHandler.apply(this, arguments);
    }

    return true;
  };

  WINDOW.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;
}


//# sourceMappingURL=instrument.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/is.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/utils/esm/is.js ***!
  \**********************************************/
/*! exports provided: isDOMError, isDOMException, isElement, isError, isErrorEvent, isEvent, isInstanceOf, isNaN, isPlainObject, isPrimitive, isRegExp, isString, isSyntheticEvent, isThenable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDOMError", function() { return isDOMError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDOMException", function() { return isDOMException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return isElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isError", function() { return isError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isErrorEvent", function() { return isErrorEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEvent", function() { return isEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInstanceOf", function() { return isInstanceOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNaN", function() { return isNaN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlainObject", function() { return isPlainObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPrimitive", function() { return isPrimitive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return isRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSyntheticEvent", function() { return isSyntheticEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isThenable", function() { return isThenable; });
// eslint-disable-next-line @typescript-eslint/unbound-method
const objectToString = Object.prototype.toString;

/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isError(wat) {
  switch (objectToString.call(wat)) {
    case '[object Error]':
    case '[object Exception]':
    case '[object DOMException]':
      return true;
    default:
      return isInstanceOf(wat, Error);
  }
}
/**
 * Checks whether given value is an instance of the given built-in class.
 *
 * @param wat The value to be checked
 * @param className
 * @returns A boolean representing the result.
 */
function isBuiltin(wat, className) {
  return objectToString.call(wat) === `[object ${className}]`;
}

/**
 * Checks whether given value's type is ErrorEvent
 * {@link isErrorEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isErrorEvent(wat) {
  return isBuiltin(wat, 'ErrorEvent');
}

/**
 * Checks whether given value's type is DOMError
 * {@link isDOMError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isDOMError(wat) {
  return isBuiltin(wat, 'DOMError');
}

/**
 * Checks whether given value's type is DOMException
 * {@link isDOMException}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isDOMException(wat) {
  return isBuiltin(wat, 'DOMException');
}

/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isString(wat) {
  return isBuiltin(wat, 'String');
}

/**
 * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)
 * {@link isPrimitive}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isPrimitive(wat) {
  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');
}

/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isPlainObject(wat) {
  return isBuiltin(wat, 'Object');
}

/**
 * Checks whether given value's type is an Event instance
 * {@link isEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isEvent(wat) {
  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);
}

/**
 * Checks whether given value's type is an Element instance
 * {@link isElement}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isElement(wat) {
  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);
}

/**
 * Checks whether given value's type is an regexp
 * {@link isRegExp}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isRegExp(wat) {
  return isBuiltin(wat, 'RegExp');
}

/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */
function isThenable(wat) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return Boolean(wat && wat.then && typeof wat.then === 'function');
}

/**
 * Checks whether given value's type is a SyntheticEvent
 * {@link isSyntheticEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isSyntheticEvent(wat) {
  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
}

/**
 * Checks whether given value is NaN
 * {@link isNaN}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isNaN(wat) {
  return typeof wat === 'number' && wat !== wat;
}

/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */
function isInstanceOf(wat, base) {
  try {
    return wat instanceof base;
  } catch (_e) {
    return false;
  }
}


//# sourceMappingURL=is.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/logger.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/logger.js ***!
  \**************************************************/
/*! exports provided: CONSOLE_LEVELS, consoleSandbox, logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONSOLE_LEVELS", function() { return CONSOLE_LEVELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "consoleSandbox", function() { return consoleSandbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");


/** Prefix for logging strings */
const PREFIX = 'Sentry Logger ';

const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] ;

/**
 * Temporarily disable sentry console instrumentations.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */
function consoleSandbox(callback) {
  if (!('console' in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"])) {
    return callback();
  }

  const originalConsole = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"].console ;
  const wrappedLevels = {};

  // Restore all wrapped console methods
  CONSOLE_LEVELS.forEach(level => {
    // TODO(v7): Remove this check as it's only needed for Node 6
    const originalWrappedFunc =
      originalConsole[level] && (originalConsole[level] ).__sentry_original__;
    if (level in originalConsole && originalWrappedFunc) {
      wrappedLevels[level] = originalConsole[level] ;
      originalConsole[level] = originalWrappedFunc ;
    }
  });

  try {
    return callback();
  } finally {
    // Revert restoration to wrapped state
    Object.keys(wrappedLevels).forEach(level => {
      originalConsole[level] = wrappedLevels[level ];
    });
  }
}

function makeLogger() {
  let enabled = false;
  const logger = {
    enable: () => {
      enabled = true;
    },
    disable: () => {
      enabled = false;
    },
  };

  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
    CONSOLE_LEVELS.forEach(name => {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      logger[name] = (...args) => {
        if (enabled) {
          consoleSandbox(() => {
            _worldwide_js__WEBPACK_IMPORTED_MODULE_0__["GLOBAL_OBJ"].console[name](`${PREFIX}[${name}]:`, ...args);
          });
        }
      };
    });
  } else {
    CONSOLE_LEVELS.forEach(name => {
      logger[name] = () => undefined;
    });
  }

  return logger ;
}

// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used
let logger;
if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {
  logger = Object(_worldwide_js__WEBPACK_IMPORTED_MODULE_0__["getGlobalSingleton"])('logger', makeLogger);
} else {
  logger = makeLogger();
}


//# sourceMappingURL=logger.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/memo.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/memo.js ***!
  \************************************************/
/*! exports provided: memoBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoBuilder", function() { return memoBuilder; });
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * Helper to decycle json objects
 */
function memoBuilder() {
  const hasWeakSet = typeof WeakSet === 'function';
  const inner = hasWeakSet ? new WeakSet() : [];
  function memoize(obj) {
    if (hasWeakSet) {
      if (inner.has(obj)) {
        return true;
      }
      inner.add(obj);
      return false;
    }
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (let i = 0; i < inner.length; i++) {
      const value = inner[i];
      if (value === obj) {
        return true;
      }
    }
    inner.push(obj);
    return false;
  }

  function unmemoize(obj) {
    if (hasWeakSet) {
      inner.delete(obj);
    } else {
      for (let i = 0; i < inner.length; i++) {
        if (inner[i] === obj) {
          inner.splice(i, 1);
          break;
        }
      }
    }
  }
  return [memoize, unmemoize];
}


//# sourceMappingURL=memo.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/misc.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/misc.js ***!
  \************************************************/
/*! exports provided: addContextToFrame, addExceptionMechanism, addExceptionTypeValue, arrayify, checkOrSetAlreadyCaught, getEventDescription, parseSemver, uuid4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addContextToFrame", function() { return addContextToFrame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addExceptionMechanism", function() { return addExceptionMechanism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addExceptionTypeValue", function() { return addExceptionTypeValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayify", function() { return arrayify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkOrSetAlreadyCaught", function() { return checkOrSetAlreadyCaught; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEventDescription", function() { return getEventDescription; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseSemver", function() { return parseSemver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uuid4", function() { return uuid4; });
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ "./node_modules/@sentry/utils/esm/object.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ "./node_modules/@sentry/utils/esm/string.js");
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");




/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */
function uuid4() {
  const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_2__["GLOBAL_OBJ"] ;
  const crypto = gbl.crypto || gbl.msCrypto;

  if (crypto && crypto.randomUUID) {
    return crypto.randomUUID().replace(/-/g, '');
  }

  const getRandomByte =
    crypto && crypto.getRandomValues ? () => crypto.getRandomValues(new Uint8Array(1))[0] : () => Math.random() * 16;

  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'
  return (([1e7] ) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>
    // eslint-disable-next-line no-bitwise
    ((c ) ^ ((getRandomByte() & 15) >> ((c ) / 4))).toString(16),
  );
}

function getFirstException(event) {
  return event.exception && event.exception.values ? event.exception.values[0] : undefined;
}

/**
 * Extracts either message or type+value from an event that can be used for user-facing logs
 * @returns event's description
 */
function getEventDescription(event) {
  const { message, event_id: eventId } = event;
  if (message) {
    return message;
  }

  const firstException = getFirstException(event);
  if (firstException) {
    if (firstException.type && firstException.value) {
      return `${firstException.type}: ${firstException.value}`;
    }
    return firstException.type || firstException.value || eventId || '<unknown>';
  }
  return eventId || '<unknown>';
}

/**
 * Adds exception values, type and value to an synthetic Exception.
 * @param event The event to modify.
 * @param value Value of the exception.
 * @param type Type of the exception.
 * @hidden
 */
function addExceptionTypeValue(event, value, type) {
  const exception = (event.exception = event.exception || {});
  const values = (exception.values = exception.values || []);
  const firstException = (values[0] = values[0] || {});
  if (!firstException.value) {
    firstException.value = value || '';
  }
  if (!firstException.type) {
    firstException.type = type || 'Error';
  }
}

/**
 * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.
 *
 * @param event The event to modify.
 * @param newMechanism Mechanism data to add to the event.
 * @hidden
 */
function addExceptionMechanism(event, newMechanism) {
  const firstException = getFirstException(event);
  if (!firstException) {
    return;
  }

  const defaultMechanism = { type: 'generic', handled: true };
  const currentMechanism = firstException.mechanism;
  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };

  if (newMechanism && 'data' in newMechanism) {
    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };
    firstException.mechanism.data = mergedData;
  }
}

// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
const SEMVER_REGEXP =
  /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;

/**
 * Represents Semantic Versioning object
 */

/**
 * Parses input into a SemVer interface
 * @param input string representation of a semver version
 */
function parseSemver(input) {
  const match = input.match(SEMVER_REGEXP) || [];
  const major = parseInt(match[1], 10);
  const minor = parseInt(match[2], 10);
  const patch = parseInt(match[3], 10);
  return {
    buildmetadata: match[5],
    major: isNaN(major) ? undefined : major,
    minor: isNaN(minor) ? undefined : minor,
    patch: isNaN(patch) ? undefined : patch,
    prerelease: match[4],
  };
}

/**
 * This function adds context (pre/post/line) lines to the provided frame
 *
 * @param lines string[] containing all lines
 * @param frame StackFrame that will be mutated
 * @param linesOfContext number of context lines we want to add pre/post
 */
function addContextToFrame(lines, frame, linesOfContext = 5) {
  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping
  if (frame.lineno === undefined) {
    return;
  }

  const maxLines = lines.length;
  const sourceLine = Math.max(Math.min(maxLines, frame.lineno - 1), 0);

  frame.pre_context = lines
    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)
    .map((line) => Object(_string_js__WEBPACK_IMPORTED_MODULE_1__["snipLine"])(line, 0));

  frame.context_line = Object(_string_js__WEBPACK_IMPORTED_MODULE_1__["snipLine"])(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);

  frame.post_context = lines
    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)
    .map((line) => Object(_string_js__WEBPACK_IMPORTED_MODULE_1__["snipLine"])(line, 0));
}

/**
 * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object
 * in question), and marks it captured if not.
 *
 * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and
 * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so
 * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because
 * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not
 * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This
 * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we
 * see it.
 *
 * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on
 * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent
 * object wrapper forms so that this check will always work. However, because we need to flag the exact object which
 * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification
 * must be done before the exception captured.
 *
 * @param A thrown exception to check or flag as having been seen
 * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)
 */
function checkOrSetAlreadyCaught(exception) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  if (exception && (exception ).__sentry_captured__) {
    return true;
  }

  try {
    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the
    // `ExtraErrorData` integration
    Object(_object_js__WEBPACK_IMPORTED_MODULE_0__["addNonEnumerableProperty"])(exception , '__sentry_captured__', true);
  } catch (err) {
    // `exception` is a primitive, so we can't mark it seen
  }

  return false;
}

/**
 * Checks whether the given input is already an array, and if it isn't, wraps it in one.
 *
 * @param maybeArray Input to turn into an array, if necessary
 * @returns The input, if already an array, or an array with the input as the only element, if not
 */
function arrayify(maybeArray) {
  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];
}


//# sourceMappingURL=misc.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/node-stack-trace.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/node-stack-trace.js ***!
  \************************************************************/
/*! exports provided: node */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "node", function() { return node; });
/** Node Stack line parser */
// eslint-disable-next-line complexity
function node(getModule) {
  const FILENAME_MATCH = /^\s*[-]{4,}$/;
  const FULL_MATCH = /at (?:async )?(?:(.+?)\s+\()?(?:(.+):(\d+):(\d+)?|([^)]+))\)?/;

  // eslint-disable-next-line complexity
  return (line) => {
    const lineMatch = line.match(FULL_MATCH);

    if (lineMatch) {
      let object;
      let method;
      let functionName;
      let typeName;
      let methodName;

      if (lineMatch[1]) {
        functionName = lineMatch[1];

        let methodStart = functionName.lastIndexOf('.');
        if (functionName[methodStart - 1] === '.') {
          methodStart--;
        }

        if (methodStart > 0) {
          object = functionName.slice(0, methodStart);
          method = functionName.slice(methodStart + 1);
          const objectEnd = object.indexOf('.Module');
          if (objectEnd > 0) {
            functionName = functionName.slice(objectEnd + 1);
            object = object.slice(0, objectEnd);
          }
        }
        typeName = undefined;
      }

      if (method) {
        typeName = object;
        methodName = method;
      }

      if (method === '<anonymous>') {
        methodName = undefined;
        functionName = undefined;
      }

      if (functionName === undefined) {
        methodName = methodName || '<anonymous>';
        functionName = typeName ? `${typeName}.${methodName}` : methodName;
      }

      let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];
      const isNative = lineMatch[5] === 'native';

      if (!filename && lineMatch[5] && !isNative) {
        filename = lineMatch[5];
      }

      const isInternal =
        isNative || (filename && !filename.startsWith('/') && !filename.startsWith('.') && !filename.includes(':\\'));

      // in_app is all that's not an internal Node function or a module within node_modules
      // note that isNative appears to return true even for node core libraries
      // see https://github.com/getsentry/raven-node/issues/176

      const in_app = !isInternal && filename !== undefined && !filename.includes('node_modules/');

      return {
        filename,
        module: getModule ? getModule(filename) : undefined,
        function: functionName,
        lineno: parseInt(lineMatch[3], 10) || undefined,
        colno: parseInt(lineMatch[4], 10) || undefined,
        in_app,
      };
    }

    if (line.match(FILENAME_MATCH)) {
      return {
        filename: line,
      };
    }

    return undefined;
  };
}


//# sourceMappingURL=node-stack-trace.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/node.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/node.js ***!
  \************************************************/
/*! exports provided: dynamicRequire, isNodeEnv, loadModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dynamicRequire", function() { return dynamicRequire; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNodeEnv", function() { return isNodeEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadModule", function() { return loadModule; });
/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ "./node_modules/@sentry/utils/esm/env.js");


/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 */

/**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */
function isNodeEnv() {
  // explicitly check for browser bundles as those can be optimized statically
  // by terser/rollup.
  return (
    !Object(_env_js__WEBPACK_IMPORTED_MODULE_0__["isBrowserBundle"])() &&
    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'
  );
}

/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function dynamicRequire(mod, request) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return mod.require(request);
}

/**
 * Helper for dynamically loading module that should work with linked dependencies.
 * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`
 * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during
 * build time. `require.resolve` is also not available in any other way, so we cannot create,
 * a fake helper like we do with `dynamicRequire`.
 *
 * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.
 * That is to mimic the behavior of `require.resolve` exactly.
 *
 * @param moduleName module name to require
 * @returns possibly required module
 */
function loadModule(moduleName) {
  let mod;

  try {
    mod = dynamicRequire(module, moduleName);
  } catch (e) {
    // no-empty
  }

  try {
    const { cwd } = dynamicRequire(module, 'process');
    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) ;
  } catch (e) {
    // no-empty
  }

  return mod;
}


//# sourceMappingURL=node.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../../webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./node_modules/@sentry/utils/esm/normalize.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/normalize.js ***!
  \*****************************************************/
/*! exports provided: normalize, normalizeToSize, walk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeToSize", function() { return normalizeToSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "walk", function() { return visit; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./memo.js */ "./node_modules/@sentry/utils/esm/memo.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ "./node_modules/@sentry/utils/esm/object.js");
/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ "./node_modules/@sentry/utils/esm/stacktrace.js");





/**
 * Recursively normalizes the given object.
 *
 * - Creates a copy to prevent original input mutation
 * - Skips non-enumerable properties
 * - When stringifying, calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format
 * - Translates known global objects/classes to a string representations
 * - Takes care of `Error` object serialization
 * - Optionally limits depth of final output
 * - Optionally limits number of properties/elements included in any single object/array
 *
 * @param input The object to be normalized.
 * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)
 * @param maxProperties The max number of elements or properties to be included in any single array or
 * object in the normallized output.
 * @returns A normalized version of the object, or `"**non-serializable**"` if any errors are thrown during normalization.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function normalize(input, depth = 100, maxProperties = +Infinity) {
  try {
    // since we're at the outermost level, we don't provide a key
    return visit('', input, depth, maxProperties);
  } catch (err) {
    return { ERROR: `**non-serializable** (${err})` };
  }
}

/** JSDoc */
function normalizeToSize(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  object,
  // Default Node.js REPL depth
  depth = 3,
  // 100kB, as 200kB is max payload size, so half sounds reasonable
  maxSize = 100 * 1024,
) {
  const normalized = normalize(object, depth);

  if (jsonSize(normalized) > maxSize) {
    return normalizeToSize(object, depth - 1, maxSize);
  }

  return normalized ;
}

/**
 * Visits a node to perform normalization on it
 *
 * @param key The key corresponding to the given node
 * @param value The node to be visited
 * @param depth Optional number indicating the maximum recursion depth
 * @param maxProperties Optional maximum number of properties/elements included in any single object/array
 * @param memo Optional Memo class handling decycling
 */
function visit(
  key,
  value,
  depth = +Infinity,
  maxProperties = +Infinity,
  memo = Object(_memo_js__WEBPACK_IMPORTED_MODULE_1__["memoBuilder"])(),
) {
  const [memoize, unmemoize] = memo;

  // Get the simple cases out of the way first
  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isNaN"])(value))) {
    return value ;
  }

  const stringified = stringifyValue(key, value);

  // Anything we could potentially dig into more (objects or arrays) will have come back as `"[object XXXX]"`.
  // Everything else will have already been serialized, so if we don't see that pattern, we're done.
  if (!stringified.startsWith('[object ')) {
    return stringified;
  }

  // From here on, we can assert that `value` is either an object or an array.

  // Do not normalize objects that we know have already been normalized. As a general rule, the
  // "__sentry_skip_normalization__" property should only be used sparingly and only should only be set on objects that
  // have already been normalized.
  if ((value )['__sentry_skip_normalization__']) {
    return value ;
  }

  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there
  // We keep a certain amount of depth.
  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.
  const remainingDepth =
    typeof (value )['__sentry_override_normalization_depth__'] === 'number'
      ? ((value )['__sentry_override_normalization_depth__'] )
      : depth;

  // We're also done if we've reached the max depth
  if (remainingDepth === 0) {
    // At this point we know `serialized` is a string of the form `"[object XXXX]"`. Clean it up so it's just `"[XXXX]"`.
    return stringified.replace('object ', '');
  }

  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.
  if (memoize(value)) {
    return '[Circular ~]';
  }

  // If the value has a `toJSON` method, we call it to extract more information
  const valueWithToJSON = value ;
  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {
    try {
      const jsonValue = valueWithToJSON.toJSON();
      // We need to normalize the return value of `.toJSON()` in case it has circular references
      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);
    } catch (err) {
      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)
    }
  }

  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse
  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each
  // property/entry, and keep track of the number of items we add to it.
  const normalized = (Array.isArray(value) ? [] : {}) ;
  let numAdded = 0;

  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant
  // properties are non-enumerable and otherwise would get missed.
  const visitable = Object(_object_js__WEBPACK_IMPORTED_MODULE_2__["convertToPlainObject"])(value );

  for (const visitKey in visitable) {
    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {
      continue;
    }

    if (numAdded >= maxProperties) {
      normalized[visitKey] = '[MaxProperties ~]';
      break;
    }

    // Recursively visit all the child nodes
    const visitValue = visitable[visitKey];
    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);

    numAdded++;
  }

  // Once we've visited all the branches, remove the parent from memo storage
  unmemoize(value);

  // Return accumulated values
  return normalized;
}

/* eslint-disable complexity */
/**
 * Stringify the given value. Handles various known special values and types.
 *
 * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn
 * the number 1231 into "[Object Number]", nor on `null`, as it will throw.
 *
 * @param value The value to stringify
 * @returns A stringified representation of the given value
 */
function stringifyValue(
  key,
  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for
  // our internal use, it'll do
  value,
) {
  try {
    if (key === 'domain' && value && typeof value === 'object' && (value )._events) {
      return '[Domain]';
    }

    if (key === 'domainEmitter') {
      return '[DomainEmitter]';
    }

    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first
    // which won't throw if they are not present.

    if (typeof global !== 'undefined' && value === global) {
      return '[Global]';
    }

    // eslint-disable-next-line no-restricted-globals
    if (typeof window !== 'undefined' && value === window) {
      return '[Window]';
    }

    // eslint-disable-next-line no-restricted-globals
    if (typeof document !== 'undefined' && value === document) {
      return '[Document]';
    }

    // React's SyntheticEvent thingy
    if (Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isSyntheticEvent"])(value)) {
      return '[SyntheticEvent]';
    }

    if (typeof value === 'number' && value !== value) {
      return '[NaN]';
    }

    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)
    if (value === void 0) {
      return '[undefined]';
    }

    if (typeof value === 'function') {
      return `[Function: ${Object(_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__["getFunctionName"])(value)}]`;
    }

    if (typeof value === 'symbol') {
      return `[${String(value)}]`;
    }

    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion
    if (typeof value === 'bigint') {
      return `[BigInt: ${String(value)}]`;
    }

    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting
    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as
    // `"[object Object]"`. If we instead look at the constructor's name (which is the same as the name of the class),
    // we can make sure that only plain objects come out that way.
    const objName = getConstructorName(value);

    // Handle HTML Elements
    if (/^HTML(\w*)Element$/.test(objName)) {
      return `[HTMLElement: ${objName}]`;
    }

    return `[object ${objName}]`;
  } catch (err) {
    return `**non-serializable** (${err})`;
  }
}
/* eslint-enable complexity */

function getConstructorName(value) {
  const prototype = Object.getPrototypeOf(value);

  return prototype ? prototype.constructor.name : 'null prototype';
}

/** Calculates bytes size of input string */
function utf8Length(value) {
  // eslint-disable-next-line no-bitwise
  return ~-encodeURI(value).split(/%..|./).length;
}

/** Calculates bytes size of input object */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function jsonSize(value) {
  return utf8Length(JSON.stringify(value));
}


//# sourceMappingURL=normalize.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@sentry/utils/esm/object.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/object.js ***!
  \**************************************************/
/*! exports provided: addNonEnumerableProperty, convertToPlainObject, dropUndefinedKeys, extractExceptionKeysForMessage, fill, getOriginalFunction, markFunctionWrapped, objectify, urlEncode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addNonEnumerableProperty", function() { return addNonEnumerableProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToPlainObject", function() { return convertToPlainObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropUndefinedKeys", function() { return dropUndefinedKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractExceptionKeysForMessage", function() { return extractExceptionKeysForMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fill", function() { return fill; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOriginalFunction", function() { return getOriginalFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "markFunctionWrapped", function() { return markFunctionWrapped; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectify", function() { return objectify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlEncode", function() { return urlEncode; });
/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browser.js */ "./node_modules/@sentry/utils/esm/browser.js");
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./string.js */ "./node_modules/@sentry/utils/esm/string.js");




/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */
function fill(source, name, replacementFactory) {
  if (!(name in source)) {
    return;
  }

  const original = source[name] ;
  const wrapped = replacementFactory(original) ;

  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
  // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
  if (typeof wrapped === 'function') {
    try {
      markFunctionWrapped(wrapped, original);
    } catch (_Oo) {
      // This can throw if multiple fill happens on a global object like XMLHttpRequest
      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043
    }
  }

  source[name] = wrapped;
}

/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */
function addNonEnumerableProperty(obj, name, value) {
  Object.defineProperty(obj, name, {
    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
    value: value,
    writable: true,
    configurable: true,
  });
}

/**
 * Remembers the original function on the wrapped function and
 * patches up the prototype.
 *
 * @param wrapped the wrapper function
 * @param original the original function that gets wrapped
 */
function markFunctionWrapped(wrapped, original) {
  const proto = original.prototype || {};
  wrapped.prototype = original.prototype = proto;
  addNonEnumerableProperty(wrapped, '__sentry_original__', original);
}

/**
 * This extracts the original function if available.  See
 * `markFunctionWrapped` for more information.
 *
 * @param func the function to unwrap
 * @returns the unwrapped version of the function if available.
 */
function getOriginalFunction(func) {
  return func.__sentry_original__;
}

/**
 * Encodes given object into url-friendly format
 *
 * @param object An object that contains serializable values
 * @returns string Encoded
 */
function urlEncode(object) {
  return Object.keys(object)
    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)
    .join('&');
}

/**
 * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their
 * non-enumerable properties attached.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor
 *  an Error.
 */
function convertToPlainObject(value)

 {
  if (Object(_is_js__WEBPACK_IMPORTED_MODULE_1__["isError"])(value)) {
    return {
      message: value.message,
      name: value.name,
      stack: value.stack,
      ...getOwnProperties(value),
    };
  } else if (Object(_is_js__WEBPACK_IMPORTED_MODULE_1__["isEvent"])(value)) {
    const newObj

 = {
      type: value.type,
      target: serializeEventTarget(value.target),
      currentTarget: serializeEventTarget(value.currentTarget),
      ...getOwnProperties(value),
    };

    if (typeof CustomEvent !== 'undefined' && Object(_is_js__WEBPACK_IMPORTED_MODULE_1__["isInstanceOf"])(value, CustomEvent)) {
      newObj.detail = value.detail;
    }

    return newObj;
  } else {
    return value;
  }
}

/** Creates a string representation of the target of an `Event` object */
function serializeEventTarget(target) {
  try {
    return Object(_is_js__WEBPACK_IMPORTED_MODULE_1__["isElement"])(target) ? Object(_browser_js__WEBPACK_IMPORTED_MODULE_0__["htmlTreeAsString"])(target) : Object.prototype.toString.call(target);
  } catch (_oO) {
    return '<unknown>';
  }
}

/** Filters out all but an object's own properties */
function getOwnProperties(obj) {
  if (typeof obj === 'object' && obj !== null) {
    const extractedProps = {};
    for (const property in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, property)) {
        extractedProps[property] = (obj )[property];
      }
    }
    return extractedProps;
  } else {
    return {};
  }
}

/**
 * Given any captured exception, extract its keys and create a sorted
 * and truncated list that will be used inside the event message.
 * eg. `Non-error exception captured with keys: foo, bar, baz`
 */
function extractExceptionKeysForMessage(exception, maxLength = 40) {
  const keys = Object.keys(convertToPlainObject(exception));
  keys.sort();

  if (!keys.length) {
    return '[object has no keys]';
  }

  if (keys[0].length >= maxLength) {
    return Object(_string_js__WEBPACK_IMPORTED_MODULE_2__["truncate"])(keys[0], maxLength);
  }

  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {
    const serialized = keys.slice(0, includedKeys).join(', ');
    if (serialized.length > maxLength) {
      continue;
    }
    if (includedKeys === keys.length) {
      return serialized;
    }
    return Object(_string_js__WEBPACK_IMPORTED_MODULE_2__["truncate"])(serialized, maxLength);
  }

  return '';
}

/**
 * Given any object, return a new object having removed all fields whose value was `undefined`.
 * Works recursively on objects and arrays.
 *
 * Attention: This function keeps circular references in the returned object.
 */
function dropUndefinedKeys(inputValue) {
  // This map keeps track of what already visited nodes map to.
  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular
  // references as the input object.
  const memoizationMap = new Map();

  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API
  return _dropUndefinedKeys(inputValue, memoizationMap);
}

function _dropUndefinedKeys(inputValue, memoizationMap) {
  if (Object(_is_js__WEBPACK_IMPORTED_MODULE_1__["isPlainObject"])(inputValue)) {
    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object
    const memoVal = memoizationMap.get(inputValue);
    if (memoVal !== undefined) {
      return memoVal ;
    }

    const returnValue = {};
    // Store the mapping of this value in case we visit it again, in case of circular data
    memoizationMap.set(inputValue, returnValue);

    for (const key of Object.keys(inputValue)) {
      if (typeof inputValue[key] !== 'undefined') {
        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);
      }
    }

    return returnValue ;
  }

  if (Array.isArray(inputValue)) {
    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object
    const memoVal = memoizationMap.get(inputValue);
    if (memoVal !== undefined) {
      return memoVal ;
    }

    const returnValue = [];
    // Store the mapping of this value in case we visit it again, in case of circular data
    memoizationMap.set(inputValue, returnValue);

    inputValue.forEach((item) => {
      returnValue.push(_dropUndefinedKeys(item, memoizationMap));
    });

    return returnValue ;
  }

  return inputValue;
}

/**
 * Ensure that something is an object.
 *
 * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper
 * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.
 *
 * @param wat The subject of the objectification
 * @returns A version of `wat` which can safely be used with `Object` class methods
 */
function objectify(wat) {
  let objectified;
  switch (true) {
    case wat === undefined || wat === null:
      objectified = new String(wat);
      break;

    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason
    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as
    // an object in order to wrap it.
    case typeof wat === 'symbol' || typeof wat === 'bigint':
      objectified = Object(wat);
      break;

    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`
    case Object(_is_js__WEBPACK_IMPORTED_MODULE_1__["isPrimitive"])(wat):
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      objectified = new (wat ).constructor(wat);
      break;

    // by process of elimination, at this point we know that `wat` must already be an object
    default:
      objectified = wat;
      break;
  }
  return objectified;
}


//# sourceMappingURL=object.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/path.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/path.js ***!
  \************************************************/
/*! exports provided: basename, dirname, isAbsolute, join, normalizePath, relative, resolve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "basename", function() { return basename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dirname", function() { return dirname; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAbsolute", function() { return isAbsolute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "join", function() { return join; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePath", function() { return normalizePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "relative", function() { return relative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolve", function() { return resolve; });
// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript
// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js
//
// Copyright Joyent, Inc.and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/** JSDoc */
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  let up = 0;
  for (let i = parts.length - 1; i >= 0; i--) {
    const last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
const splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^/]+?|)(\.[^./]*|))(?:[/]*)$/;
/** JSDoc */
function splitPath(filename) {
  const parts = splitPathRe.exec(filename);
  return parts ? parts.slice(1) : [];
}

// path.resolve([from ...], to)
// posix version
/** JSDoc */
function resolve(...args) {
  let resolvedPath = '';
  let resolvedAbsolute = false;

  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    const path = i >= 0 ? args[i] : '/';

    // Skip empty entries
    if (!path) {
      continue;
    }

    resolvedPath = `${path}/${resolvedPath}`;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(
    resolvedPath.split('/').filter(p => !!p),
    !resolvedAbsolute,
  ).join('/');

  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}

/** JSDoc */
function trim(arr) {
  let start = 0;
  for (; start < arr.length; start++) {
    if (arr[start] !== '') {
      break;
    }
  }

  let end = arr.length - 1;
  for (; end >= 0; end--) {
    if (arr[end] !== '') {
      break;
    }
  }

  if (start > end) {
    return [];
  }
  return arr.slice(start, end - start + 1);
}

// path.relative(from, to)
// posix version
/** JSDoc */
function relative(from, to) {
  /* eslint-disable no-param-reassign */
  from = resolve(from).slice(1);
  to = resolve(to).slice(1);
  /* eslint-enable no-param-reassign */

  const fromParts = trim(from.split('/'));
  const toParts = trim(to.split('/'));

  const length = Math.min(fromParts.length, toParts.length);
  let samePartsLength = length;
  for (let i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  let outputParts = [];
  for (let i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
}

// path.normalize(path)
// posix version
/** JSDoc */
function normalizePath(path) {
  const isPathAbsolute = isAbsolute(path);
  const trailingSlash = path.slice(-1) === '/';

  // Normalize the path
  let normalizedPath = normalizeArray(
    path.split('/').filter(p => !!p),
    !isPathAbsolute,
  ).join('/');

  if (!normalizedPath && !isPathAbsolute) {
    normalizedPath = '.';
  }
  if (normalizedPath && trailingSlash) {
    normalizedPath += '/';
  }

  return (isPathAbsolute ? '/' : '') + normalizedPath;
}

// posix version
/** JSDoc */
function isAbsolute(path) {
  return path.charAt(0) === '/';
}

// posix version
/** JSDoc */
function join(...args) {
  return normalizePath(args.join('/'));
}

/** JSDoc */
function dirname(path) {
  const result = splitPath(path);
  const root = result[0];
  let dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.slice(0, dir.length - 1);
  }

  return root + dir;
}

/** JSDoc */
function basename(path, ext) {
  let f = splitPath(path)[2];
  if (ext && f.slice(ext.length * -1) === ext) {
    f = f.slice(0, f.length - ext.length);
  }
  return f;
}


//# sourceMappingURL=path.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/promisebuffer.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/promisebuffer.js ***!
  \*********************************************************/
/*! exports provided: makePromiseBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makePromiseBuffer", function() { return makePromiseBuffer; });
/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error.js */ "./node_modules/@sentry/utils/esm/error.js");
/* harmony import */ var _syncpromise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syncpromise.js */ "./node_modules/@sentry/utils/esm/syncpromise.js");



/**
 * Creates an new PromiseBuffer object with the specified limit
 * @param limit max number of promises that can be stored in the buffer
 */
function makePromiseBuffer(limit) {
  const buffer = [];

  function isReady() {
    return limit === undefined || buffer.length < limit;
  }

  /**
   * Remove a promise from the queue.
   *
   * @param task Can be any PromiseLike<T>
   * @returns Removed promise.
   */
  function remove(task) {
    return buffer.splice(buffer.indexOf(task), 1)[0];
  }

  /**
   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.
   *
   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:
   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor
   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By
   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer
   *        limit check.
   * @returns The original promise.
   */
  function add(taskProducer) {
    if (!isReady()) {
      return Object(_syncpromise_js__WEBPACK_IMPORTED_MODULE_1__["rejectedSyncPromise"])(new _error_js__WEBPACK_IMPORTED_MODULE_0__["SentryError"]('Not adding Promise because buffer limit was reached.'));
    }

    // start the task and add its promise to the queue
    const task = taskProducer();
    if (buffer.indexOf(task) === -1) {
      buffer.push(task);
    }
    void task
      .then(() => remove(task))
      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`
      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't
      // have promises, so TS has to polyfill when down-compiling.)
      .then(null, () =>
        remove(task).then(null, () => {
          // We have to add another catch here because `remove()` starts a new promise chain.
        }),
      );
    return task;
  }

  /**
   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or
   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and
   * `false` otherwise
   */
  function drain(timeout) {
    return new _syncpromise_js__WEBPACK_IMPORTED_MODULE_1__["SyncPromise"]((resolve, reject) => {
      let counter = buffer.length;

      if (!counter) {
        return resolve(true);
      }

      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)
      const capturedSetTimeout = setTimeout(() => {
        if (timeout && timeout > 0) {
          resolve(false);
        }
      }, timeout);

      // if all promises resolve in time, cancel the timer and resolve to `true`
      buffer.forEach(item => {
        void Object(_syncpromise_js__WEBPACK_IMPORTED_MODULE_1__["resolvedSyncPromise"])(item).then(() => {
          if (!--counter) {
            clearTimeout(capturedSetTimeout);
            resolve(true);
          }
        }, reject);
      });
    });
  }

  return {
    $: buffer,
    add,
    drain,
  };
}


//# sourceMappingURL=promisebuffer.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/ratelimit.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/ratelimit.js ***!
  \*****************************************************/
/*! exports provided: DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RETRY_AFTER", function() { return DEFAULT_RETRY_AFTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disabledUntil", function() { return disabledUntil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRateLimited", function() { return isRateLimited; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseRetryAfterHeader", function() { return parseRetryAfterHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateRateLimits", function() { return updateRateLimits; });
// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend

const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds

/**
 * Extracts Retry-After value from the request header or returns default value
 * @param header string representation of 'Retry-After' header
 * @param now current unix timestamp
 *
 */
function parseRetryAfterHeader(header, now = Date.now()) {
  const headerDelay = parseInt(`${header}`, 10);
  if (!isNaN(headerDelay)) {
    return headerDelay * 1000;
  }

  const headerDate = Date.parse(`${header}`);
  if (!isNaN(headerDate)) {
    return headerDate - now;
  }

  return DEFAULT_RETRY_AFTER;
}

/**
 * Gets the time that the given category is disabled until for rate limiting.
 * In case no category-specific limit is set but a general rate limit across all categories is active,
 * that time is returned.
 *
 * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.
 */
function disabledUntil(limits, category) {
  return limits[category] || limits.all || 0;
}

/**
 * Checks if a category is rate limited
 */
function isRateLimited(limits, category, now = Date.now()) {
  return disabledUntil(limits, category) > now;
}

/**
 * Update ratelimits from incoming headers.
 *
 * @return the updated RateLimits object.
 */
function updateRateLimits(
  limits,
  { statusCode, headers },
  now = Date.now(),
) {
  const updatedRateLimits = {
    ...limits,
  };

  // "The name is case-insensitive."
  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];
  const retryAfterHeader = headers && headers['retry-after'];

  if (rateLimitHeader) {
    /**
     * rate limit headers are of the form
     *     <header>,<header>,..
     * where each <header> is of the form
     *     <retry_after>: <categories>: <scope>: <reason_code>
     * where
     *     <retry_after> is a delay in seconds
     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form
     *         <category>;<category>;...
     *     <scope> is what's being limited (org, project, or key) - ignored by SDK
     *     <reason_code> is an arbitrary string like "org_quota" - ignored by SDK
     */
    for (const limit of rateLimitHeader.trim().split(',')) {
      const [retryAfter, categories] = limit.split(':', 2);
      const headerDelay = parseInt(retryAfter, 10);
      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default
      if (!categories) {
        updatedRateLimits.all = now + delay;
      } else {
        for (const category of categories.split(';')) {
          updatedRateLimits[category] = now + delay;
        }
      }
    }
  } else if (retryAfterHeader) {
    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);
  } else if (statusCode === 429) {
    updatedRateLimits.all = now + 60 * 1000;
  }

  return updatedRateLimits;
}


//# sourceMappingURL=ratelimit.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/requestdata.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/requestdata.js ***!
  \*******************************************************/
/*! exports provided: addRequestDataToEvent, addRequestDataToTransaction, extractPathForTransaction, extractRequestData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addRequestDataToEvent", function() { return addRequestDataToEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addRequestDataToTransaction", function() { return addRequestDataToTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractPathForTransaction", function() { return extractPathForTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractRequestData", function() { return extractRequestData; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");
/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalize.js */ "./node_modules/@sentry/utils/esm/normalize.js");
/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url.js */ "./node_modules/@sentry/utils/esm/url.js");




const DEFAULT_INCLUDES = {
  ip: false,
  request: true,
  transaction: true,
  user: true,
};
const DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];
const DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];

/**
 * Sets parameterized route as transaction name e.g.: `GET /users/:id`
 * Also adds more context data on the transaction from the request
 */
function addRequestDataToTransaction(
  transaction,
  req,
  deps,
) {
  if (!transaction) return;
  if (!transaction.metadata.source || transaction.metadata.source === 'url') {
    // Attempt to grab a parameterized route off of the request
    transaction.setName(...extractPathForTransaction(req, { path: true, method: true }));
  }
  transaction.setData('url', req.originalUrl || req.url);
  if (req.baseUrl) {
    transaction.setData('baseUrl', req.baseUrl);
  }
  transaction.setData('query', extractQueryParams(req, deps));
}

/**
 * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.
 * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.
 *
 * Additionally, this function determines and returns the transaction name source
 *
 * eg. GET /mountpoint/user/:id
 *
 * @param req A request object
 * @param options What to include in the transaction name (method, path, or a custom route name to be
 *                used instead of the request's route)
 *
 * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')
 */
function extractPathForTransaction(
  req,
  options = {},
) {
  const method = req.method && req.method.toUpperCase();

  let path = '';
  let source = 'url';

  // Check to see if there's a parameterized route we can use (as there is in Express)
  if (options.customRoute || req.route) {
    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;
    source = 'route';
  }

  // Otherwise, just take the original URL
  else if (req.originalUrl || req.url) {
    path = Object(_url_js__WEBPACK_IMPORTED_MODULE_2__["stripUrlQueryAndFragment"])(req.originalUrl || req.url || '');
  }

  let name = '';
  if (options.method && method) {
    name += method;
  }
  if (options.method && options.path) {
    name += ' ';
  }
  if (options.path && path) {
    name += path;
  }

  return [name, source];
}

/** JSDoc */
function extractTransaction(req, type) {
  switch (type) {
    case 'path': {
      return extractPathForTransaction(req, { path: true })[0];
    }
    case 'handler': {
      return (req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name) || '<anonymous>';
    }
    case 'methodPath':
    default: {
      return extractPathForTransaction(req, { path: true, method: true })[0];
    }
  }
}

/** JSDoc */
function extractUserData(
  user

,
  keys,
) {
  const extractedUser = {};
  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;

  attributes.forEach(key => {
    if (user && key in user) {
      extractedUser[key] = user[key];
    }
  });

  return extractedUser;
}

/**
 * Normalize data from the request object, accounting for framework differences.
 *
 * @param req The request object from which to extract data
 * @param options.include An optional array of keys to include in the normalized data. Defaults to
 * DEFAULT_REQUEST_INCLUDES if not provided.
 * @param options.deps Injected, platform-specific dependencies
 * @returns An object containing normalized request data
 */
function extractRequestData(
  req,
  options

,
) {
  const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};
  const requestData = {};

  // headers:
  //   node, express, koa, nextjs: req.headers
  const headers = (req.headers || {})

;
  // method:
  //   node, express, koa, nextjs: req.method
  const method = req.method;
  // host:
  //   express: req.hostname in > 4 and req.host in < 4
  //   koa: req.host
  //   node, nextjs: req.headers.host
  const host = req.hostname || req.host || headers.host || '<no host>';
  // protocol:
  //   node, nextjs: <n/a>
  //   express, koa: req.protocol
  const protocol = req.protocol === 'https' || (req.socket && req.socket.encrypted) ? 'https' : 'http';
  // url (including path and query string):
  //   node, express: req.originalUrl
  //   koa, nextjs: req.url
  const originalUrl = req.originalUrl || req.url || '';
  // absolute url
  const absoluteUrl = `${protocol}://${host}${originalUrl}`;
  include.forEach(key => {
    switch (key) {
      case 'headers': {
        requestData.headers = headers;
        break;
      }
      case 'method': {
        requestData.method = method;
        break;
      }
      case 'url': {
        requestData.url = absoluteUrl;
        break;
      }
      case 'cookies': {
        // cookies:
        //   node, express, koa: req.headers.cookie
        //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        requestData.cookies =
          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can
          // come off in v8
          req.cookies || (headers.cookie && deps && deps.cookie && deps.cookie.parse(headers.cookie)) || {};
        break;
      }
      case 'query_string': {
        // query string:
        //   node: req.url (raw)
        //   express, koa, nextjs: req.query
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        requestData.query_string = extractQueryParams(req, deps);
        break;
      }
      case 'data': {
        if (method === 'GET' || method === 'HEAD') {
          break;
        }
        // body data:
        //   express, koa, nextjs: req.body
        //
        //   when using node by itself, you have to read the incoming stream(see
        //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know
        //   where they're going to store the final result, so they'll have to capture this data themselves
        if (req.body !== undefined) {
          requestData.data = Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(req.body) ? req.body : JSON.stringify(Object(_normalize_js__WEBPACK_IMPORTED_MODULE_1__["normalize"])(req.body));
        }
        break;
      }
      default: {
        if ({}.hasOwnProperty.call(req, key)) {
          requestData[key] = (req )[key];
        }
      }
    }
  });

  return requestData;
}

/**
 * Options deciding what parts of the request to use when enhancing an event
 */

/**
 * Add data from the given request to the given event
 *
 * @param event The event to which the request data will be added
 * @param req Request object
 * @param options.include Flags to control what data is included
 * @param options.deps Injected platform-specific dependencies
 * @hidden
 */
function addRequestDataToEvent(
  event,
  req,
  options,
) {
  const include = {
    ...DEFAULT_INCLUDES,
    ...(options && options.include),
  };

  if (include.request) {
    const extractedRequestData = Array.isArray(include.request)
      ? extractRequestData(req, { include: include.request, deps: options && options.deps })
      : extractRequestData(req, { deps: options && options.deps });

    event.request = {
      ...event.request,
      ...extractedRequestData,
    };
  }

  if (include.user) {
    const extractedUser = req.user && Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isPlainObject"])(req.user) ? extractUserData(req.user, include.user) : {};

    if (Object.keys(extractedUser).length) {
      event.user = {
        ...event.user,
        ...extractedUser,
      };
    }
  }

  // client ip:
  //   node, nextjs: req.socket.remoteAddress
  //   express, koa: req.ip
  if (include.ip) {
    const ip = req.ip || (req.socket && req.socket.remoteAddress);
    if (ip) {
      event.user = {
        ...event.user,
        ip_address: ip,
      };
    }
  }

  if (include.transaction && !event.transaction) {
    // TODO do we even need this anymore?
    // TODO make this work for nextjs
    event.transaction = extractTransaction(req, include.transaction);
  }

  return event;
}

function extractQueryParams(
  req,
  deps,
) {
  // url (including path and query string):
  //   node, express: req.originalUrl
  //   koa, nextjs: req.url
  let originalUrl = req.originalUrl || req.url || '';

  if (!originalUrl) {
    return;
  }

  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and
  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.
  if (originalUrl.startsWith('/')) {
    originalUrl = `http://dogs.are.great${originalUrl}`;
  }

  return (
    req.query ||
    (typeof URL !== undefined && new URL(originalUrl).search.replace('?', '')) ||
    // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node
    (deps && deps.url && deps.url.parse(originalUrl).query) ||
    undefined
  );
}


//# sourceMappingURL=requestdata.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/severity.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/severity.js ***!
  \****************************************************/
/*! exports provided: severityFromString, severityLevelFromString, validSeverityLevels */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "severityFromString", function() { return severityFromString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "severityLevelFromString", function() { return severityLevelFromString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validSeverityLevels", function() { return validSeverityLevels; });
// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either
//
// a) moving `validSeverityLevels` to `@sentry/types`,
// b) moving the`SeverityLevel` type here, or
// c) importing `validSeverityLevels` from here into `@sentry/types`.
//
// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would
// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the
// type, reminding anyone who changes it to change this list also, will have to do.

const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];

/**
 * Converts a string-based level into a member of the deprecated {@link Severity} enum.
 *
 * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.
 *
 * @param level String representation of Severity
 * @returns Severity
 */
function severityFromString(level) {
  return severityLevelFromString(level) ;
}

/**
 * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.
 *
 * @param level String representation of desired `SeverityLevel`.
 * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.
 */
function severityLevelFromString(level) {
  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') ;
}


//# sourceMappingURL=severity.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/stacktrace.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/stacktrace.js ***!
  \******************************************************/
/*! exports provided: createStackParser, getFunctionName, nodeStackLineParser, stackParserFromStackParserOptions, stripSentryFramesAndReverse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createStackParser", function() { return createStackParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFunctionName", function() { return getFunctionName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nodeStackLineParser", function() { return nodeStackLineParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stackParserFromStackParserOptions", function() { return stackParserFromStackParserOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stripSentryFramesAndReverse", function() { return stripSentryFramesAndReverse; });
/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-stack-trace.js */ "./node_modules/@sentry/utils/esm/node-stack-trace.js");


const STACKTRACE_FRAME_LIMIT = 50;
// Used to sanitize webpack (error: *) wrapped stack errors
const WEBPACK_ERROR_REGEXP = /\(error: (.*)\)/;

/**
 * Creates a stack parser with the supplied line parsers
 *
 * StackFrames are returned in the correct order for Sentry Exception
 * frames and with Sentry SDK internal frames removed from the top and bottom
 *
 */
function createStackParser(...parsers) {
  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);

  return (stack, skipFirst = 0) => {
    const frames = [];
    const lines = stack.split('\n');

    for (let i = skipFirst; i < lines.length; i++) {
      const line = lines[i];
      // Ignore lines over 1kb as they are unlikely to be stack frames.
      // Many of the regular expressions use backtracking which results in run time that increases exponentially with
      // input size. Huge strings can result in hangs/Denial of Service:
      // https://github.com/getsentry/sentry-javascript/issues/2286
      if (line.length > 1024) {
        continue;
      }

      // https://github.com/getsentry/sentry-javascript/issues/5459
      // Remove webpack (error: *) wrappers
      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;

      // https://github.com/getsentry/sentry-javascript/issues/7813
      // Skip Error: lines
      if (cleanedLine.match(/\S*Error: /)) {
        continue;
      }

      for (const parser of sortedParsers) {
        const frame = parser(cleanedLine);

        if (frame) {
          frames.push(frame);
          break;
        }
      }

      if (frames.length >= STACKTRACE_FRAME_LIMIT) {
        break;
      }
    }

    return stripSentryFramesAndReverse(frames);
  };
}

/**
 * Gets a stack parser implementation from Options.stackParser
 * @see Options
 *
 * If options contains an array of line parsers, it is converted into a parser
 */
function stackParserFromStackParserOptions(stackParser) {
  if (Array.isArray(stackParser)) {
    return createStackParser(...stackParser);
  }
  return stackParser;
}

/**
 * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.
 * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the
 * function that caused the crash is the last frame in the array.
 * @hidden
 */
function stripSentryFramesAndReverse(stack) {
  if (!stack.length) {
    return [];
  }

  const localStack = stack.slice(0, STACKTRACE_FRAME_LIMIT);

  const lastFrameFunction = localStack[localStack.length - 1].function;
  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)
  if (lastFrameFunction && /sentryWrapped/.test(lastFrameFunction)) {
    localStack.pop();
  }

  // Reversing in the middle of the procedure allows us to just pop the values off the stack
  localStack.reverse();

  const firstFrameFunction = localStack[localStack.length - 1].function;
  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)
  if (firstFrameFunction && /captureMessage|captureException/.test(firstFrameFunction)) {
    localStack.pop();
  }

  return localStack.map(frame => ({
    ...frame,
    filename: frame.filename || localStack[localStack.length - 1].filename,
    function: frame.function || '?',
  }));
}

const defaultFunctionName = '<anonymous>';

/**
 * Safely extract function name from itself
 */
function getFunctionName(fn) {
  try {
    if (!fn || typeof fn !== 'function') {
      return defaultFunctionName;
    }
    return fn.name || defaultFunctionName;
  } catch (e) {
    // Just accessing custom props in some Selenium environments
    // can cause a "Permission denied" exception (see raven-js#495).
    return defaultFunctionName;
  }
}

/**
 * Node.js stack line parser
 *
 * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.
 * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain
 */
function nodeStackLineParser(getModule) {
  return [90, Object(_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__["node"])(getModule)];
}


//# sourceMappingURL=stacktrace.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/string.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/string.js ***!
  \**************************************************/
/*! exports provided: isMatchingPattern, safeJoin, snipLine, stringMatchesSomePattern, truncate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMatchingPattern", function() { return isMatchingPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeJoin", function() { return safeJoin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snipLine", function() { return snipLine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringMatchesSomePattern", function() { return stringMatchesSomePattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "truncate", function() { return truncate; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");


/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string (0 = unlimited)
 * @returns string Encoded
 */
function truncate(str, max = 0) {
  if (typeof str !== 'string' || max === 0) {
    return str;
  }
  return str.length <= max ? str : `${str.slice(0, max)}...`;
}

/**
 * This is basically just `trim_line` from
 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string
 * @returns string Encoded
 */
function snipLine(line, colno) {
  let newLine = line;
  const lineLength = newLine.length;
  if (lineLength <= 150) {
    return newLine;
  }
  if (colno > lineLength) {
    // eslint-disable-next-line no-param-reassign
    colno = lineLength;
  }

  let start = Math.max(colno - 60, 0);
  if (start < 5) {
    start = 0;
  }

  let end = Math.min(start + 140, lineLength);
  if (end > lineLength - 5) {
    end = lineLength;
  }
  if (end === lineLength) {
    start = Math.max(end - 140, 0);
  }

  newLine = newLine.slice(start, end);
  if (start > 0) {
    newLine = `'{snip} ${newLine}`;
  }
  if (end < lineLength) {
    newLine += ' {snip}';
  }

  return newLine;
}

/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns Joined values
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function safeJoin(input, delimiter) {
  if (!Array.isArray(input)) {
    return '';
  }

  const output = [];
  // eslint-disable-next-line @typescript-eslint/prefer-for-of
  for (let i = 0; i < input.length; i++) {
    const value = input[i];
    try {
      output.push(String(value));
    } catch (e) {
      output.push('[value cannot be serialized]');
    }
  }

  return output.join(delimiter);
}

/**
 * Checks if the given value matches a regex or string
 *
 * @param value The string to test
 * @param pattern Either a regex or a string against which `value` will be matched
 * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match
 * `pattern` if it contains `pattern`. Only applies to string-type patterns.
 */
function isMatchingPattern(
  value,
  pattern,
  requireExactStringMatch = false,
) {
  if (!Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(value)) {
    return false;
  }

  if (Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isRegExp"])(pattern)) {
    return pattern.test(value);
  }
  if (Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isString"])(pattern)) {
    return requireExactStringMatch ? value === pattern : value.includes(pattern);
  }

  return false;
}

/**
 * Test the given string against an array of strings and regexes. By default, string matching is done on a
 * substring-inclusion basis rather than a strict equality basis
 *
 * @param testString The string to test
 * @param patterns The patterns against which to test the string
 * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to
 * count. If false, `testString` will match a string pattern if it contains that pattern.
 * @returns
 */
function stringMatchesSomePattern(
  testString,
  patterns = [],
  requireExactStringMatch = false,
) {
  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));
}


//# sourceMappingURL=string.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/supports.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/supports.js ***!
  \****************************************************/
/*! exports provided: isNativeFetch, supportsDOMError, supportsDOMException, supportsErrorEvent, supportsFetch, supportsNativeFetch, supportsReferrerPolicy, supportsReportingObserver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNativeFetch", function() { return isNativeFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsDOMError", function() { return supportsDOMError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsDOMException", function() { return supportsDOMException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsErrorEvent", function() { return supportsErrorEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsFetch", function() { return supportsFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsNativeFetch", function() { return supportsNativeFetch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsReferrerPolicy", function() { return supportsReferrerPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsReportingObserver", function() { return supportsReportingObserver; });
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger.js */ "./node_modules/@sentry/utils/esm/logger.js");
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");



// eslint-disable-next-line deprecation/deprecation
const WINDOW = Object(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__["getGlobalObject"])();

/**
 * Tells whether current environment supports ErrorEvent objects
 * {@link supportsErrorEvent}.
 *
 * @returns Answer to the given question.
 */
function supportsErrorEvent() {
  try {
    new ErrorEvent('');
    return true;
  } catch (e) {
    return false;
  }
}

/**
 * Tells whether current environment supports DOMError objects
 * {@link supportsDOMError}.
 *
 * @returns Answer to the given question.
 */
function supportsDOMError() {
  try {
    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':
    // 1 argument required, but only 0 present.
    // @ts-ignore It really needs 1 argument, not 0.
    new DOMError('');
    return true;
  } catch (e) {
    return false;
  }
}

/**
 * Tells whether current environment supports DOMException objects
 * {@link supportsDOMException}.
 *
 * @returns Answer to the given question.
 */
function supportsDOMException() {
  try {
    new DOMException('');
    return true;
  } catch (e) {
    return false;
  }
}

/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */
function supportsFetch() {
  if (!('fetch' in WINDOW)) {
    return false;
  }

  try {
    new Headers();
    new Request('http://www.example.com');
    new Response();
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isNativeFetch(func) {
  return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
}

/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */
function supportsNativeFetch() {
  if (!supportsFetch()) {
    return false;
  }

  // Fast path to avoid DOM I/O
  // eslint-disable-next-line @typescript-eslint/unbound-method
  if (isNativeFetch(WINDOW.fetch)) {
    return true;
  }

  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
  // so create a "pure" iframe to see if that has native fetch
  let result = false;
  const doc = WINDOW.document;
  // eslint-disable-next-line deprecation/deprecation
  if (doc && typeof (doc.createElement ) === 'function') {
    try {
      const sandbox = doc.createElement('iframe');
      sandbox.hidden = true;
      doc.head.appendChild(sandbox);
      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        result = isNativeFetch(sandbox.contentWindow.fetch);
      }
      doc.head.removeChild(sandbox);
    } catch (err) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        _logger_js__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);
    }
  }

  return result;
}

/**
 * Tells whether current environment supports ReportingObserver API
 * {@link supportsReportingObserver}.
 *
 * @returns Answer to the given question.
 */
function supportsReportingObserver() {
  return 'ReportingObserver' in WINDOW;
}

/**
 * Tells whether current environment supports Referrer Policy API
 * {@link supportsReferrerPolicy}.
 *
 * @returns Answer to the given question.
 */
function supportsReferrerPolicy() {
  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'
  // (see https://caniuse.com/#feat=referrer-policy),
  // it doesn't. And it throws an exception instead of ignoring this parameter...
  // REF: https://github.com/getsentry/raven-js/issues/1233

  if (!supportsFetch()) {
    return false;
  }

  try {
    new Request('_', {
      referrerPolicy: 'origin' ,
    });
    return true;
  } catch (e) {
    return false;
  }
}


//# sourceMappingURL=supports.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/syncpromise.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/syncpromise.js ***!
  \*******************************************************/
/*! exports provided: SyncPromise, rejectedSyncPromise, resolvedSyncPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SyncPromise", function() { return SyncPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rejectedSyncPromise", function() { return rejectedSyncPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolvedSyncPromise", function() { return resolvedSyncPromise; });
/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/esm/is.js");


/* eslint-disable @typescript-eslint/explicit-function-return-type */

/** SyncPromise internal states */
var States; (function (States) {
  /** Pending */
  const PENDING = 0; States[States["PENDING"] = PENDING] = "PENDING";
  /** Resolved / OK */
  const RESOLVED = 1; States[States["RESOLVED"] = RESOLVED] = "RESOLVED";
  /** Rejected / Error */
  const REJECTED = 2; States[States["REJECTED"] = REJECTED] = "REJECTED";
})(States || (States = {}));

// Overloads so we can call resolvedSyncPromise without arguments and generic argument

/**
 * Creates a resolved sync promise.
 *
 * @param value the value to resolve the promise with
 * @returns the resolved sync promise
 */
function resolvedSyncPromise(value) {
  return new SyncPromise(resolve => {
    resolve(value);
  });
}

/**
 * Creates a rejected sync promise.
 *
 * @param value the value to reject the promise with
 * @returns the rejected sync promise
 */
function rejectedSyncPromise(reason) {
  return new SyncPromise((_, reject) => {
    reject(reason);
  });
}

/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */
class SyncPromise {
   __init() {this._state = States.PENDING;}
   __init2() {this._handlers = [];}

   constructor(
    executor,
  ) {SyncPromise.prototype.__init.call(this);SyncPromise.prototype.__init2.call(this);SyncPromise.prototype.__init3.call(this);SyncPromise.prototype.__init4.call(this);SyncPromise.prototype.__init5.call(this);SyncPromise.prototype.__init6.call(this);
    try {
      executor(this._resolve, this._reject);
    } catch (e) {
      this._reject(e);
    }
  }

  /** JSDoc */
   then(
    onfulfilled,
    onrejected,
  ) {
    return new SyncPromise((resolve, reject) => {
      this._handlers.push([
        false,
        result => {
          if (!onfulfilled) {
            // TODO: ¯\_(ツ)_/¯
            // TODO: FIXME
            resolve(result );
          } else {
            try {
              resolve(onfulfilled(result));
            } catch (e) {
              reject(e);
            }
          }
        },
        reason => {
          if (!onrejected) {
            reject(reason);
          } else {
            try {
              resolve(onrejected(reason));
            } catch (e) {
              reject(e);
            }
          }
        },
      ]);
      this._executeHandlers();
    });
  }

  /** JSDoc */
   catch(
    onrejected,
  ) {
    return this.then(val => val, onrejected);
  }

  /** JSDoc */
   finally(onfinally) {
    return new SyncPromise((resolve, reject) => {
      let val;
      let isRejected;

      return this.then(
        value => {
          isRejected = false;
          val = value;
          if (onfinally) {
            onfinally();
          }
        },
        reason => {
          isRejected = true;
          val = reason;
          if (onfinally) {
            onfinally();
          }
        },
      ).then(() => {
        if (isRejected) {
          reject(val);
          return;
        }

        resolve(val );
      });
    });
  }

  /** JSDoc */
    __init3() {this._resolve = (value) => {
    this._setResult(States.RESOLVED, value);
  };}

  /** JSDoc */
    __init4() {this._reject = (reason) => {
    this._setResult(States.REJECTED, reason);
  };}

  /** JSDoc */
    __init5() {this._setResult = (state, value) => {
    if (this._state !== States.PENDING) {
      return;
    }

    if (Object(_is_js__WEBPACK_IMPORTED_MODULE_0__["isThenable"])(value)) {
      void (value ).then(this._resolve, this._reject);
      return;
    }

    this._state = state;
    this._value = value;

    this._executeHandlers();
  };}

  /** JSDoc */
    __init6() {this._executeHandlers = () => {
    if (this._state === States.PENDING) {
      return;
    }

    const cachedHandlers = this._handlers.slice();
    this._handlers = [];

    cachedHandlers.forEach(handler => {
      if (handler[0]) {
        return;
      }

      if (this._state === States.RESOLVED) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        handler[1](this._value );
      }

      if (this._state === States.REJECTED) {
        handler[2](this._value);
      }

      handler[0] = true;
    });
  };}
}


//# sourceMappingURL=syncpromise.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/time.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/time.js ***!
  \************************************************/
/*! exports provided: _browserPerformanceTimeOriginMode, browserPerformanceTimeOrigin, dateTimestampInSeconds, timestampInSeconds, timestampWithMs, usingPerformanceAPI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_browserPerformanceTimeOriginMode", function() { return _browserPerformanceTimeOriginMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browserPerformanceTimeOrigin", function() { return browserPerformanceTimeOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dateTimestampInSeconds", function() { return dateTimestampInSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timestampInSeconds", function() { return timestampInSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timestampWithMs", function() { return timestampWithMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "usingPerformanceAPI", function() { return usingPerformanceAPI; });
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node.js */ "./node_modules/@sentry/utils/esm/node.js");
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");



// eslint-disable-next-line deprecation/deprecation
const WINDOW = Object(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__["getGlobalObject"])();

/**
 * An object that can return the current timestamp in seconds since the UNIX epoch.
 */

/**
 * A TimestampSource implementation for environments that do not support the Performance Web API natively.
 *
 * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier
 * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It
 * is more obvious to explain "why does my span have negative duration" than "why my spans have zero duration".
 */
const dateTimestampSource = {
  nowSeconds: () => Date.now() / 1000,
};

/**
 * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}
 * for accessing a high-resolution monotonic clock.
 */

/**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */
function getBrowserPerformance() {
  const { performance } = WINDOW;
  if (!performance || !performance.now) {
    return undefined;
  }

  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().
  //
  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
  // performance.now() gives a date arbitrarily in the past.
  //
  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
  // undefined.
  //
  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
  // interact with data coming out of performance entries.
  //
  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
  // observed skews that can be as long as days, weeks or months.
  //
  // See https://github.com/getsentry/sentry-javascript/issues/2590.
  //
  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
  // transactions of long-lived web pages.
  const timeOrigin = Date.now() - performance.now();

  return {
    now: () => performance.now(),
    timeOrigin,
  };
}

/**
 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
 * implement the API.
 */
function getNodePerformance() {
  try {
    const perfHooks = Object(_node_js__WEBPACK_IMPORTED_MODULE_0__["dynamicRequire"])(module, 'perf_hooks') ;
    return perfHooks.performance;
  } catch (_) {
    return undefined;
  }
}

/**
 * The Performance API implementation for the current platform, if available.
 */
const platformPerformance = Object(_node_js__WEBPACK_IMPORTED_MODULE_0__["isNodeEnv"])() ? getNodePerformance() : getBrowserPerformance();

const timestampSource =
  platformPerformance === undefined
    ? dateTimestampSource
    : {
        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,
      };

/**
 * Returns a timestamp in seconds since the UNIX epoch using the Date API.
 */
const dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);

/**
 * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the
 * availability of the Performance API.
 *
 * See `usingPerformanceAPI` to test whether the Performance API is used.
 *
 * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is
 * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The
 * skew can grow to arbitrary amounts like days, weeks or months.
 * See https://github.com/getsentry/sentry-javascript/issues/2590.
 */
const timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);

/**
 * Re-exported with an old name for backwards-compatibility.
 * TODO (v8): Remove this
 *
 * @deprecated Use `timestampInSeconds` instead.
 */
const timestampWithMs = timestampInSeconds;

/**
 * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.
 */
const usingPerformanceAPI = platformPerformance !== undefined;

/**
 * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.
 */
let _browserPerformanceTimeOriginMode;

/**
 * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the
 * performance API is available.
 */
const browserPerformanceTimeOrigin = (() => {
  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
  // data as reliable if they are within a reasonable threshold of the current time.

  const { performance } = WINDOW;
  if (!performance || !performance.now) {
    _browserPerformanceTimeOriginMode = 'none';
    return undefined;
  }

  const threshold = 3600 * 1000;
  const performanceNow = performance.now();
  const dateNow = Date.now();

  // if timeOrigin isn't available set delta to threshold so it isn't used
  const timeOriginDelta = performance.timeOrigin
    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)
    : threshold;
  const timeOriginIsReliable = timeOriginDelta < threshold;

  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin
  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.
  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always
  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the
  // Date API.
  // eslint-disable-next-line deprecation/deprecation
  const navigationStart = performance.timing && performance.timing.navigationStart;
  const hasNavigationStart = typeof navigationStart === 'number';
  // if navigationStart isn't available set delta to threshold so it isn't used
  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;
  const navigationStartIsReliable = navigationStartDelta < threshold;

  if (timeOriginIsReliable || navigationStartIsReliable) {
    // Use the more reliable time origin
    if (timeOriginDelta <= navigationStartDelta) {
      _browserPerformanceTimeOriginMode = 'timeOrigin';
      return performance.timeOrigin;
    } else {
      _browserPerformanceTimeOriginMode = 'navigationStart';
      return navigationStart;
    }
  }

  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.
  _browserPerformanceTimeOriginMode = 'dateNow';
  return dateNow;
})();


//# sourceMappingURL=time.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./node_modules/@sentry/utils/esm/tracing.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/tracing.js ***!
  \***************************************************/
/*! exports provided: TRACEPARENT_REGEXP, extractTraceparentData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRACEPARENT_REGEXP", function() { return TRACEPARENT_REGEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractTraceparentData", function() { return extractTraceparentData; });
const TRACEPARENT_REGEXP = new RegExp(
  '^[ \\t]*' + // whitespace
    '([0-9a-f]{32})?' + // trace_id
    '-?([0-9a-f]{16})?' + // span_id
    '-?([01])?' + // sampled
    '[ \\t]*$', // whitespace
);

/**
 * Extract transaction context data from a `sentry-trace` header.
 *
 * @param traceparent Traceparent string
 *
 * @returns Object containing data from the header, or undefined if traceparent string is malformed
 */
function extractTraceparentData(traceparent) {
  const matches = traceparent.match(TRACEPARENT_REGEXP);

  if (!traceparent || !matches) {
    // empty string or no matches is invalid traceparent data
    return undefined;
  }

  let parentSampled;
  if (matches[3] === '1') {
    parentSampled = true;
  } else if (matches[3] === '0') {
    parentSampled = false;
  }

  return {
    traceId: matches[1],
    parentSampled,
    parentSpanId: matches[2],
  };
}


//# sourceMappingURL=tracing.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/url.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/esm/url.js ***!
  \***********************************************/
/*! exports provided: getNumberOfUrlSegments, getSanitizedUrlString, parseUrl, stripUrlQueryAndFragment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNumberOfUrlSegments", function() { return getNumberOfUrlSegments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSanitizedUrlString", function() { return getSanitizedUrlString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return parseUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stripUrlQueryAndFragment", function() { return stripUrlQueryAndFragment; });
/**
 * Parses string form of URL into an object
 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
 * // intentionally using regex and not <a/> href parsing trick because React Native and other
 * // environments where DOM might not be available
 * @returns parsed URL object
 */
function parseUrl(url) {
  if (!url) {
    return {};
  }

  const match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);

  if (!match) {
    return {};
  }

  // coerce to undefined values to empty string so we don't get 'undefined'
  const query = match[6] || '';
  const fragment = match[8] || '';
  return {
    host: match[4],
    path: match[5],
    protocol: match[2],
    search: query,
    hash: fragment,
    relative: match[5] + query + fragment, // everything minus origin
  };
}

/**
 * Strip the query string and fragment off of a given URL or path (if present)
 *
 * @param urlPath Full URL or path, including possible query string and/or fragment
 * @returns URL or path without query string or fragment
 */
function stripUrlQueryAndFragment(urlPath) {
  // eslint-disable-next-line no-useless-escape
  return urlPath.split(/[\?#]/, 1)[0];
}

/**
 * Returns number of URL segments of a passed string URL.
 */
function getNumberOfUrlSegments(url) {
  // split at '/' or at '\/' to split regex urls correctly
  return url.split(/\\?\//).filter(s => s.length > 0 && s !== ',').length;
}

/**
 * Takes a URL object and returns a sanitized string which is safe to use as span description
 * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data
 */
function getSanitizedUrlString(url) {
  const { protocol, host, path } = url;

  const filteredHost =
    (host &&
      host
        // Always filter out authority
        .replace(/^.*@/, '[filtered]:[filtered]@')
        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise
        .replace(':80', '')
        .replace(':443', '')) ||
    '';

  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;
}


//# sourceMappingURL=url.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/userIntegrations.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/userIntegrations.js ***!
  \************************************************************/
/*! exports provided: addOrUpdateIntegration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addOrUpdateIntegration", function() { return addOrUpdateIntegration; });
/**
 * Recursively traverses an object to update an existing nested key.
 * Note: The provided key path must include existing properties,
 * the function will not create objects while traversing.
 *
 * @param obj An object to update
 * @param value The value to update the nested key with
 * @param keyPath The path to the key to update ex. fizz.buzz.foo
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setNestedKey(obj, keyPath, value) {
  // Ex. foo.bar.zoop will extract foo and bar.zoop
  const match = keyPath.match(/([a-z_]+)\.(.*)/i);
  // The match will be null when there's no more recursing to do, i.e., when we've reached the right level of the object
  if (match === null) {
    obj[keyPath] = value;
  } else {
    // `match[1]` is the initial segment of the path, and `match[2]` is the remainder of the path
    const innerObj = obj[match[1]];
    setNestedKey(innerObj, match[2], value);
  }
}

/**
 * Enforces inclusion of a given integration with specified options in an integration array originally determined by the
 * user, by either including the given default instance or by patching an existing user instance with the given options.
 *
 * Ideally this would happen when integrations are set up, but there isn't currently a mechanism there for merging
 * options from a default integration instance with those from a user-provided instance of the same integration, only
 * for allowing the user to override a default instance entirely. (TODO: Fix that.)
 *
 * @param defaultIntegrationInstance An instance of the integration with the correct options already set
 * @param userIntegrations Integrations defined by the user.
 * @param forcedOptions Options with which to patch an existing user-derived instance on the integration.
 * @returns A final integrations array.
 */
function addOrUpdateIntegration(
  defaultIntegrationInstance,
  userIntegrations,
  forcedOptions = {},
) {
  return (
    Array.isArray(userIntegrations)
      ? addOrUpdateIntegrationInArray(defaultIntegrationInstance, userIntegrations, forcedOptions)
      : addOrUpdateIntegrationInFunction(
          defaultIntegrationInstance,
          // Somehow TS can't figure out that not being an array makes this necessarily a function
          userIntegrations ,
          forcedOptions,
        )
  ) ;
}

function addOrUpdateIntegrationInArray(
  defaultIntegrationInstance,
  userIntegrations,
  forcedOptions,
) {
  const userInstance = userIntegrations.find(integration => integration.name === defaultIntegrationInstance.name);

  if (userInstance) {
    for (const [keyPath, value] of Object.entries(forcedOptions)) {
      setNestedKey(userInstance, keyPath, value);
    }

    return userIntegrations;
  }

  return [...userIntegrations, defaultIntegrationInstance];
}

function addOrUpdateIntegrationInFunction(
  defaultIntegrationInstance,
  userIntegrationsFunc,
  forcedOptions,
) {
  const wrapper = defaultIntegrations => {
    const userFinalIntegrations = userIntegrationsFunc(defaultIntegrations);

    // There are instances where we want the user to be able to prevent an integration from appearing at all, which they
    // would do by providing a function which filters out the integration in question. If that's happened in one of
    // those cases, don't add our default back in.
    if (defaultIntegrationInstance.allowExclusionByUser) {
      const userFinalInstance = userFinalIntegrations.find(
        integration => integration.name === defaultIntegrationInstance.name,
      );
      if (!userFinalInstance) {
        return userFinalIntegrations;
      }
    }

    return addOrUpdateIntegrationInArray(defaultIntegrationInstance, userFinalIntegrations, forcedOptions);
  };

  return wrapper;
}


//# sourceMappingURL=userIntegrations.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js ***!
  \***********************************************************************/
/*! exports provided: escapeStringForRegex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeStringForRegex", function() { return escapeStringForRegex; });
// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:
//   a) reduce the size by skipping the runtime type - checking
//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 12+).
//
// MIT License
//
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
// documentation files(the "Software"), to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and
// to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of
// the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

/**
 * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to
 * `new RegExp()`.
 *
 * @param regexString The string to escape
 * @returns An version of the string with all special regex characters escaped
 */
function escapeStringForRegex(regexString) {
  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems
  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.
  return regexString.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
}


//# sourceMappingURL=escapeStringForRegex.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/vendor/supportsHistory.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/vendor/supportsHistory.js ***!
  \******************************************************************/
/*! exports provided: supportsHistory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsHistory", function() { return supportsHistory; });
/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../worldwide.js */ "./node_modules/@sentry/utils/esm/worldwide.js");


// Based on https://github.com/angular/angular.js/pull/13945/files

// eslint-disable-next-line deprecation/deprecation
const WINDOW = Object(_worldwide_js__WEBPACK_IMPORTED_MODULE_0__["getGlobalObject"])();

/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */
function supportsHistory() {
  // NOTE: in Chrome App environment, touching history.pushState, *even inside
  //       a try/catch block*, will cause Chrome to output an error to console.error
  // borrowed from: https://github.com/angular/angular.js/pull/13945/files
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chrome = (WINDOW ).chrome;
  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
  /* eslint-enable @typescript-eslint/no-unsafe-member-access */
  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;

  return !isChromePackagedApp && hasHistoryApi;
}


//# sourceMappingURL=supportsHistory.js.map


/***/ }),

/***/ "./node_modules/@sentry/utils/esm/worldwide.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/worldwide.js ***!
  \*****************************************************/
/*! exports provided: GLOBAL_OBJ, getGlobalObject, getGlobalSingleton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GLOBAL_OBJ", function() { return GLOBAL_OBJ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGlobalObject", function() { return getGlobalObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGlobalSingleton", function() { return getGlobalSingleton; });
/** Internal global with common properties and Sentry extensions  */

// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification
// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js
// core-js has the following licence:
//
// Copyright (c) 2014-2022 Denis Pushkarev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/** Returns 'obj' if it's the global object, otherwise returns undefined */
function isGlobalObj(obj) {
  return obj && obj.Math == Math ? obj : undefined;
}

/** Get's the global object for the current JavaScript runtime */
const GLOBAL_OBJ =
  (typeof globalThis == 'object' && isGlobalObj(globalThis)) ||
  // eslint-disable-next-line no-restricted-globals
  (typeof window == 'object' && isGlobalObj(window)) ||
  (typeof self == 'object' && isGlobalObj(self)) ||
  (typeof global == 'object' && isGlobalObj(global)) ||
  (function () {
    return this;
  })() ||
  {};

/**
 * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8
 */
function getGlobalObject() {
  return GLOBAL_OBJ ;
}

/**
 * Returns a global singleton contained in the global `__SENTRY__` object.
 *
 * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory
 * function and added to the `__SENTRY__` object.
 *
 * @param name name of the global singleton on __SENTRY__
 * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`
 * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value
 * @returns the singleton
 */
function getGlobalSingleton(name, creator, obj) {
  const gbl = (obj || GLOBAL_OBJ) ;
  const __SENTRY__ = (gbl.__SENTRY__ = gbl.__SENTRY__ || {});
  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());
  return singleton;
}


//# sourceMappingURL=worldwide.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ "./node_modules/axios/lib/defaults/transitional.js");
var AxiosError = __webpack_require__(/*! ../core/AxiosError */ "./node_modules/axios/lib/core/AxiosError.js");
var CanceledError = __webpack_require__(/*! ../cancel/CanceledError */ "./node_modules/axios/lib/cancel/CanceledError.js");
var parseProtocol = __webpack_require__(/*! ../helpers/parseProtocol */ "./node_modules/axios/lib/helpers/parseProtocol.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new CanceledError() : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    var protocol = parseProtocol(fullPath);

    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults/index.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.CanceledError = __webpack_require__(/*! ./cancel/CanceledError */ "./node_modules/axios/lib/cancel/CanceledError.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
axios.VERSION = __webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version;
axios.toFormData = __webpack_require__(/*! ./helpers/toFormData */ "./node_modules/axios/lib/helpers/toFormData.js");

// Expose AxiosError class
axios.AxiosError = __webpack_require__(/*! ../lib/core/AxiosError */ "./node_modules/axios/lib/core/AxiosError.js");

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var CanceledError = __webpack_require__(/*! ./CanceledError */ "./node_modules/axios/lib/cancel/CanceledError.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AxiosError = __webpack_require__(/*! ../core/AxiosError */ "./node_modules/axios/lib/core/AxiosError.js");
var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function CanceledError(message) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

module.exports = CanceledError;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var buildFullPath = __webpack_require__(/*! ./buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  var fullPath = buildFullPath(config.baseURL, config.url);
  return buildURL(fullPath, config.params, config.paramsSerializer);
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

var prototype = AxiosError.prototype;
var descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED'
// eslint-disable-next-line func-names
].forEach(function(code) {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = function(error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);

  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

module.exports = AxiosError;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults/index.js");
var CanceledError = __webpack_require__(/*! ../cancel/CanceledError */ "./node_modules/axios/lib/cancel/CanceledError.js");

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AxiosError = __webpack_require__(/*! ./AxiosError */ "./node_modules/axios/lib/core/AxiosError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults/index.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var AxiosError = __webpack_require__(/*! ../core/AxiosError */ "./node_modules/axios/lib/core/AxiosError.js");
var transitionalDefaults = __webpack_require__(/*! ./transitional */ "./node_modules/axios/lib/defaults/transitional.js");
var toFormData = __webpack_require__(/*! ../helpers/toFormData */ "./node_modules/axios/lib/helpers/toFormData.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ../adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ../adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils.isObject(data);
    var contentType = headers && headers['Content-Type'];

    var isFileList;

    if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
      var _FormData = this.env && this.env.FormData;
      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: __webpack_require__(/*! ./env/FormData */ "./node_modules/axios/lib/helpers/null.js")
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "version": "0.27.2"
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// eslint-disable-next-line strict
module.exports = null;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/

function toFormData(obj, formData) {
  // eslint-disable-next-line no-param-reassign
  formData = formData || new FormData();

  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils.isPlainObject(data) || utils.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);

      utils.forEach(data, function each(value, key) {
        if (utils.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
            // eslint-disable-next-line func-names
            arr.forEach(function(el) {
              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });

      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);

  return formData;
}

module.exports = toFormData;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var VERSION = __webpack_require__(/*! ../env/data */ "./node_modules/axios/lib/env/data.js").version;
var AxiosError = __webpack_require__(/*! ../core/AxiosError */ "./node_modules/axios/lib/core/AxiosError.js");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

// eslint-disable-next-line func-names
var kindOf = (function(cache) {
  // eslint-disable-next-line func-names
  return function(thing) {
    var str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
})(Object.create(null));

function kindOfTest(type) {
  type = type.toLowerCase();
  return function isKindOf(thing) {
    return kindOf(thing) === type;
  };
}

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
var isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
var isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
var isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) ||
    toString.call(thing) === pattern ||
    (isFunction(thing.toString) && thing.toString() === pattern)
  );
}

/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
var isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */

function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */

function toFlatObject(sourceObj, destObj, filter) {
  var props;
  var i;
  var prop;
  var merged = {};

  destObj = destObj || {};

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if (!merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = Object.getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */
function endsWith(str, searchString, position) {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */
function toArray(thing) {
  if (!thing) return null;
  var i = thing.length;
  if (isUndefined(i)) return null;
  var arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

// eslint-disable-next-line func-names
var isTypedArray = (function(TypedArray) {
  // eslint-disable-next-line func-names
  return function(thing) {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  isTypedArray: isTypedArray,
  isFileList: isFileList
};


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/buffer/node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/buffer/node_modules/base64-js/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/buffer/node_modules/base64-js/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/js-sha256/src/sha256.js":
/*!**********************************************!*\
  !*** ./node_modules/js-sha256/src/sha256.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var ERROR = 'input is invalid type';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA256_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js");
  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  var blocks = [];

  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (outputType, is224) {
    return function (message) {
      return new Sha256(is224, true).update(message)[outputType]();
    };
  };

  var createMethod = function (is224) {
    var method = createOutputMethod('hex', is224);
    if (NODE_JS) {
      method = nodeWrap(method, is224);
    }
    method.create = function () {
      return new Sha256(is224);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type, is224);
    }
    return method;
  };

  var nodeWrap = function (method, is224) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var algorithm = is224 ? 'sha224' : 'sha256';
    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
      } else {
        if (message === null || message === undefined) {
          throw new Error(ERROR);
        } else if (message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
      }
      if (Array.isArray(message) || ArrayBuffer.isView(message) ||
        message.constructor === Buffer) {
        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
      } else {
        return method(message);
      }
    };
    return nodeMethod;
  };

  var createHmacOutputMethod = function (outputType, is224) {
    return function (key, message) {
      return new HmacSha256(key, is224, true).update(message)[outputType]();
    };
  };

  var createHmacMethod = function (is224) {
    var method = createHmacOutputMethod('hex', is224);
    method.create = function (key) {
      return new HmacSha256(key, is224);
    };
    method.update = function (key, message) {
      return method.create(key).update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createHmacOutputMethod(type, is224);
    }
    return method;
  };

  function Sha256(is224, sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    if (is224) {
      this.h0 = 0xc1059ed8;
      this.h1 = 0x367cd507;
      this.h2 = 0x3070dd17;
      this.h3 = 0xf70e5939;
      this.h4 = 0xffc00b31;
      this.h5 = 0x68581511;
      this.h6 = 0x64f98fa7;
      this.h7 = 0xbefa4fa4;
    } else { // 256
      this.h0 = 0x6a09e667;
      this.h1 = 0xbb67ae85;
      this.h2 = 0x3c6ef372;
      this.h3 = 0xa54ff53a;
      this.h4 = 0x510e527f;
      this.h5 = 0x9b05688c;
      this.h6 = 0x1f83d9ab;
      this.h7 = 0x5be0cd19;
    }

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
    this.is224 = is224;
  }

  Sha256.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
      notString = true;
    }
    var code, index = 0, i, length = message.length, blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }
    return this;
  };

  Sha256.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha256.prototype.hash = function () {
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

    for (j = 16; j < 64; ++j) {
      // rightrotate
      t1 = blocks[j - 15];
      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
      t1 = blocks[j - 2];
      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
    }

    bc = b & c;
    for (j = 0; j < 64; j += 4) {
      if (this.first) {
        if (this.is224) {
          ab = 300032;
          t1 = blocks[0] - 1413257819;
          h = t1 - 150054599 << 0;
          d = t1 + 24177077 << 0;
        } else {
          ab = 704751109;
          t1 = blocks[0] - 210244248;
          h = t1 - 1521486534 << 0;
          d = t1 + 143694565 << 0;
        }
        this.first = false;
      } else {
        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
        ab = a & b;
        maj = ab ^ (a & c) ^ bc;
        ch = (e & f) ^ (~e & g);
        t1 = h + s1 + ch + K[j] + blocks[j];
        t2 = s0 + maj;
        h = d + t1 << 0;
        d = t1 + t2 << 0;
      }
      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
      da = d & a;
      maj = da ^ (d & b) ^ ab;
      ch = (h & e) ^ (~h & f);
      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
      t2 = s0 + maj;
      g = c + t1 << 0;
      c = t1 + t2 << 0;
      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
      cd = c & d;
      maj = cd ^ (c & a) ^ da;
      ch = (g & h) ^ (~g & e);
      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
      t2 = s0 + maj;
      f = b + t1 << 0;
      b = t1 + t2 << 0;
      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
      bc = b & c;
      maj = bc ^ (b & d) ^ cd;
      ch = (f & g) ^ (~f & h);
      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
      t2 = s0 + maj;
      e = a + t1 << 0;
      a = t1 + t2 << 0;
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
    this.h5 = this.h5 + f << 0;
    this.h6 = this.h6 + g << 0;
    this.h7 = this.h7 + h << 0;
  };

  Sha256.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
    if (!this.is224) {
      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
    }
    return hex;
  };

  Sha256.prototype.toString = Sha256.prototype.hex;

  Sha256.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var arr = [
      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
    ];
    if (!this.is224) {
      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
    }
    return arr;
  };

  Sha256.prototype.array = Sha256.prototype.digest;

  Sha256.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    dataView.setUint32(20, this.h5);
    dataView.setUint32(24, this.h6);
    if (!this.is224) {
      dataView.setUint32(28, this.h7);
    }
    return buffer;
  };

  function HmacSha256(key, is224, sharedMemory) {
    var i, type = typeof key;
    if (type === 'string') {
      var bytes = [], length = key.length, index = 0, code;
      for (i = 0; i < length; ++i) {
        code = key.charCodeAt(i);
        if (code < 0x80) {
          bytes[index++] = code;
        } else if (code < 0x800) {
          bytes[index++] = (0xc0 | (code >> 6));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes[index++] = (0xe0 | (code >> 12));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
          bytes[index++] = (0xf0 | (code >> 18));
          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        }
      }
      key = bytes;
    } else {
      if (type === 'object') {
        if (key === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
          key = new Uint8Array(key);
        } else if (!Array.isArray(key)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
    }

    if (key.length > 64) {
      key = (new Sha256(is224, true)).update(key).array();
    }

    var oKeyPad = [], iKeyPad = [];
    for (i = 0; i < 64; ++i) {
      var b = key[i] || 0;
      oKeyPad[i] = 0x5c ^ b;
      iKeyPad[i] = 0x36 ^ b;
    }

    Sha256.call(this, is224, sharedMemory);

    this.update(iKeyPad);
    this.oKeyPad = oKeyPad;
    this.inner = true;
    this.sharedMemory = sharedMemory;
  }
  HmacSha256.prototype = new Sha256();

  HmacSha256.prototype.finalize = function () {
    Sha256.prototype.finalize.call(this);
    if (this.inner) {
      this.inner = false;
      var innerHash = this.array();
      Sha256.call(this, this.is224, this.sharedMemory);
      this.update(this.oKeyPad);
      this.update(innerHash);
      Sha256.prototype.finalize.call(this);
    }
  };

  var exports = createMethod();
  exports.sha256 = exports;
  exports.sha224 = createMethod(true);
  exports.sha256.hmac = createHmacMethod();
  exports.sha224.hmac = createHmacMethod(true);

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha256 = exports.sha256;
    root.sha224 = exports.sha224;
    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/keycloak-js/dist/keycloak.js":
/*!***************************************************!*\
  !*** ./node_modules/keycloak-js/dist/keycloak.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
    if ( true ) {
        if ( true ) {
            module.exports = factory( __webpack_require__(/*! js-sha256 */ "./node_modules/js-sha256/src/sha256.js"), __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js") );
        } else {}
    } else { var Keycloak; }
})(window, function (sha256_imported, base64js_imported) {
    if (typeof Promise === 'undefined') {
        throw Error('Keycloak requires an environment that supports Promises. Make sure that you include the appropriate polyfill.');
    }

    var loggedPromiseDeprecation = false;

    function logPromiseDeprecation() {
        if (!loggedPromiseDeprecation) {
            loggedPromiseDeprecation = true;
            console.warn('[KEYCLOAK] Usage of legacy style promise methods such as `.error()` and `.success()` has been deprecated and support will be removed in future versions. Use standard style promise methods such as `.then() and `.catch()` instead.');
        }
    }

    function Keycloak (config) {
        if (!(this instanceof Keycloak)) {
            return new Keycloak(config);
        }

        var kc = this;
        var adapter;
        var refreshQueue = [];
        var callbackStorage;

        var loginIframe = {
            enable: true,
            callbackList: [],
            interval: 5
        };

        var scripts = document.getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            if ((scripts[i].src.indexOf('keycloak.js') !== -1 || scripts[i].src.indexOf('keycloak.min.js') !== -1) && scripts[i].src.indexOf('version=') !== -1) {
                kc.iframeVersion = scripts[i].src.substring(scripts[i].src.indexOf('version=') + 8).split('&')[0];
            }
        }

        var useNonce = true;
        var logInfo = createLogger(console.info);
        var logWarn = createLogger(console.warn);

        kc.init = function (initOptions) {
            kc.authenticated = false;

            callbackStorage = createCallbackStorage();
            var adapters = ['default', 'cordova', 'cordova-native'];

            if (initOptions && adapters.indexOf(initOptions.adapter) > -1) {
                adapter = loadAdapter(initOptions.adapter);
            } else if (initOptions && typeof initOptions.adapter === "object") {
                adapter = initOptions.adapter;
            } else {
                if (window.Cordova || window.cordova) {
                    adapter = loadAdapter('cordova');
                } else {
                    adapter = loadAdapter();
                }
            }

            if (initOptions) {
                if (typeof initOptions.useNonce !== 'undefined') {
                    useNonce = initOptions.useNonce;
                }

                if (typeof initOptions.checkLoginIframe !== 'undefined') {
                    loginIframe.enable = initOptions.checkLoginIframe;
                }

                if (initOptions.checkLoginIframeInterval) {
                    loginIframe.interval = initOptions.checkLoginIframeInterval;
                }

                if (initOptions.onLoad === 'login-required') {
                    kc.loginRequired = true;
                }

                if (initOptions.responseMode) {
                    if (initOptions.responseMode === 'query' || initOptions.responseMode === 'fragment') {
                        kc.responseMode = initOptions.responseMode;
                    } else {
                        throw 'Invalid value for responseMode';
                    }
                }

                if (initOptions.flow) {
                    switch (initOptions.flow) {
                        case 'standard':
                            kc.responseType = 'code';
                            break;
                        case 'implicit':
                            kc.responseType = 'id_token token';
                            break;
                        case 'hybrid':
                            kc.responseType = 'code id_token token';
                            break;
                        default:
                            throw 'Invalid value for flow';
                    }
                    kc.flow = initOptions.flow;
                }

                if (initOptions.timeSkew != null) {
                    kc.timeSkew = initOptions.timeSkew;
                }

                if(initOptions.redirectUri) {
                    kc.redirectUri = initOptions.redirectUri;
                }

                if (initOptions.silentCheckSsoRedirectUri) {
                    kc.silentCheckSsoRedirectUri = initOptions.silentCheckSsoRedirectUri;
                }

                if (typeof initOptions.silentCheckSsoFallback === 'boolean') {
                    kc.silentCheckSsoFallback = initOptions.silentCheckSsoFallback;
                } else {
                    kc.silentCheckSsoFallback = true;
                }

                if (initOptions.pkceMethod) {
                    if (initOptions.pkceMethod !== "S256") {
                        throw 'Invalid value for pkceMethod';
                    }
                    kc.pkceMethod = initOptions.pkceMethod;
                }

                if (typeof initOptions.enableLogging === 'boolean') {
                    kc.enableLogging = initOptions.enableLogging;
                } else {
                    kc.enableLogging = false;
                }

                if (typeof initOptions.scope === 'string') {
                    kc.scope = initOptions.scope;
                }

                if (typeof initOptions.messageReceiveTimeout === 'number' && initOptions.messageReceiveTimeout > 0) {
                    kc.messageReceiveTimeout = initOptions.messageReceiveTimeout;
                } else {
                    kc.messageReceiveTimeout = 10000;
                }
            }

            if (!kc.responseMode) {
                kc.responseMode = 'fragment';
            }
            if (!kc.responseType) {
                kc.responseType = 'code';
                kc.flow = 'standard';
            }

            var promise = createPromise();

            var initPromise = createPromise();
            initPromise.promise.then(function() {
                kc.onReady && kc.onReady(kc.authenticated);
                promise.setSuccess(kc.authenticated);
            }).catch(function(error) {
                promise.setError(error);
            });

            var configPromise = loadConfig(config);

            function onLoad() {
                var doLogin = function(prompt) {
                    if (!prompt) {
                        options.prompt = 'none';
                    }

                    kc.login(options).then(function () {
                        initPromise.setSuccess();
                    }).catch(function (error) {
                        initPromise.setError(error);
                    });
                }

                var checkSsoSilently = function() {
                    var ifrm = document.createElement("iframe");
                    var src = kc.createLoginUrl({prompt: 'none', redirectUri: kc.silentCheckSsoRedirectUri});
                    ifrm.setAttribute("src", src);
                    ifrm.setAttribute("title", "keycloak-silent-check-sso");
                    ifrm.style.display = "none";
                    document.body.appendChild(ifrm);

                    var messageCallback = function(event) {
                        if (event.origin !== window.location.origin || ifrm.contentWindow !== event.source) {
                            return;
                        }

                        var oauth = parseCallback(event.data);
                        processCallback(oauth, initPromise);

                        document.body.removeChild(ifrm);
                        window.removeEventListener("message", messageCallback);
                    };

                    window.addEventListener("message", messageCallback);
                };

                var options = {};
                switch (initOptions.onLoad) {
                    case 'check-sso':
                        if (loginIframe.enable) {
                            setupCheckLoginIframe().then(function() {
                                checkLoginIframe().then(function (unchanged) {
                                    if (!unchanged) {
                                        kc.silentCheckSsoRedirectUri ? checkSsoSilently() : doLogin(false);
                                    } else {
                                        initPromise.setSuccess();
                                    }
                                }).catch(function (error) {
                                    initPromise.setError(error);
                                });
                            });
                        } else {
                            kc.silentCheckSsoRedirectUri ? checkSsoSilently() : doLogin(false);
                        }
                        break;
                    case 'login-required':
                        doLogin(true);
                        break;
                    default:
                        throw 'Invalid value for onLoad';
                }
            }

            function processInit() {
                var callback = parseCallback(window.location.href);

                if (callback) {
                    window.history.replaceState(window.history.state, null, callback.newUrl);
                }

                if (callback && callback.valid) {
                    return setupCheckLoginIframe().then(function() {
                        processCallback(callback, initPromise);
                    }).catch(function (error) {
                        initPromise.setError(error);
                    });
                } else if (initOptions) {
                    if (initOptions.token && initOptions.refreshToken) {
                        setToken(initOptions.token, initOptions.refreshToken, initOptions.idToken);

                        if (loginIframe.enable) {
                            setupCheckLoginIframe().then(function() {
                                checkLoginIframe().then(function (unchanged) {
                                    if (unchanged) {
                                        kc.onAuthSuccess && kc.onAuthSuccess();
                                        initPromise.setSuccess();
                                        scheduleCheckIframe();
                                    } else {
                                        initPromise.setSuccess();
                                    }
                                }).catch(function (error) {
                                    initPromise.setError(error);
                                });
                            });
                        } else {
                            kc.updateToken(-1).then(function() {
                                kc.onAuthSuccess && kc.onAuthSuccess();
                                initPromise.setSuccess();
                            }).catch(function(error) {
                                kc.onAuthError && kc.onAuthError();
                                if (initOptions.onLoad) {
                                    onLoad();
                                } else {
                                    initPromise.setError(error);
                                }
                            });
                        }
                    } else if (initOptions.onLoad) {
                        onLoad();
                    } else {
                        initPromise.setSuccess();
                    }
                } else {
                    initPromise.setSuccess();
                }
            }

            function domReady() {
                var promise = createPromise();

                var checkReadyState = function () {
                    if (document.readyState === 'interactive' || document.readyState === 'complete') {
                        document.removeEventListener('readystatechange', checkReadyState);
                        promise.setSuccess();
                    }
                }
                document.addEventListener('readystatechange', checkReadyState);

                checkReadyState(); // just in case the event was already fired and we missed it (in case the init is done later than at the load time, i.e. it's done from code)

                return promise.promise;
            }

            configPromise.then(function () {
                domReady()
                    .then(check3pCookiesSupported)
                    .then(processInit)
                    .catch(function (error) {
                        promise.setError(error);
                    });
            });
            configPromise.catch(function (error) {
                promise.setError(error);
            });

            return promise.promise;
        }

        kc.login = function (options) {
            return adapter.login(options);
        }

        function generateRandomData(len) {
            // use web crypto APIs if possible
            var array = null;
            var crypto = window.crypto || window.msCrypto;
            if (crypto && crypto.getRandomValues && window.Uint8Array) {
                array = new Uint8Array(len);
                crypto.getRandomValues(array);
                return array;
            }

            // fallback to Math random
            array = new Array(len);
            for (var j = 0; j < array.length; j++) {
                array[j] = Math.floor(256 * Math.random());
            }
            return array;
        }

        function generateCodeVerifier(len) {
            return generateRandomString(len, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
        }

        function generateRandomString(len, alphabet){
            var randomData = generateRandomData(len);
            var chars = new Array(len);
            for (var i = 0; i < len; i++) {
                chars[i] = alphabet.charCodeAt(randomData[i] % alphabet.length);
            }
            return String.fromCharCode.apply(null, chars);
        }

        function generatePkceChallenge(pkceMethod, codeVerifier) {
            switch (pkceMethod) {
                // The use of the "plain" method is considered insecure and therefore not supported.
                case "S256":
                    // hash codeVerifier, then encode as url-safe base64 without padding
                    var hashBytes = new Uint8Array(sha256_imported.arrayBuffer(codeVerifier));
                    var encodedHash = base64js_imported.fromByteArray(hashBytes)
                        .replace(/\+/g, '-')
                        .replace(/\//g, '_')
                        .replace(/\=/g, '');
                    return encodedHash;
                default:
                    throw 'Invalid value for pkceMethod';
            }
        }

        kc.createLoginUrl = function(options) {
            var state = createUUID();
            var nonce = createUUID();

            var redirectUri = adapter.redirectUri(options);

            var callbackState = {
                state: state,
                nonce: nonce,
                redirectUri: encodeURIComponent(redirectUri)
            };

            if (options && options.prompt) {
                callbackState.prompt = options.prompt;
            }

            var baseUrl;
            if (options && options.action == 'register') {
                baseUrl = kc.endpoints.register();
            } else {
                baseUrl = kc.endpoints.authorize();
            }

            var scope = options && options.scope || kc.scope;
            if (!scope) {
                // if scope is not set, default to "openid"
                scope = "openid";
            } else if (scope.indexOf("openid") === -1) {
                // if openid scope is missing, prefix the given scopes with it
                scope = "openid " + scope;
            }

            var url = baseUrl
                + '?client_id=' + encodeURIComponent(kc.clientId)
                + '&redirect_uri=' + encodeURIComponent(redirectUri)
                + '&state=' + encodeURIComponent(state)
                + '&response_mode=' + encodeURIComponent(kc.responseMode)
                + '&response_type=' + encodeURIComponent(kc.responseType)
                + '&scope=' + encodeURIComponent(scope);
            if (useNonce) {
                url = url + '&nonce=' + encodeURIComponent(nonce);
            }

            if (options && options.prompt) {
                url += '&prompt=' + encodeURIComponent(options.prompt);
            }

            if (options && options.maxAge) {
                url += '&max_age=' + encodeURIComponent(options.maxAge);
            }

            if (options && options.loginHint) {
                url += '&login_hint=' + encodeURIComponent(options.loginHint);
            }

            if (options && options.idpHint) {
                url += '&kc_idp_hint=' + encodeURIComponent(options.idpHint);
            }

            if (options && options.action && options.action != 'register') {
                url += '&kc_action=' + encodeURIComponent(options.action);
            }

            if (options && options.locale) {
                url += '&ui_locales=' + encodeURIComponent(options.locale);
            }

            if (kc.pkceMethod) {
                var codeVerifier = generateCodeVerifier(96);
                callbackState.pkceCodeVerifier = codeVerifier;
                var pkceChallenge = generatePkceChallenge(kc.pkceMethod, codeVerifier);
                url += '&code_challenge=' + pkceChallenge;
                url += '&code_challenge_method=' + kc.pkceMethod;
            }

            callbackStorage.add(callbackState);

            return url;
        }

        kc.logout = function(options) {
            return adapter.logout(options);
        }

        kc.createLogoutUrl = function(options) {
            var url = kc.endpoints.logout()
                + '?redirect_uri=' + encodeURIComponent(adapter.redirectUri(options, false));

            return url;
        }

        kc.register = function (options) {
            return adapter.register(options);
        }

        kc.createRegisterUrl = function(options) {
            if (!options) {
                options = {};
            }
            options.action = 'register';
            return kc.createLoginUrl(options);
        }

        kc.createAccountUrl = function(options) {
            var realm = getRealmUrl();
            var url = undefined;
            if (typeof realm !== 'undefined') {
                url = realm
                + '/account'
                + '?referrer=' + encodeURIComponent(kc.clientId)
                + '&referrer_uri=' + encodeURIComponent(adapter.redirectUri(options));
            }
            return url;
        }

        kc.accountManagement = function() {
            return adapter.accountManagement();
        }

        kc.hasRealmRole = function (role) {
            var access = kc.realmAccess;
            return !!access && access.roles.indexOf(role) >= 0;
        }

        kc.hasResourceRole = function(role, resource) {
            if (!kc.resourceAccess) {
                return false;
            }

            var access = kc.resourceAccess[resource || kc.clientId];
            return !!access && access.roles.indexOf(role) >= 0;
        }

        kc.loadUserProfile = function() {
            var url = getRealmUrl() + '/account';
            var req = new XMLHttpRequest();
            req.open('GET', url, true);
            req.setRequestHeader('Accept', 'application/json');
            req.setRequestHeader('Authorization', 'bearer ' + kc.token);

            var promise = createPromise();

            req.onreadystatechange = function () {
                if (req.readyState == 4) {
                    if (req.status == 200) {
                        kc.profile = JSON.parse(req.responseText);
                        promise.setSuccess(kc.profile);
                    } else {
                        promise.setError();
                    }
                }
            }

            req.send();

            return promise.promise;
        }

        kc.loadUserInfo = function() {
            var url = kc.endpoints.userinfo();
            var req = new XMLHttpRequest();
            req.open('GET', url, true);
            req.setRequestHeader('Accept', 'application/json');
            req.setRequestHeader('Authorization', 'bearer ' + kc.token);

            var promise = createPromise();

            req.onreadystatechange = function () {
                if (req.readyState == 4) {
                    if (req.status == 200) {
                        kc.userInfo = JSON.parse(req.responseText);
                        promise.setSuccess(kc.userInfo);
                    } else {
                        promise.setError();
                    }
                }
            }

            req.send();

            return promise.promise;
        }

        kc.isTokenExpired = function(minValidity) {
            if (!kc.tokenParsed || (!kc.refreshToken && kc.flow != 'implicit' )) {
                throw 'Not authenticated';
            }

            if (kc.timeSkew == null) {
                logInfo('[KEYCLOAK] Unable to determine if token is expired as timeskew is not set');
                return true;
            }

            var expiresIn = kc.tokenParsed['exp'] - Math.ceil(new Date().getTime() / 1000) + kc.timeSkew;
            if (minValidity) {
                if (isNaN(minValidity)) {
                    throw 'Invalid minValidity';
                }
                expiresIn -= minValidity;
            }
            return expiresIn < 0;
        }

        kc.updateToken = function(minValidity) {
            var promise = createPromise();

            if (!kc.refreshToken) {
                promise.setError();
                return promise.promise;
            }

            minValidity = minValidity || 5;

            var exec = function() {
                var refreshToken = false;
                if (minValidity == -1) {
                    refreshToken = true;
                    logInfo('[KEYCLOAK] Refreshing token: forced refresh');
                } else if (!kc.tokenParsed || kc.isTokenExpired(minValidity)) {
                    refreshToken = true;
                    logInfo('[KEYCLOAK] Refreshing token: token expired');
                }

                if (!refreshToken) {
                    promise.setSuccess(false);
                } else {
                    var params = 'grant_type=refresh_token&' + 'refresh_token=' + kc.refreshToken;
                    var url = kc.endpoints.token();

                    refreshQueue.push(promise);

                    if (refreshQueue.length == 1) {
                        var req = new XMLHttpRequest();
                        req.open('POST', url, true);
                        req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                        req.withCredentials = true;

                        params += '&client_id=' + encodeURIComponent(kc.clientId);

                        var timeLocal = new Date().getTime();

                        req.onreadystatechange = function () {
                            if (req.readyState == 4) {
                                if (req.status == 200) {
                                    logInfo('[KEYCLOAK] Token refreshed');

                                    timeLocal = (timeLocal + new Date().getTime()) / 2;

                                    var tokenResponse = JSON.parse(req.responseText);

                                    setToken(tokenResponse['access_token'], tokenResponse['refresh_token'], tokenResponse['id_token'], timeLocal);

                                    kc.onAuthRefreshSuccess && kc.onAuthRefreshSuccess();
                                    for (var p = refreshQueue.pop(); p != null; p = refreshQueue.pop()) {
                                        p.setSuccess(true);
                                    }
                                } else {
                                    logWarn('[KEYCLOAK] Failed to refresh token');

                                    if (req.status == 400) {
                                        kc.clearToken();
                                    }

                                    kc.onAuthRefreshError && kc.onAuthRefreshError();
                                    for (var p = refreshQueue.pop(); p != null; p = refreshQueue.pop()) {
                                        p.setError(true);
                                    }
                                }
                            }
                        };

                        req.send(params);
                    }
                }
            }

            if (loginIframe.enable) {
                var iframePromise = checkLoginIframe();
                iframePromise.then(function() {
                    exec();
                }).catch(function(error) {
                    promise.setError(error);
                });
            } else {
                exec();
            }

            return promise.promise;
        }

        kc.clearToken = function() {
            if (kc.token) {
                setToken(null, null, null);
                kc.onAuthLogout && kc.onAuthLogout();
                if (kc.loginRequired) {
                    kc.login();
                }
            }
        }

        function getRealmUrl() {
            if (typeof kc.authServerUrl !== 'undefined') {
                if (kc.authServerUrl.charAt(kc.authServerUrl.length - 1) == '/') {
                    return kc.authServerUrl + 'realms/' + encodeURIComponent(kc.realm);
                } else {
                    return kc.authServerUrl + '/realms/' + encodeURIComponent(kc.realm);
                }
            } else {
            	return undefined;
            }
        }

        function getOrigin() {
            if (!window.location.origin) {
                return window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
            } else {
                return window.location.origin;
            }
        }

        function processCallback(oauth, promise) {
            var code = oauth.code;
            var error = oauth.error;
            var prompt = oauth.prompt;

            var timeLocal = new Date().getTime();

            if (oauth['kc_action_status']) {
                kc.onActionUpdate && kc.onActionUpdate(oauth['kc_action_status']);
            }

            if (error) {
                if (prompt != 'none') {
                    var errorData = { error: error, error_description: oauth.error_description };
                    kc.onAuthError && kc.onAuthError(errorData);
                    promise && promise.setError(errorData);
                } else {
                    promise && promise.setSuccess();
                }
                return;
            } else if ((kc.flow != 'standard') && (oauth.access_token || oauth.id_token)) {
                authSuccess(oauth.access_token, null, oauth.id_token, true);
            }

            if ((kc.flow != 'implicit') && code) {
                var params = 'code=' + code + '&grant_type=authorization_code';
                var url = kc.endpoints.token();

                var req = new XMLHttpRequest();
                req.open('POST', url, true);
                req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

                params += '&client_id=' + encodeURIComponent(kc.clientId);
                params += '&redirect_uri=' + oauth.redirectUri;

                if (oauth.pkceCodeVerifier) {
                    params += '&code_verifier=' + oauth.pkceCodeVerifier;
                }

                req.withCredentials = true;

                req.onreadystatechange = function() {
                    if (req.readyState == 4) {
                        if (req.status == 200) {

                            var tokenResponse = JSON.parse(req.responseText);
                            authSuccess(tokenResponse['access_token'], tokenResponse['refresh_token'], tokenResponse['id_token'], kc.flow === 'standard');
                            scheduleCheckIframe();
                        } else {
                            kc.onAuthError && kc.onAuthError();
                            promise && promise.setError();
                        }
                    }
                };

                req.send(params);
            }

            function authSuccess(accessToken, refreshToken, idToken, fulfillPromise) {
                timeLocal = (timeLocal + new Date().getTime()) / 2;

                setToken(accessToken, refreshToken, idToken, timeLocal);

                if (useNonce && ((kc.tokenParsed && kc.tokenParsed.nonce != oauth.storedNonce) ||
                    (kc.refreshTokenParsed && kc.refreshTokenParsed.nonce != oauth.storedNonce) ||
                    (kc.idTokenParsed && kc.idTokenParsed.nonce != oauth.storedNonce))) {

                    logInfo('[KEYCLOAK] Invalid nonce, clearing token');
                    kc.clearToken();
                    promise && promise.setError();
                } else {
                    if (fulfillPromise) {
                        kc.onAuthSuccess && kc.onAuthSuccess();
                        promise && promise.setSuccess();
                    }
                }
            }

        }

        function loadConfig(url) {
            var promise = createPromise();
            var configUrl;

            if (!config) {
                configUrl = 'keycloak.json';
            } else if (typeof config === 'string') {
                configUrl = config;
            }

            function setupOidcEndoints(oidcConfiguration) {
                if (! oidcConfiguration) {
                    kc.endpoints = {
                        authorize: function() {
                            return getRealmUrl() + '/protocol/openid-connect/auth';
                        },
                        token: function() {
                            return getRealmUrl() + '/protocol/openid-connect/token';
                        },
                        logout: function() {
                            return getRealmUrl() + '/protocol/openid-connect/logout';
                        },
                        checkSessionIframe: function() {
                            var src = getRealmUrl() + '/protocol/openid-connect/login-status-iframe.html';
                            if (kc.iframeVersion) {
                              src = src + '?version=' + kc.iframeVersion;
                            }
                            return src;
                        },
                        thirdPartyCookiesIframe: function() {
                            var src = getRealmUrl() + '/protocol/openid-connect/3p-cookies/step1.html';
                            if (kc.iframeVersion) {
                                src = src + '?version=' + kc.iframeVersion;
                            }
                            return src;
                        },
                        register: function() {
                            return getRealmUrl() + '/protocol/openid-connect/registrations';
                        },
                        userinfo: function() {
                            return getRealmUrl() + '/protocol/openid-connect/userinfo';
                        }
                    };
                } else {
                    kc.endpoints = {
                        authorize: function() {
                            return oidcConfiguration.authorization_endpoint;
                        },
                        token: function() {
                            return oidcConfiguration.token_endpoint;
                        },
                        logout: function() {
                            if (!oidcConfiguration.end_session_endpoint) {
                                throw "Not supported by the OIDC server";
                            }
                            return oidcConfiguration.end_session_endpoint;
                        },
                        checkSessionIframe: function() {
                            if (!oidcConfiguration.check_session_iframe) {
                                throw "Not supported by the OIDC server";
                            }
                            return oidcConfiguration.check_session_iframe;
                        },
                        register: function() {
                            throw 'Redirection to "Register user" page not supported in standard OIDC mode';
                        },
                        userinfo: function() {
                            if (!oidcConfiguration.userinfo_endpoint) {
                                throw "Not supported by the OIDC server";
                            }
                            return oidcConfiguration.userinfo_endpoint;
                        }
                    }
                }
            }

            if (configUrl) {
                var req = new XMLHttpRequest();
                req.open('GET', configUrl, true);
                req.setRequestHeader('Accept', 'application/json');

                req.onreadystatechange = function () {
                    if (req.readyState == 4) {
                        if (req.status == 200 || fileLoaded(req)) {
                            var config = JSON.parse(req.responseText);

                            kc.authServerUrl = config['auth-server-url'];
                            kc.realm = config['realm'];
                            kc.clientId = config['resource'];
                            setupOidcEndoints(null);
                            promise.setSuccess();
                        } else {
                            promise.setError();
                        }
                    }
                };

                req.send();
            } else {
                if (!config.clientId) {
                    throw 'clientId missing';
                }

                kc.clientId = config.clientId;

                var oidcProvider = config['oidcProvider'];
                if (!oidcProvider) {
                    if (!config['url']) {
                        var scripts = document.getElementsByTagName('script');
                        for (var i = 0; i < scripts.length; i++) {
                            if (scripts[i].src.match(/.*keycloak\.js/)) {
                                config.url = scripts[i].src.substr(0, scripts[i].src.indexOf('/js/keycloak.js'));
                                break;
                            }
                        }
                    }
                    if (!config.realm) {
                        throw 'realm missing';
                    }

                    kc.authServerUrl = config.url;
                    kc.realm = config.realm;
                    setupOidcEndoints(null);
                    promise.setSuccess();
                } else {
                    if (typeof oidcProvider === 'string') {
                        var oidcProviderConfigUrl;
                        if (oidcProvider.charAt(oidcProvider.length - 1) == '/') {
                            oidcProviderConfigUrl = oidcProvider + '.well-known/openid-configuration';
                        } else {
                            oidcProviderConfigUrl = oidcProvider + '/.well-known/openid-configuration';
                        }
                        var req = new XMLHttpRequest();
                        req.open('GET', oidcProviderConfigUrl, true);
                        req.setRequestHeader('Accept', 'application/json');

                        req.onreadystatechange = function () {
                            if (req.readyState == 4) {
                                if (req.status == 200 || fileLoaded(req)) {
                                    var oidcProviderConfig = JSON.parse(req.responseText);
                                    setupOidcEndoints(oidcProviderConfig);
                                    promise.setSuccess();
                                } else {
                                    promise.setError();
                                }
                            }
                        };

                        req.send();
                    } else {
                        setupOidcEndoints(oidcProvider);
                        promise.setSuccess();
                    }
                }
            }

            return promise.promise;
        }

        function fileLoaded(xhr) {
            return xhr.status == 0 && xhr.responseText && xhr.responseURL.startsWith('file:');
        }

        function setToken(token, refreshToken, idToken, timeLocal) {
            if (kc.tokenTimeoutHandle) {
                clearTimeout(kc.tokenTimeoutHandle);
                kc.tokenTimeoutHandle = null;
            }

            if (refreshToken) {
                kc.refreshToken = refreshToken;
                kc.refreshTokenParsed = decodeToken(refreshToken);
            } else {
                delete kc.refreshToken;
                delete kc.refreshTokenParsed;
            }

            if (idToken) {
                kc.idToken = idToken;
                kc.idTokenParsed = decodeToken(idToken);
            } else {
                delete kc.idToken;
                delete kc.idTokenParsed;
            }

            if (token) {
                kc.token = token;
                kc.tokenParsed = decodeToken(token);
                kc.sessionId = kc.tokenParsed.session_state;
                kc.authenticated = true;
                kc.subject = kc.tokenParsed.sub;
                kc.realmAccess = kc.tokenParsed.realm_access;
                kc.resourceAccess = kc.tokenParsed.resource_access;

                if (timeLocal) {
                    kc.timeSkew = Math.floor(timeLocal / 1000) - kc.tokenParsed.iat;
                }

                if (kc.timeSkew != null) {
                    logInfo('[KEYCLOAK] Estimated time difference between browser and server is ' + kc.timeSkew + ' seconds');

                    if (kc.onTokenExpired) {
                        var expiresIn = (kc.tokenParsed['exp'] - (new Date().getTime() / 1000) + kc.timeSkew) * 1000;
                        logInfo('[KEYCLOAK] Token expires in ' + Math.round(expiresIn / 1000) + ' s');
                        if (expiresIn <= 0) {
                            kc.onTokenExpired();
                        } else {
                            kc.tokenTimeoutHandle = setTimeout(kc.onTokenExpired, expiresIn);
                        }
                    }
                }
            } else {
                delete kc.token;
                delete kc.tokenParsed;
                delete kc.subject;
                delete kc.realmAccess;
                delete kc.resourceAccess;

                kc.authenticated = false;
            }
        }

        function decodeToken(str) {
            str = str.split('.')[1];

            str = str.replace(/-/g, '+');
            str = str.replace(/_/g, '/');
            switch (str.length % 4) {
                case 0:
                    break;
                case 2:
                    str += '==';
                    break;
                case 3:
                    str += '=';
                    break;
                default:
                    throw 'Invalid token';
            }

            str = decodeURIComponent(escape(atob(str)));

            str = JSON.parse(str);
            return str;
        }

        function createUUID() {
            var hexDigits = '0123456789abcdef';
            var s = generateRandomString(36, hexDigits).split("");
            s[14] = '4';
            s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
            s[8] = s[13] = s[18] = s[23] = '-';
            var uuid = s.join('');
            return uuid;
        }

        function parseCallback(url) {
            var oauth = parseCallbackUrl(url);
            if (!oauth) {
                return;
            }

            var oauthState = callbackStorage.get(oauth.state);

            if (oauthState) {
                oauth.valid = true;
                oauth.redirectUri = oauthState.redirectUri;
                oauth.storedNonce = oauthState.nonce;
                oauth.prompt = oauthState.prompt;
                oauth.pkceCodeVerifier = oauthState.pkceCodeVerifier;
            }

            return oauth;
        }

        function parseCallbackUrl(url) {
            var supportedParams;
            switch (kc.flow) {
                case 'standard':
                    supportedParams = ['code', 'state', 'session_state', 'kc_action_status'];
                    break;
                case 'implicit':
                    supportedParams = ['access_token', 'token_type', 'id_token', 'state', 'session_state', 'expires_in', 'kc_action_status'];
                    break;
                case 'hybrid':
                    supportedParams = ['access_token', 'token_type', 'id_token', 'code', 'state', 'session_state', 'expires_in', 'kc_action_status'];
                    break;
            }

            supportedParams.push('error');
            supportedParams.push('error_description');
            supportedParams.push('error_uri');

            var queryIndex = url.indexOf('?');
            var fragmentIndex = url.indexOf('#');

            var newUrl;
            var parsed;

            if (kc.responseMode === 'query' && queryIndex !== -1) {
                newUrl = url.substring(0, queryIndex);
                parsed = parseCallbackParams(url.substring(queryIndex + 1, fragmentIndex !== -1 ? fragmentIndex : url.length), supportedParams);
                if (parsed.paramsString !== '') {
                    newUrl += '?' + parsed.paramsString;
                }
                if (fragmentIndex !== -1) {
                    newUrl += url.substring(fragmentIndex);
                }
            } else if (kc.responseMode === 'fragment' && fragmentIndex !== -1) {
                newUrl = url.substring(0, fragmentIndex);
                parsed = parseCallbackParams(url.substring(fragmentIndex + 1), supportedParams);
                if (parsed.paramsString !== '') {
                    newUrl += '#' + parsed.paramsString;
                }
            }

            if (parsed && parsed.oauthParams) {
                if (kc.flow === 'standard' || kc.flow === 'hybrid') {
                    if ((parsed.oauthParams.code || parsed.oauthParams.error) && parsed.oauthParams.state) {
                        parsed.oauthParams.newUrl = newUrl;
                        return parsed.oauthParams;
                    }
                } else if (kc.flow === 'implicit') {
                    if ((parsed.oauthParams.access_token || parsed.oauthParams.error) && parsed.oauthParams.state) {
                        parsed.oauthParams.newUrl = newUrl;
                        return parsed.oauthParams;
                    }
                }
            }
        }

        function parseCallbackParams(paramsString, supportedParams) {
            var p = paramsString.split('&');
            var result = {
                paramsString: '',
                oauthParams: {}
            }
            for (var i = 0; i < p.length; i++) {
                var split = p[i].indexOf("=");
                var key = p[i].slice(0, split);
                if (supportedParams.indexOf(key) !== -1) {
                    result.oauthParams[key] = p[i].slice(split + 1);
                } else {
                    if (result.paramsString !== '') {
                        result.paramsString += '&';
                    }
                    result.paramsString += p[i];
                }
            }
            return result;
        }

        function createPromise() {
            // Need to create a native Promise which also preserves the
            // interface of the custom promise type previously used by the API
            var p = {
                setSuccess: function(result) {
                    p.resolve(result);
                },

                setError: function(result) {
                    p.reject(result);
                }
            };
            p.promise = new Promise(function(resolve, reject) {
                p.resolve = resolve;
                p.reject = reject;
            });

            p.promise.success = function(callback) {
                logPromiseDeprecation();

                this.then(function handleSuccess(value) {
                    callback(value);
                });

                return this;
            }

            p.promise.error = function(callback) {
                logPromiseDeprecation();

                this.catch(function handleError(error) {
                    callback(error);
                });

                return this;
            }

            return p;
        }

        // Function to extend existing native Promise with timeout
        function applyTimeoutToPromise(promise, timeout, errorMessage) {
            var timeoutHandle = null;
            var timeoutPromise = new Promise(function (resolve, reject) {
                timeoutHandle = setTimeout(function () {
                    reject({ "error": errorMessage || "Promise is not settled within timeout of " + timeout + "ms" });
                }, timeout);
            });

            return Promise.race([promise, timeoutPromise]).finally(function () {
                clearTimeout(timeoutHandle);
            });
        }

        function setupCheckLoginIframe() {
            var promise = createPromise();

            if (!loginIframe.enable) {
                promise.setSuccess();
                return promise.promise;
            }

            if (loginIframe.iframe) {
                promise.setSuccess();
                return promise.promise;
            }

            var iframe = document.createElement('iframe');
            loginIframe.iframe = iframe;

            iframe.onload = function() {
                var authUrl = kc.endpoints.authorize();
                if (authUrl.charAt(0) === '/') {
                    loginIframe.iframeOrigin = getOrigin();
                } else {
                    loginIframe.iframeOrigin = authUrl.substring(0, authUrl.indexOf('/', 8));
                }
                promise.setSuccess();
            }

            var src = kc.endpoints.checkSessionIframe();
            iframe.setAttribute('src', src );
            iframe.setAttribute('title', 'keycloak-session-iframe' );
            iframe.style.display = 'none';
            document.body.appendChild(iframe);

            var messageCallback = function(event) {
                if ((event.origin !== loginIframe.iframeOrigin) || (loginIframe.iframe.contentWindow !== event.source)) {
                    return;
                }

                if (!(event.data == 'unchanged' || event.data == 'changed' || event.data == 'error')) {
                    return;
                }


                if (event.data != 'unchanged') {
                    kc.clearToken();
                }

                var callbacks = loginIframe.callbackList.splice(0, loginIframe.callbackList.length);

                for (var i = callbacks.length - 1; i >= 0; --i) {
                    var promise = callbacks[i];
                    if (event.data == 'error') {
                        promise.setError();
                    } else {
                        promise.setSuccess(event.data == 'unchanged');
                    }
                }
            };

            window.addEventListener('message', messageCallback, false);

            return promise.promise;
        }

        function scheduleCheckIframe() {
            if (loginIframe.enable) {
                if (kc.token) {
                    setTimeout(function() {
                        checkLoginIframe().then(function(unchanged) {
                            if (unchanged) {
                                scheduleCheckIframe();
                            }
                        });
                    }, loginIframe.interval * 1000);
                }
            }
        }

        function checkLoginIframe() {
            var promise = createPromise();

            if (loginIframe.iframe && loginIframe.iframeOrigin ) {
                var msg = kc.clientId + ' ' + (kc.sessionId ? kc.sessionId : '');
                loginIframe.callbackList.push(promise);
                var origin = loginIframe.iframeOrigin;
                if (loginIframe.callbackList.length == 1) {
                    loginIframe.iframe.contentWindow.postMessage(msg, origin);
                }
            } else {
                promise.setSuccess();
            }

            return promise.promise;
        }

        function check3pCookiesSupported() {
            var promise = createPromise();

            if (loginIframe.enable || kc.silentCheckSsoRedirectUri) {
                var iframe = document.createElement('iframe');
                iframe.setAttribute('src', kc.endpoints.thirdPartyCookiesIframe());
                iframe.setAttribute('title', 'keycloak-3p-check-iframe' );
                iframe.style.display = 'none';
                document.body.appendChild(iframe);

                var messageCallback = function(event) {
                    if (iframe.contentWindow !== event.source) {
                        return;
                    }

                    if (event.data !== "supported" && event.data !== "unsupported") {
                        return;
                    } else if (event.data === "unsupported") {
                        loginIframe.enable = false;
                        if (kc.silentCheckSsoFallback) {
                            kc.silentCheckSsoRedirectUri = false;
                        }
                        logWarn("[KEYCLOAK] 3rd party cookies aren't supported by this browser. checkLoginIframe and " +
                            "silent check-sso are not available.")
                    }

                    document.body.removeChild(iframe);
                    window.removeEventListener("message", messageCallback);
                    promise.setSuccess();
                };

                window.addEventListener('message', messageCallback, false);
            } else {
                promise.setSuccess();
            }

            return applyTimeoutToPromise(promise.promise, kc.messageReceiveTimeout, "Timeout when waiting for 3rd party check iframe message.");
        }

        function loadAdapter(type) {
            if (!type || type == 'default') {
                return {
                    login: function(options) {
                        window.location.replace(kc.createLoginUrl(options));
                        return createPromise().promise;
                    },

                    logout: function(options) {
                        window.location.replace(kc.createLogoutUrl(options));
                        return createPromise().promise;
                    },

                    register: function(options) {
                        window.location.replace(kc.createRegisterUrl(options));
                        return createPromise().promise;
                    },

                    accountManagement : function() {
                        var accountUrl = kc.createAccountUrl();
                        if (typeof accountUrl !== 'undefined') {
                            window.location.href = accountUrl;
                        } else {
                            throw "Not supported by the OIDC server";
                        }
                        return createPromise().promise;
                    },

                    redirectUri: function(options, encodeHash) {
                        if (arguments.length == 1) {
                            encodeHash = true;
                        }

                        if (options && options.redirectUri) {
                            return options.redirectUri;
                        } else if (kc.redirectUri) {
                            return kc.redirectUri;
                        } else {
                            return location.href;
                        }
                    }
                };
            }

            if (type == 'cordova') {
                loginIframe.enable = false;
                var cordovaOpenWindowWrapper = function(loginUrl, target, options) {
                    if (window.cordova && window.cordova.InAppBrowser) {
                        // Use inappbrowser for IOS and Android if available
                        return window.cordova.InAppBrowser.open(loginUrl, target, options);
                    } else {
                        return window.open(loginUrl, target, options);
                    }
                };

                var shallowCloneCordovaOptions = function (userOptions) {
                    if (userOptions && userOptions.cordovaOptions) {
                        return Object.keys(userOptions.cordovaOptions).reduce(function (options, optionName) {
                            options[optionName] = userOptions.cordovaOptions[optionName];
                            return options;
                        }, {});
                    } else {
                        return {};
                    }
                };

                var formatCordovaOptions = function (cordovaOptions) {
                    return Object.keys(cordovaOptions).reduce(function (options, optionName) {
                        options.push(optionName+"="+cordovaOptions[optionName]);
                        return options;
                    }, []).join(",");
                };

                var createCordovaOptions = function (userOptions) {
                    var cordovaOptions = shallowCloneCordovaOptions(userOptions);
                    cordovaOptions.location = 'no';
                    if (userOptions && userOptions.prompt == 'none') {
                        cordovaOptions.hidden = 'yes';
                    }
                    return formatCordovaOptions(cordovaOptions);
                };

                return {
                    login: function(options) {
                        var promise = createPromise();

                        var cordovaOptions = createCordovaOptions(options);
                        var loginUrl = kc.createLoginUrl(options);
                        var ref = cordovaOpenWindowWrapper(loginUrl, '_blank', cordovaOptions);
                        var completed = false;

                        var closed = false;
                        var closeBrowser = function() {
                            closed = true;
                            ref.close();
                        };

                        ref.addEventListener('loadstart', function(event) {
                            if (event.url.indexOf('http://localhost') == 0) {
                                var callback = parseCallback(event.url);
                                processCallback(callback, promise);
                                closeBrowser();
                                completed = true;
                            }
                        });

                        ref.addEventListener('loaderror', function(event) {
                            if (!completed) {
                                if (event.url.indexOf('http://localhost') == 0) {
                                    var callback = parseCallback(event.url);
                                    processCallback(callback, promise);
                                    closeBrowser();
                                    completed = true;
                                } else {
                                    promise.setError();
                                    closeBrowser();
                                }
                            }
                        });

                        ref.addEventListener('exit', function(event) {
                            if (!closed) {
                                promise.setError({
                                    reason: "closed_by_user"
                                });
                            }
                        });

                        return promise.promise;
                    },

                    logout: function(options) {
                        var promise = createPromise();

                        var logoutUrl = kc.createLogoutUrl(options);
                        var ref = cordovaOpenWindowWrapper(logoutUrl, '_blank', 'location=no,hidden=yes,clearcache=yes');

                        var error;

                        ref.addEventListener('loadstart', function(event) {
                            if (event.url.indexOf('http://localhost') == 0) {
                                ref.close();
                            }
                        });

                        ref.addEventListener('loaderror', function(event) {
                            if (event.url.indexOf('http://localhost') == 0) {
                                ref.close();
                            } else {
                                error = true;
                                ref.close();
                            }
                        });

                        ref.addEventListener('exit', function(event) {
                            if (error) {
                                promise.setError();
                            } else {
                                kc.clearToken();
                                promise.setSuccess();
                            }
                        });

                        return promise.promise;
                    },

                    register : function(options) {
                        var promise = createPromise();
                        var registerUrl = kc.createRegisterUrl();
                        var cordovaOptions = createCordovaOptions(options);
                        var ref = cordovaOpenWindowWrapper(registerUrl, '_blank', cordovaOptions);
                        ref.addEventListener('loadstart', function(event) {
                            if (event.url.indexOf('http://localhost') == 0) {
                                ref.close();
                                var oauth = parseCallback(event.url);
                                processCallback(oauth, promise);
                            }
                        });
                        return promise.promise;
                    },

                    accountManagement : function() {
                        var accountUrl = kc.createAccountUrl();
                        if (typeof accountUrl !== 'undefined') {
                            var ref = cordovaOpenWindowWrapper(accountUrl, '_blank', 'location=no');
                            ref.addEventListener('loadstart', function(event) {
                                if (event.url.indexOf('http://localhost') == 0) {
                                    ref.close();
                                }
                            });
                        } else {
                            throw "Not supported by the OIDC server";
                        }
                    },

                    redirectUri: function(options) {
                        return 'http://localhost';
                    }
                }
            }

            if (type == 'cordova-native') {
                loginIframe.enable = false;

                return {
                    login: function(options) {
                        var promise = createPromise();
                        var loginUrl = kc.createLoginUrl(options);

                        universalLinks.subscribe('keycloak', function(event) {
                            universalLinks.unsubscribe('keycloak');
                            window.cordova.plugins.browsertab.close();
                            var oauth = parseCallback(event.url);
                            processCallback(oauth, promise);
                        });

                        window.cordova.plugins.browsertab.openUrl(loginUrl);
                        return promise.promise;
                    },

                    logout: function(options) {
                        var promise = createPromise();
                        var logoutUrl = kc.createLogoutUrl(options);

                        universalLinks.subscribe('keycloak', function(event) {
                            universalLinks.unsubscribe('keycloak');
                            window.cordova.plugins.browsertab.close();
                            kc.clearToken();
                            promise.setSuccess();
                        });

                        window.cordova.plugins.browsertab.openUrl(logoutUrl);
                        return promise.promise;
                    },

                    register : function(options) {
                        var promise = createPromise();
                        var registerUrl = kc.createRegisterUrl(options);
                        universalLinks.subscribe('keycloak' , function(event) {
                            universalLinks.unsubscribe('keycloak');
                            window.cordova.plugins.browsertab.close();
                            var oauth = parseCallback(event.url);
                            processCallback(oauth, promise);
                        });
                        window.cordova.plugins.browsertab.openUrl(registerUrl);
                        return promise.promise;

                    },

                    accountManagement : function() {
                        var accountUrl = kc.createAccountUrl();
                        if (typeof accountUrl !== 'undefined') {
                            window.cordova.plugins.browsertab.openUrl(accountUrl);
                        } else {
                            throw "Not supported by the OIDC server";
                        }
                    },

                    redirectUri: function(options) {
                        if (options && options.redirectUri) {
                            return options.redirectUri;
                        } else if (kc.redirectUri) {
                            return kc.redirectUri;
                        } else {
                            return "http://localhost";
                        }
                    }
                }
            }

            throw 'invalid adapter type: ' + type;
        }

        var LocalStorage = function() {
            if (!(this instanceof LocalStorage)) {
                return new LocalStorage();
            }

            localStorage.setItem('kc-test', 'test');
            localStorage.removeItem('kc-test');

            var cs = this;

            function clearExpired() {
                var time = new Date().getTime();
                for (var i = 0; i < localStorage.length; i++)  {
                    var key = localStorage.key(i);
                    if (key && key.indexOf('kc-callback-') == 0) {
                        var value = localStorage.getItem(key);
                        if (value) {
                            try {
                                var expires = JSON.parse(value).expires;
                                if (!expires || expires < time) {
                                    localStorage.removeItem(key);
                                }
                            } catch (err) {
                                localStorage.removeItem(key);
                            }
                        }
                    }
                }
            }

            cs.get = function(state) {
                if (!state) {
                    return;
                }

                var key = 'kc-callback-' + state;
                var value = localStorage.getItem(key);
                if (value) {
                    localStorage.removeItem(key);
                    value = JSON.parse(value);
                }

                clearExpired();
                return value;
            };

            cs.add = function(state) {
                clearExpired();

                var key = 'kc-callback-' + state.state;
                state.expires = new Date().getTime() + (60 * 60 * 1000);
                localStorage.setItem(key, JSON.stringify(state));
            };
        };

        var CookieStorage = function() {
            if (!(this instanceof CookieStorage)) {
                return new CookieStorage();
            }

            var cs = this;

            cs.get = function(state) {
                if (!state) {
                    return;
                }

                var value = getCookie('kc-callback-' + state);
                setCookie('kc-callback-' + state, '', cookieExpiration(-100));
                if (value) {
                    return JSON.parse(value);
                }
            };

            cs.add = function(state) {
                setCookie('kc-callback-' + state.state, JSON.stringify(state), cookieExpiration(60));
            };

            cs.removeItem = function(key) {
                setCookie(key, '', cookieExpiration(-100));
            };

            var cookieExpiration = function (minutes) {
                var exp = new Date();
                exp.setTime(exp.getTime() + (minutes*60*1000));
                return exp;
            };

            var getCookie = function (key) {
                var name = key + '=';
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) == 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return '';
            };

            var setCookie = function (key, value, expirationDate) {
                var cookie = key + '=' + value + '; '
                    + 'expires=' + expirationDate.toUTCString() + '; ';
                document.cookie = cookie;
            }
        };

        function createCallbackStorage() {
            try {
                return new LocalStorage();
            } catch (err) {
            }

            return new CookieStorage();
        }

        function createLogger(fn) {
            return function() {
                if (kc.enableLogging) {
                    fn.apply(console, Array.prototype.slice.call(arguments));
                }
            };
        }
    }

    return Keycloak;
})


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, scripts, husky, devDependencies, dependencies, engines, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"root-conf\",\"version\":\"1.6.1\",\"scripts\":{\"start\":\"webpack-dev-server --mode=development --port 9000\",\"lint\":\"eslint src\",\"test\":\"jest --passWithNoTests\",\"format\":\"prettier --write './**'\",\"build:dev\":\"./maintenance/build_serviceworker.sh &&  webpack --mode=development\",\"build\":\"./maintenance/build_serviceworker.sh &&  webpack --mode=production\",\"add_version_tag\":\"./maintenance/add_version_tag.js\",\"serve_worker\":\"webpack --config webpack.sw.config.js --mode=development\"},\"husky\":{\"hooks\":{\"pre-commit\":\"pretty-quick --staged && concurrently yarn:lint yarn:test\"}},\"devDependencies\":{\"@babel/core\":\"^7.9.0\",\"@babel/preset-env\":\"^7.9.5\",\"@types/systemjs\":\"^6.1.0\",\"babel-eslint\":\"^11.0.0-beta.2\",\"babel-loader\":\"^8.1.0\",\"clean-webpack-plugin\":\"^3.0.0\",\"concurrently\":\"^5.1.0\",\"eslint\":\"^6.7.2\",\"eslint-config-important-stuff\":\"^1.1.0\",\"eslint-config-prettier\":\"^6.10.1\",\"eslint-plugin-prettier\":\"^3.1.3\",\"html-webpack-plugin\":\"^4.2.0\",\"husky\":\"^4.2.5\",\"jest\":\"^25.4.0\",\"jest-cli\":\"^25.4.0\",\"prettier\":\"^2.0.4\",\"pretty-quick\":\"^2.0.1\",\"serve\":\"^11.3.0\",\"webpack\":\"^4.42.1\",\"webpack-cli\":\"^3.3.11\",\"webpack-dev-server\":\"^3.10.3\"},\"dependencies\":{\"@sentry/browser\":\"^7.46.0\",\"@sentry/tracing\":\"^7.46.0\",\"axios\":\"^0.27.2\",\"copy-webpack-plugin\":\"6\",\"dotenv\":\"^8.6.0\",\"dotenv-webpack\":\"^7.0.3\",\"firebase\":\"^9.5.0\",\"keycloak-js\":\"^15.0.2\",\"single-spa\":\"^5.3.4\",\"uuid\":\"^8.3.2\"},\"engines\":{\"node\":\">10 <15\"}}");

/***/ }),

/***/ "./src/constants/index.js":
/*!********************************!*\
  !*** ./src/constants/index.js ***!
  \********************************/
/*! exports provided: ignoredSentryErrors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ignoredSentryErrors", function() { return ignoredSentryErrors; });
const ignoredSentryErrors = ["Network Error", "timeout of 0ms exceeded", "Non-Error promise rejection captured with keys: currentTarget, isTrusted, target, type"];

/***/ }),

/***/ "./src/helper/utils.js":
/*!*****************************!*\
  !*** ./src/helper/utils.js ***!
  \*****************************/
/*! exports provided: checkPath, checkSentryErrors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkPath", function() { return checkPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkSentryErrors", function() { return checkSentryErrors; });
function checkPath(location) {
  let flag = false;
  const paths = ["/pos", "/new-menu", "/catalogue", "/events", "/checkout", "/spf"];
  flag = paths.some(url => location.includes(url));

  if (location.includes("transaction") || location.includes("table-header")) {
    flag = false;
  }

  return flag;
}

function checkSentryErrors(event, hint) {
  const {
    response
  } = hint.originalException;

  if (response && response.status && response.status >= 400 && response.status < 500) {
    return null;
  }

  return event;
}



/***/ }),

/***/ "./src/ottu-mf-root-config.js":
/*!************************************!*\
  !*** ./src/ottu-mf-root-config.js ***!
  \************************************/
/*! exports provided: idToken, logout, translations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "idToken", function() { return idToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logout", function() { return logout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translations", function() { return translations; });
/* harmony import */ var single_spa__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! single-spa */ "single-spa");
/* harmony import */ var single_spa__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(single_spa__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var keycloak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! keycloak-js */ "./node_modules/keycloak-js/dist/keycloak.js");
/* harmony import */ var keycloak_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(keycloak_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _helper_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helper/utils */ "./src/helper/utils.js");
/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/browser */ "./node_modules/@sentry/browser/esm/index.js");
/* harmony import */ var _sentry_tracing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/tracing */ "./node_modules/@sentry/tracing/esm/index.js");
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../package.json */ "./package.json");
var _package_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ "./package.json", 1);
/* harmony import */ var _services_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/common */ "./src/services/common.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants */ "./src/constants/index.js");








const eventData = [];
let realEstateDefaultDSN = "https://2173c4daf9c043ab95032a2f612edd8b@sentry.ottu.net/11";
let sentryUrl = "https://f5c94a2ff6af4ec3828f3b3b25bbd929@sentry.ottu.net/10";
console.log('build:', "development");

if (false) {}

sentryUrl = {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENTRY_URL || sentryUrl;
_sentry_browser__WEBPACK_IMPORTED_MODULE_3__["setTag"]("microfrontend", "root_conf");
_sentry_browser__WEBPACK_IMPORTED_MODULE_3__["init"]({
  dsn: sentryUrl,
  release: `root_conf@${_package_json__WEBPACK_IMPORTED_MODULE_5__.version}`,
  integrations: [new _sentry_tracing__WEBPACK_IMPORTED_MODULE_4__["BrowserTracing"]()],
  ignoreErrors: _constants__WEBPACK_IMPORTED_MODULE_7__["ignoredSentryErrors"],
  beforeSend: _helper_utils__WEBPACK_IMPORTED_MODULE_2__["checkSentryErrors"],
  tracesSampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_TRACE_SAMPLE_RATE || 0.2,
  sentrySampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENTRY_SAMPLE_RATE || 0.2
});
console.log("checkout link: ", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CHECKOUT_SDK_URL);
var token = "";
const state = [];
const isKeycloakAuth = {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.ENABLE_KEYCLOACK === "true";

const changeState = value => {
  state.push(value);

  if (value === "state") {
    getConfig().then(config => {
      getUserDetail().then(user => {
        createSocketConnection(user.id, config.websocket_url);
      });
    });
  }
};

const options = {
  pkceMethod: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.KEYCLOAK_PKCE_METHOD || "S256",
  url: `https://${{"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SSO_DOMAIN}/auth/`,
  realm: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.MERCHANT_ID,
  clientId: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.KEYCLOAK_CLIENT_ID || "frontend",
  onLoad: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.KEYCLOAK_ON_LOAD || "login-required"
};

const _keycloak = keycloak_js__WEBPACK_IMPORTED_MODULE_1___default()(options);

const noNavBar = Object(_helper_utils__WEBPACK_IMPORTED_MODULE_2__["checkPath"])(window.location.pathname);

_keycloak.init({
  checkLoginIframe: false
}).then(async () => {
  if (!_keycloak.authenticated && !noNavBar && isKeycloakAuth) {
    _keycloak.login({
      redirectUri: window.location.href
    });
  } else {
    token = _keycloak.idToken;
    setLocalStorage(_keycloak.tokenParsed && _keycloak.tokenParsed.exp, token);
    const arabicTranslation = await getTranslations();

    if (token) {
      const config = await getConfig();
      const user = await getUserDetail();
      createSocketConnection(user.id, config.websocket_url);
    }
    /*global System*/

    /*eslint no-undef: "error"*/


    Object(single_spa__WEBPACK_IMPORTED_MODULE_0__["registerApplication"])({
      name: "@ottu-mf/navigation",
      app: () => System.import("@ottu-mf/navigation"),
      activeWhen: "/",
      customProps: {
        idToken,
        refreshToken,
        logout,
        translations,
        arabicTranslation,
        ignoredSentryErrors: _constants__WEBPACK_IMPORTED_MODULE_7__["ignoredSentryErrors"],
        checkSentryErrors: _helper_utils__WEBPACK_IMPORTED_MODULE_2__["checkSentryErrors"],
        ws_notification: eventData,
        noNavBar: noNavBar || location.pathname.includes("/duplicate"),
        serverOrigin: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CORE_BACKEND_URL,
        firebaseAPIKey: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_API_KEY || "AIzaSyCRENY_ACvWS3Gk-fqR9ZvfTZJ2iuT6kE8",
        firebaseProjectId: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_PROJECT_ID || "ottu-order-notification",
        firebaseSenderID: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENDER_ID || "300985765733",
        firebaseAppId: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_APP_ID || "1:300985765733:web:08bfa30600d34036c49b8c",
        firebasePublicKey: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_FIREBASE_PUBLIC_KEY || "BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0",
        sentryUrl,
        sentrySampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENTRY_SAMPLE_RATE || 0.2,
        traceSampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_TRACE_SAMPLE_RATE || 0.2,
        foodOrderingColor: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_FOOD_ORDERING_MAIN_COLOR || "#3cb156",
        isKeycloakAuth,
        state
      }
    });
    Object(single_spa__WEBPACK_IMPORTED_MODULE_0__["registerApplication"])({
      name: "@ottu-mf/frontend",
      app: () => System.import("@ottu-mf/frontend"),
      activeWhen: [location => location.pathname.includes("/transactions"), location => location.pathname.includes("/bulk/"), location => location.pathname.includes("/catalogue"), location => location.pathname.includes("/customer-payment"), location => location.pathname.includes("/e-commerce"), location => location.pathname.includes("/event"), location => location.pathname.includes("/dashboard"), location => location.pathname.includes("/payment-request"), location => location.pathname.includes("/generated-reports"), location => location.pathname.includes("/food_ordering"), location => location.pathname.includes("/session"), location => location.pathname.includes("/shopify"), location => location.pathname.includes("/user"), location => location.pathname.includes("/help"), location => location.pathname.includes("/cpr"), location => location.pathname.includes("/checkout/"), location => location.pathname.includes("/events"), location => location.pathname.includes("/menu"), location => location.pathname.includes("/spf"), location => location.pathname.includes("/ticket"), location => location.pathname.includes("/pos"), location => location.pathname.includes("/real-estate"), location => location.pathname.includes("/search"), location => location.pathname.includes("/login"), location => location.pathname.includes("/forget-password")],
      customProps: {
        idToken,
        refreshToken,
        logout,
        translations,
        ignoredSentryErrors: _constants__WEBPACK_IMPORTED_MODULE_7__["ignoredSentryErrors"],
        checkSentryErrors: _helper_utils__WEBPACK_IMPORTED_MODULE_2__["checkSentryErrors"],
        arabicTranslation,
        noNavBar,
        ws_notification: eventData,
        sentryUrl,
        sentrySampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENTRY_SAMPLE_RATE || 0.2,
        traceSampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_TRACE_SAMPLE_RATE || 0.2,
        firebaseAPIKey: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_API_KEY || "AIzaSyCRENY_ACvWS3Gk-fqR9ZvfTZJ2iuT6kE8",
        firebaseProjectId: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_PROJECT_ID || "ottu-order-notification",
        firebaseSenderID: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENDER_ID || "300985765733",
        firebaseAppId: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_APP_ID || "1:300985765733:web:08bfa30600d34036c49b8c",
        firebasePublicKey: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_FIREBASE_PUBLIC_KEY || "BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0",
        customStyleDirectoryName: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CUSTOM_STYLE_DIRECTORY_NAME,
        foodOrderingColor: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_FOOD_ORDERING_MAIN_COLOR || "#3cb156",
        orderRefreshTime: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_ORDER_LIST_REFRESH_TIME || 60,
        checkoutSDKLink: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CHECKOUT_SDK_URL || "https://assets.ottu.net/checkout/v1/checkout.min.js",
        gatewayApiKey: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_GATEWAY_API_KEY || "L0Fc5f81.dLqByodGesaD9pJdzoKpo6rP1FQBkVzR",
        showFromforPaymentPage: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SHOW_FROM_IN_PAYMENT_DETAILS_PAGE === "false" ? false : true,
        isKeycloakAuth,
        changeState
      }
    });
    Object(single_spa__WEBPACK_IMPORTED_MODULE_0__["registerApplication"])({
      name: "@ottu-mf/estate",
      app: () => System.import("@ottu-mf/estate"),
      activeWhen: [location => location.pathname.includes("/real_estate")],
      customProps: {
        idToken,
        logout,
        ws_notification: eventData,
        merchant: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.MERCHANT_ID,
        translations,
        ignoredSentryErrors: _constants__WEBPACK_IMPORTED_MODULE_7__["ignoredSentryErrors"],
        checkSentryErrors: _helper_utils__WEBPACK_IMPORTED_MODULE_2__["checkSentryErrors"],
        sentryUrl: realEstateDefaultDSN,
        gatewayApiKey: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_GATEWAY_API_KEY || "L0Fc5f81.dLqByodGesaD9pJdzoKpo6rP1FQBkVzR"
      }
    });
    Object(single_spa__WEBPACK_IMPORTED_MODULE_0__["registerApplication"])({
      name: "@ottu-mf/fnb_frontend",
      app: () => System.import("@ottu-mf/fnb_frontend"),
      activeWhen: [location => location.pathname.includes("/new-menu"), location => location.pathname.includes("/food-ordering")],
      customProps: {
        idToken,
        logout,
        ignoredSentryErrors: _constants__WEBPACK_IMPORTED_MODULE_7__["ignoredSentryErrors"],
        checkSentryErrors: _helper_utils__WEBPACK_IMPORTED_MODULE_2__["checkSentryErrors"],
        arabicTranslation,
        ws_notification: eventData,
        merchant: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CORE_SERVER_MERCHANT,
        translations,
        sentryUrl,
        sentrySampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SENTRY_SAMPLE_RATE || 0.2,
        traceSampleRate: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_TRACE_SAMPLE_RATE || 0.2,
        noNavBar: noNavBar || location.pathname.includes("/duplicate"),
        orderRefreshTime: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_ORDER_LIST_REFRESH_TIME || 60,
        foodOrderingColor: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_FOOD_ORDERING_MAIN_COLOR || "#3cb156"
      }
    });
  }
}).catch(err => {
  console.log("Error: ", err);
});

function idToken() {
  return token ? token : "";
}
function logout() {
  if (isKeycloakAuth) {
    token = "";

    _keycloak.logout();
  }
}
function translations() {
  /*global require*/

  /*eslint no-undef: "error"*/
  const translations = __webpack_require__("./src/translations sync recursive [A-Za-z0-9-_,\\s]+\\.json$/");

  const messages = {};
  translations.keys().forEach(key => {
    const matched = key.match(/([A-Za-z0-9-_]+)\./i);

    if (matched && matched.length > 1) {
      const locale = matched[1];
      messages[locale] = translations(key);
    }
  });
  return messages;
}

function setLocalStorage(token_expiry, token) {
  localStorage.setItem("isKeycloakAuth", isKeycloakAuth);

  if (isKeycloakAuth) {
    localStorage.setItem("VUE_APP_TOKEN", token);
    localStorage.setItem("VUE_APP_SESSION_IDLE", (token_expiry - 60 - Date.now() / 1000) * 1000);
  } else {
    localStorage.setItem("VUE_APP_SESSION_IDLE", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_SESSION_IDLE);
  }

  localStorage.setItem("VUE_APP_CORE_SERVER_ORIGIN", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CORE_BACKEND_URL);
  localStorage.setItem("VUE_APP_GOOGLE_API_KEY", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_GOOGLE_API_KEY || "AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA");
  localStorage.setItem("VUE_APP_POS_PLUGIN_SOCIAL_ICONS", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_POS_PLUGIN_SOCIAL_ICONS || true);
  localStorage.setItem("VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON || true);
  localStorage.setItem("VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS || true);
  localStorage.setItem("VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON || true);
  localStorage.setItem("VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS || true);
  localStorage.setItem("VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON || true);
  localStorage.setItem("VUE_APP_CHECKOUT_PLUGIN_SOCIAL_ICONS", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CHECKOUT_PLUGIN_SOCIAL_ICONS || true);
  localStorage.setItem("VUE_APP_CHECKOUT_PLUGIN_LANGUAGE_BUTTON", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CHECKOUT_PLUGIN_LANGUAGE_BUTTON || true);
  localStorage.setItem("MERCHANT_ID", {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.MERCHANT_ID || "");
}

async function getConfig() {
  try {
    const res = await Object(_services_common__WEBPACK_IMPORTED_MODULE_6__["getMerchantConfig"])();
    return res.data;
  } catch (err) {
    console.log("Error while fetching config: ", err);
    return {};
  }
}

async function getUserDetail() {
  try {
    const res = await Object(_services_common__WEBPACK_IMPORTED_MODULE_6__["getUserDetails"])();
    return res.data;
  } catch (err) {
    if (err.response && err.response.status === 401) {
      logout();
    }

    console.log("Error while fetching user details: ", err);
    return {};
  }
}

async function getTranslations() {
  try {
    const res = await Object(_services_common__WEBPACK_IMPORTED_MODULE_6__["loadTranslations"])();
    return res.data;
  } catch (err) {
    console.log("Error while fetching translations", err);
    return {};
  }
}

function createSocketConnection(id, url) {
  if (!url || !id) {
    console.log("WebSocket url and User id is required", url, id);
    return;
  }

  let socket = new WebSocket(url);
  const payload_dict = {
    id: {
      merchant_id: {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.MERCHANT_ID,
      type: "frontend"
    },
    audience: {
      data: id.toString()
    }
  };
  const pingInterval = 30000; // 30 seconds

  const pingTimeout = 10000; // 10 seconds

  let pingIntervalId;
  let pingTimeoutId;

  function pingWebsocket() {
    pingIntervalId = setInterval(() => {
      socket.send(JSON.stringify({
        id: {
          type: "ping"
        }
      }));
      pingTimeoutId = setTimeout(() => {
        if (socket.readyState === WebSocket.OPEN) {
          clearInterval(pingIntervalId);
          clearTimeout(pingTimeoutId); // call back here to make sure we don't send a timeout

          pingWebsocket();
        } else {
          socket.close();
          socket = new WebSocket(url);
        }
      }, pingTimeout);
    }, pingInterval);
  }

  socket.onopen = event => {
    pingWebsocket();
    socket.send(JSON.stringify(payload_dict));
  };

  socket.onmessage = event => {
    if (event.data && event.data === "pong") {
      clearTimeout(pingTimeoutId);
    } else {
      eventData.pop();
      eventData.push(event.data);
    }
  };

  socket.onerror = event => {
    console.log("error occurs", event);
    clearInterval(pingIntervalId);
  };

  socket.onclose = () => {
    console.log("Connection is closed...");
    clearInterval(pingIntervalId);
  };
}

const refreshToken = async () => {
  await _keycloak.updateToken(-1).then(() => {
    if (token) {
      token = _keycloak.idToken;
    }
  }).catch(err => {
    console.log("Error: ", err);
    logout();
  });
};

Object(single_spa__WEBPACK_IMPORTED_MODULE_0__["start"])();

/***/ }),

/***/ "./src/services/common.js":
/*!********************************!*\
  !*** ./src/services/common.js ***!
  \********************************/
/*! exports provided: getUserDetails, getMerchantConfig, loadTranslations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUserDetails", function() { return getUserDetails; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMerchantConfig", function() { return getMerchantConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadTranslations", function() { return loadTranslations; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/services/index.js");


const getUserDetails = () => _index__WEBPACK_IMPORTED_MODULE_1__["authorizedReq"].get(_index__WEBPACK_IMPORTED_MODULE_1__["BASE_API_URL"] + "/user/details");
const getMerchantConfig = () => axios__WEBPACK_IMPORTED_MODULE_0___default.a.get(_index__WEBPACK_IMPORTED_MODULE_1__["BASE_API_URL"] + "/config/", {
  params: {
    json: true
  }
});
const loadTranslations = () => axios__WEBPACK_IMPORTED_MODULE_0___default.a.get(`${_index__WEBPACK_IMPORTED_MODULE_1__["API_ORIGIN"]}/json-i18n?json=true`);

/***/ }),

/***/ "./src/services/index.js":
/*!*******************************!*\
  !*** ./src/services/index.js ***!
  \*******************************/
/*! exports provided: API_ORIGIN, BASE_API_URL, authInterceptor, authorizedReq */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_ORIGIN", function() { return API_ORIGIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BASE_API_URL", function() { return BASE_API_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "authInterceptor", function() { return authInterceptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "authorizedReq", function() { return authorizedReq; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);

const API_ORIGIN = {"MERCHANT_ID":"delta.ottu.com","KEYCLOAK_PKCE_METHOD":"S256","KEYCLOAK_CLIENT_ID":"frontend","KEYCLOAK_ON_LOAD":"login-required","VUE_APP_ESTATE_JS_URL":"https://estatefe.ottu.net/js/app.js","isLocal":"false","VUE_APP_CORE_BACKEND_URL":"https://delta.ottu.com/b","VUE_APP_SENTRY_URL":"https://a90edeaf852e44c481f3ad2905c0f4ff@o1152525.ingest.sentry.io/6250727","VUE_APP_PROJECT_ID":"ottu-order-notification","VUE_APP_SENDER_ID":"300985765733","VUE_APP_APP_ID":"1:300985765733:web:08bfa30600d34036c49b8c","VUE_APP_FIREBASE_PUBLIC_KEY":"BIzFlm-RgFHW7vbEBxw9ojAZpKqGBUv-QPMDWvYZcKAo6IUWBBlVMO0eayt8PdcwOz_YcmOBKHM7gN-JRpcwHy0","VUE_APP_FOOD_ORDERING_MAIN_COLOR":"#3cb156","VUE_APP_ORDER_LIST_REFRESH_TIME":"60","VUE_APP_CHECKOUT_SDK_URL":"https://assets.ottu.dev/checkout/v1/checkout.min.js","VUE_APP_GATEWAY_API_KEY":"7e041aa03287efd4cbc7de891fe42b4a12b1300e","VUE_APP_GOOGLE_API_KEY":"AIzaSyAzrErHOIrPyYNwwlIpbbDAB7L3jKsfkCA","VUE_APP_POS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_POS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_EVENTS_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_EVENTS_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_LANGUAGE_BUTTON":"true","VUE_APP_CATALOGUE_PLUGIN_SOCIAL_ICONS":"true","VUE_APP_SENTRY_SAMPLE_RATE":"0.2","VUE_APP_SSO_DOMAIN":"ssolb.ottu.dev"}.VUE_APP_CORE_BACKEND_URL || localStorage.getItem("VUE_APP_CORE_SERVER_ORIGIN");
const BASE_API_URL = API_ORIGIN + "/api/v1";
const authInterceptor = [config => {
  if (localStorage.getItem("VUE_APP_TOKEN")) {
    config.headers.Authorization = `Bearer ${localStorage.getItem("VUE_APP_TOKEN")}`;
  }

  return config;
}, error => Promise.reject(error)];
const authorizedReq = axios__WEBPACK_IMPORTED_MODULE_0___default.a.create({
  params: {
    json: true
  }
});
authorizedReq.interceptors.request.use(...authInterceptor);

/***/ }),

/***/ "./src/translations sync recursive [A-Za-z0-9-_,\\s]+\\.json$/":
/*!*********************************************************!*\
  !*** ./src/translations sync [A-Za-z0-9-_,\s]+\.json$/ ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ar.json": "./src/translations/ar.json",
	"./en.json": "./src/translations/en.json"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/translations sync recursive [A-Za-z0-9-_,\\s]+\\.json$/";

/***/ }),

/***/ "./src/translations/ar.json":
/*!**********************************!*\
  !*** ./src/translations/ar.json ***!
  \**********************************/
/*! exports provided: Provider, Sender, This field is required., Username, Password, United, GIC, Customer notified., Reference Prefix, E-Commerce, Payment request, Bulk payment request, Catalogue purchase, Customer payment, Shopify, Event, Session, Communication error between KNPay and gateway. Please report this issue to KNPay administrator., Bulk, Catalogue, Notification, Units, Void, Specify at least one email recipient, Name to be displayed in dashboard, Logo, Logo to be displayed in dashboard, Merchant Website URL, Merchant Email, Merchant Phone, Define list of email recipients, Common, Type, Name, Order, Transaction report field, Transaction report fields, Emails, We're sorry, but we don't accept payments for the moment., Code, Currency, Currencies, Fix fee, Percent fee, Local, Used only for informational purposes, Default currency, From, To, Rate, Support Request, Suggestion, Feedback, Gateway, Please verify your bank statement before retrying the payment., Cash on Delivery, Sale, Transaction type, Call centre, Yes, No, Prepaid, Postpaid, Merchant Name, Product Category, Product Name, Previous Customer, Shipping Method, Number Of Items Sold, Name of Country, Hours Till Departure, PIN Code, Gateways, Select gateway, Settings, Billing address, Home, Arabic, Result, Track Id, Post Date, Transaction ID, Payment ID, Auth Code, Reference ID, Decision, Message, Receipt No, Transaction No, You are not having permission to delete paid transactions., Successfully deleted %(count)d %(items)s., Successfully restored %(count)d %(items)s., Payment, Created, Pending, Attempted, Authorized, Paid, Failed, Canceled, Expired, Invalid, Refunded, Refund Queued, Refund Rejected, State, Gateway code, Amount, Due Amount, Delivery Fee, Editable amount, Allow customer to edit amount, Language, Currency Code, Merchant order no, Bulk identifier., Customer first name, Customer last name, Customer email, Customer phone, Customer additional phone, Customer address line 1, Customer address line 2, Customer address city, Customer address state, Customer address country, Customer address postal code, Vendor name, Due date, Email Recipients, Comma separated email recipients which will receive customer emails., Product Type, Attachment, Attachment to be sent when notifying a customer for payment., Extra, Reference number, Expiration time, If defined, transaction created after the defined period of time, will be invalidated/expired if customer tries to pay them., Email Seen at, Seen at, initiator, Payment transaction, Payment transactions, Paid Amount, Original Amount, Payment Date, Cancel, Expire, Deleted Paid payment transaction, Deleted Paid payment transactions, Can restore deleted payment transactions, Can delete paid payment transactions, Success, Error, Gateway Settings, Fee, Total, This field is required, Sending SMS requires Phone field to be filled., A valid number is required., Terms, Preparing, Dispatching, Scheduling, Paused, Dispatched, Partial dispatched, Status, Start time, End time, Pause time, Total pause duration, Payment transaction ID, Resume, Invalid file., Invalid or missing values in some of rows, Dispatching process started., Bulk scheduled., Bulk pausing process started., Bulk is locked. Another operation is ongoing at the moment. Try again in few moments., Bulk is already paused., Error. Report to admins., Dispatching process resumed., Bulk canceling process started., Bulk is already canceled., Labels, Weekday, Weekdays, Delivery Duration, Delivery Durations, Stock, Communication, Shipping details, Payment Transaction, Pickup, Delivery, Catalogue URL, Delivery country, Show delivery date input, Image, Product Image, Product Images, Duration, Working hours, Week days, E-mail, Phone, Address, Work days, Select work days, Active, Product, Service, Description, Price before discount, Price, Display stock, Display the available stock on the website, Max Quantity, Define max quantity purchase per order, Total Sold, Start date, Start of the sell date, End date, End of the sell date, Helpline Number/ Inquiry number about the product, Model number, Departments, Products, Product name, Quantity, Fulfilled, Order number, Destination department, Customer name, Address line 1, Address line 2, Address city, Delivery date, Shipping type, Preferred delivery time, Preferred delivery date, Is restored, Orders, Work hour, Work hours, Delivery charges, {product.name} is not available now, Can view owned customer payments, Can view group customer payments, ECommerce, Sender does not exist, E-Commerce Config, Can view e-commerce payments, Can delete e-commerce payments, Can restore e-commerce payments, Pending Payment, Date/Time, Event name, Header title, Event list page header, Displayed fields, Can restore event payments, Venue name, Feedback URL, Tickets available from, Tickets available till, Rules, Events, Event types, Event category, Event categories, Event Image, Event Images, Ticket name, Ticket Quantity, Event start time, Event end time, Max Tickets, Min Quantity, Event ticket detail, Event ticket details, Booking number, First name, Last name, Phone number, Email, Booking person information, Used to store Booking user extra information, Event Date, Booking status, Is Welcome email sent?, Booking, Bookings, Attended, Not Attended, Unit price, Tickets PDF URL, Booking item, Booking items, Confirmed, Booking Item, Encrypted number, Is QR scanned?, Booking Extra Information, Event feedback, Comment, Registration information, Used to store Registration information of user, Event Registration, Event Registrations, Invalid Ticket selection., There is no ticket for this date, You can not purchase more than %s tickets in single purchase, You have to purchase at least %s tickets, You have already purchased ticket with this email., You cannot buy tickets for passed dates, You can not book more than available tickets for selected date, Sorry, there are no more available tickets, You can't buy more than %s tickets, You can't downgrade ticket price, You can't cancel past booking, Invalid QR code, Booking with such booking number doesn't exists, Booking is not paid, Ticket is booked for another event, Ticket is already scanned, Ticket is booked for another date, Ticket not found, Civil ID already used twice for this day., Created at, Invalid Event, Invalid Url, Email send successfully, Branch not found, Delivery area not found, Call centre phone number, Working hours during week, Approximate delivery time, Can view order details, Can view delivery areas, Can view food_order payments, Can delete food_order payments, Can restore food_order payments, Minimum order order sum, Minimum number of plates, Branches, Branch, Branch QR Code, Delivery zone, Delivery area, Delivery area QR Code, Category Name, Service charges, Product category, Product categories, Product price, AddOn Name, Add on, Add ons, Product description, Add ons to this product, Min, Max, Options, Options of product, Product option header, Is default choice?, Promoted product, Special instructions, House, Apartment, Office, Cash on delivery, Accepted, Cooking in progress, Ready for pickup, Delivery in progress, Arrived, Payment type, Delivery Area, Order extra details, Used to store user information, Catering delivery time, Order QR Code, Governorate name, Includes all products?, Included Products, Excluded Products, Included Categories, Excluded Categories, Condition, Conditions, Product not found, Pickup field, Delivery field, Voucher title, code, Free delivery, Discount type, Minimum order amount, Voucher, Vouchers, Specify discount amount, Specify either free delivery option or discount for this voucher, Minimum order amount can't be less than 0, Order feedback, Order feedbacks, Feedback for order no %s, Soon, {menu_item.product.name} , Product {menu_item.product.name} is not available now, You can't order more then {menu_item.quantity} of {menu_item.product.name}, Some of selected option does not exist, Add on not found, Minimum number of plates for {category.name} , Product with name {menu_item.product.name} not active now, Product with name {menu_item.product.name} is not available for , 'Cash on delivery' is disabled by administration, Delivery area is not available now, Branch with such id doesn't exists, Branch is not available now, You can't create order with empty cart, Selected branch is currently unavailable now, Delivery area is not available for catering, Invalid voucher code, Voucher will be available from {voucher.start_date}, Voucher expired, In order to activate voucher order sum must be at least {amount} {currency}, Voucher is no longer available, Voucher is not available now, Your order proceed successfully, Order not found, Order already Delivered, Request data, Mandatory field, Transaction, Invalid code., Country, Notifications, Notification Set, Pre Due Date, Post Due Date, Is Recurring?, Default email, Show terms & conditions?, Terms & conditions, Order no, First Name, Last Name, City, Postal Code, Due Date, Payment Request Attachment, Field, Required?, Customer details fields, Is active?, Is for registration?, Is for booking?, Terms and conditions, Want to get additional phone number?, You can't pay more than the original amount, You can't pay less than {} {}, Oops, transaction was canceled by the merchant., Oops, transaction is expired., Oops, transaction is invalid - {obj.invalidation_reason}., Unable to initiate the payment., Thank you! {currency_code} {amount} is paid., Thank you! {currency_code} {amount} is authorized., Thank you, your order is placed successfully!, Oops, you clicked cancel., Order No, Reference No, SMS, WhatsApp, Gateway code is required, This transaction cannot be paid anymore., Payment Failed., Number of items sold., Order number does not exist., No attempts for this order., QR Code, Download, User QR Code, Remove, Search, Create QR Code, No. of entries, Entry Type, Date, Time, General Rules, To review the agreed Terms & Conditions, please, Click Here, Scan this QR code at the event for check-in, QR code No., Booking No, Date Time, Venue Name Link (Google map link), booking ref, Special instruction, Total Amount, Net Amount, Show payment page, Invoiced To, INTERNAL ID, Telephone No, Email ID, Issue Date, Paid Date, Initiator Name, RECEIPT, PAID, Reference No., Initiator details, Submit, Name or title, Unit, QR code created!, Users, Can search payment transactions, Please contact the site administrator to activate this service, Gateway Code, Card type, Restore, Delete, Dispatch, Schedule, Internal ID, Remarks, Awaiting customer choice, Please enter valid email recipients., Alphanumeric value is required., Only characters allowed., Enter a valid Kuwaiti Civil ID number., Ensure the length is 12., Action performed successfully., Leave feedback, Must be valid positive number, Choose date, Sorry, we don't accept payments for the moment, Warning, Back to cart, Available, On Hold, Booked, Filter, Add, Failed to upload file, Enter valid email address, Use default email, Country code, Enter valid phone number, Example:, Please select your location precisely, GOT IT, Confirm, Tap to edit location, Export Transactions, Gateway Response, Card Type, Export default, Export, Export selected, Modified, Created by, Seen, Email seen, Product details, Cart, Checkout, Events list, Event details, Thank You, Please wait ..., Terms and Conditions, Order Menu, Transactions, Deleted Paid Transactions, Table Headers, Customer Payment, E-commerce, Create Bookings, Fullfilment, Fulfillment, Dashboard, All transactions, Help/Support, Create payment request, Details, Subtotal, Discount, Grand total, Continue shopping, Proceed to checkout, Review your order, Qty, Location, Customer name (optional), Billing Information, Use a different shipping information, By clicking Pay button you are accepting our, Terms & Conditions, Select pickup store, Apartment, suite, etc. (optional), Your cart is empty, view catalogue, My Cart, Cart is empty, View cart, Some of products in cart does not have delivery option. They should be removed from cart, Some of products in cart does not have pickup option. They should be removed from cart, Some of the products cannot be picked up from same store. Please, select products to keep in cart, Available QTY, Check video, You save, Time left, Days, Hours, Added to cart, Add to cart, Buy now, Not available now, Search by keyword, No results found, days, hours, Added to Cart, More details,  details, Open hours, Opened Today:, Show open hours, Code verification, Thank You!!!, Your ticket booking is confirmed successfully., Download Tickets, This is a one time URL, therefore please download the ticket before leaving the page. However, a copy of it will be also sent to your email address., Attention, Thank you for leaving a feedback!, Book, Pay with, Free,  & , Choose Your Date ..., Change date, Select Entry type:, Sold out, I read and accept, Booked Dates ..., Thank you, we are fully booked., Please accept terms and conditions., Search Events Here, Event Name, Actions, Please, fill in registration form, Add a comment, Terms And Conditions, Thank you for registration, Your cart, Clear cart, Number of plates, Minimum is, Sub total, Delivery fee, Total-amount, Promotions, Promotion, Ingredients:, Out of stock, Already in cart, Sub Total, Minimum order is ${this.min_order} ${this.menuConfig.currency}, Choose desired delivery time, All rights reserved Ottu ©, Menu, Change delivery type, Change delivery method, Minimum order, We Accept, Congratulations! Your voucher activated successfully, You get -${voucher.amount} , And free delivery, Error occurred during voucher activation, Enter voucher code, Enter your code here, Activate, Voucher activated, Order Status, Thank you for your order. You will receive confirmation email shortly., Your QR Code, Transaction failed, Press the button to try again, Order Details, QTY, Special Instuction, Payment Details, Payment method, Transaction Date/Time, Customer Details, Shipping Type, Customer Email, Order state successfully changed to ${this.order_states[this.stepper_value-1].value}, Order Summary, Delivery Time, min, Item(s), AddOns, Total Price, User Details, Delivery Details, Extra Details, Enter your additional note here, Mininum order is, Continue Shopping, Minimum Order, Contact Details, Working Hours, Items, Your Cart, Clear All, The cart is currently empty, Area, Choose One, Payment Method, Payment summary, Okay, TO, Back, To Menu, Your Choice Of, Choose items from the list, Choose 1, Add-Ons, Extra Note, Enter your extra note here, To Cart, Please, select number of, not greater than the maximum selections, not less than the minimum selections, Menu Category, Search by food name, Choose order type, Choose desired order type. We can deliver it to you or you can pick up it by yourself, Delivery area will be open ${delivery_open_hours}, Branches will be open ${branch_open_hours}, Proceed, Restaurant is not working now. Please comeback latter, Select add-ons, Add special instruction, Add to order, Review order, Modify Order, Delivery details, Extra details, Delivery time, SubTotal, Cash, Try again, Order confirmation, Order status, Payment details, Customer details, Order details, Payment details not found, Address Name, Block, Street, Avenue, Floor, Access Location, Download Attachment, Download Receipt, Download Ticket, Thank you!, Order description, Transaction expired, please contact administrator, Enter amount you wish to pay, Transaction not found, Transaction cannot be paid as it is expired, Total amount, Gateway fee, Enter all details correctly, Building/House No., Apartment/Office No., PACI No., From:, To:, Total Bill, Pay Now, Best Choice, fee will be applied, Work, Chalet, Farm, Custom name, Payment Request Details, Add Your Location, Please contact the concerned department to complete the registration process., Hello, Administration panel, Switch language, Account settings, Logout, Payment Request, Create, Uploads, Bulk create, Product bulk create, Copy link, Cannot fetch data. Most likely there is an issue with the configuration., Copied to clipboard, Available Headers, Selected Headers, rows per page, Are you sure?, Creation date, Payment date, ID, The amount cannot be greater than the available amount., Initiator, Import, Filename, Rows/Imported rows, Error File, Error report, Reports, File, Progress, Attempted at, Bulk transaction ID, Bulk plugin is not properly configured. Ask system administrator for more details, Example file, Files initiator, File name, Is recurring, Rows/imported rows, Uploaded by, Uploaded on, Is scheduled, Is active, Required fields, All fields, [Recurrence] required fields, [Recurrence] all fields, Bulk processing started, Upload processing started, Download example, Start typing to search event, Select bulk file, Download error reports, Are you sure you want to cancel booking?, Edit Email address, Send booking email again?, Save changes, Booking Details, Ticket details, Event name:, Event date:, Created:, Email:, First name:, Last name:, Phone:, Purchase details, Booked places, Ticket Name, Slot, Tickets quantity, Referenced number, Purchased, Scanned, Send email, Customer Phone, Full Name, Event date, Attendance, Partially Attended, Purchase type, Export bookings, Edit booking, Additional Quantity, Select ticket type:, Branch Details, Edit, Minimum order sum, Branch name, Accept, Order state, Are you sure to reject order?, Are you sure to approve order?, Catering details, Pickup details, Pickup branch, Transaction details, Order state has been changed successfully, Order time, Order satisfied, Invalid QR Code, Product Bulk Create, QR code is valid. Access granted, QR Code:, Customer Name:, Slot:, Subject, Support request, Report period, Total transactions, GMV, Overall Success Rate, Average Transaction size, Success Rate, Product Wise Sales, Recent Orders, Recent actions, Password changed successfully, Notify the customer via SMS that he has to pay an invoice. Builtin phone field has to be present on the form., Send orders notification to this user?, You successfully subscribe for new order notifications, You successfully unsubscribe from new order notifications, Page not found, Forgot Password, Back to login page, Reset Password, New password, Password confirmation, Minimum order is {min_order_sum} {plugin_config.currency}. , Restaurant isn't working now. , Add at least one item to your cart, Reference date, Name (FN LN), Auth ID, This payment transaction has no attempts., Customer payment page URL, Account locked: too many login attempts. Please try again after 2 minutes with correct username and password., Please wait . . . . . . ., This might take a while, Thank you for your patience, We are still working on it, Credit card, Ticket direct download link expired. Check your email and notify support if it isn't there, job's result expired (60 seconds), job was submitted, but exception occurred, the job doesn't exist anymore, Apparently some error occurred. Please check email and if ticket isn't sent there please notify the support, The glorious ticket is waiting for you. We're just getting it ready..., Please wait for a while, we are generating your booking ticket., Pay, Order datails, Event Date:, Not found., Author, Link not found, Statistics, Valid, Reference Number, Shortener Username, Shortener Password, Booking is not available, Product is not available now, You cannot order more than {max_enabled_value} QTY per order, Use billing address for delivery, minutes, seconds, Generate QR code, Store any kind of information related to the customer. It will be displayed on the payment related pages., Stores, Destination store, Deleted Transactions, Delivery address, You cannot order more than {max_quantity} QTY per order, Thank you! Payment Completed., Add your Address and your location on map, Building Type, Total generated, Total received, Net balance, close, Additional Note, mins, Enter email here, Restaurant is currently closed. Kindly, check it soon., Real Estate, Real estate, Manual Payment, Change Price, Advance Payment, Terminate Contract, Renew Contract, New Contract, Add Unit Type, Unit Type List, Unit Types, Add Tenant, Rent Management, Rent management, Properties, Tenant Management, Tenant management, Property Management, Property management, Unit Type, Advance Payment Request, Terminate Contract Transaction, Edit Price, Edit Tenant, Add Property, Edit Property, Edit Unit Type, Edit Unit, Renew Contract List, Renew contract list, OK, Rows Per Page, KD, Id, Property Name, Tenant, Old Start Date, Old End Date, Old Amount, New Start Date, New End Date, New Amount, All, Late, Manual Payment List, Manual payment list, Unit Number, Month, Year, Tenant Name, Save, Contract Id, Start Date, End Date, Leave Date, Vacant, Occupied, Property, Tenant History, Edit Price List, Edit Price list, Current Unit Amount, Current Unit Discount, Current Percentage/Fixed, Current Unit Net Amount, New Unit Amount, New Unit Discount, New Percentage/Fixed, New Unit Net Amount, Please select a property to load units, Percentage, Fixed, Property name is required, Unit number is required, New unit amount is required, Advance Payment List, KWD, Unit Name, Please select a property, Please select a unit, Property Name is required, Unit is required, Tenant Name is required, Unit Type Name, Unit Type Description, Commercial, Action, Is Commercial, Is Residential, Both Commercial and Residential, Add New Unit Type, Close, Reset, Export Unit Type, Something went wrong while fetching results, Unit Type Name (EN), Unit Type Name (AR), Contract Number, Late Payments, Property name, Load More, Tenant Name (EN), Tenant Name (AR), Civil ID Number, Upload Civil ID (Front), Upload, Upload Civil ID (Back), Passport Number, Upload Passport, Nationality, Email Address, Generate New Payment Link, Total Paid, Pending Payments, Payment Status, Rent Amount, Total Paid This Month, Unit Description, Total Units, Rented Units, Vacant Units, Is Cash Payment Allowed, Rent, Lease, Buy, Property Details, Unit Property Name (EN), Unit Property Name (AR), Allow cash payment, Add Unit Type With Units, Termination Date, Terminate Contract List, Terminate contract list, Old Contract Start Date, Old Contract End Date, Terminate Date, Actual Leave Date, Leave Notice Date, Contract start date is required, Contract end date is require, Termination date is required, Actual leave date is required, Leave notice date is required, Old Contract Amount, New Contract Start Date, New Contract End Date, New Contract Amount, Edit Ppice, Contract end date is required, New contract start date is required, New contract end date is required, Contract Start Date, Payment Start Date, Contract End Date, New Contract List, New contract list, Created Date(From), Created Date(To), Start Date(From), Start Date(To), End Date(From), End Date(To), Terminate date (From), Terminate date (To), Invoice Amount, Units of Type, Add Or Edit Units, Edit Units, How many units would you like to add ?, Save and Return, Kindly, enter both the price and the count of added records., Applied successfully, Created successfully, Payment start date is required, Tenant name is Required, Tenant name(AR) is required, Tenant civil id is required, Tenant nationality is required, Unit Type Name can not be empty, Unit Type Name(AR) can not be empty, Unit Type Description can not be empty, Action listings, Current Percentage / Fixed, New Percentage / Fixed, Old contract start date (From), Old contract start date (To), Old contract end date (From), Old contract end date (To), New contract start date (From), New contract start date (To), New contract end date (From), New contract end date (To), Contract New Start Date, Contract New End Date, Paid Months/Year, User, Change password, Bulk Uploads, Bulk Details, Bulk Dispatch logs, Bulk Transaction logs, Catalogue Payment, Food ordering, Payment Restriction, Property Detail, Configuration, Shortly Expired Contracts, Advanced Settings, Plugin Configuration, Gateway Name, International Air Transport Association, English, State Changed At, Select fields, Capture in full, Void in full, Refund in full, Acknowledge, Make PG inquiry, Disclose to merchant, Is Amount Editable, undefined Amount, undefineded Successfully, Disclosed To Merchant, Reason to cancel order, Costumer Phone, Cancellation Reason, Last State, Contract, CONTRACT, Contract Eed Date, Contracts expire within, Kindly, select a date which is greater than or equal to actual leave date and leave notice date., Kindly, select a date which is greater than or equal to leave notice date., There is a pending amount that should be paid, are you sure that you want to continue., Kindly, select a date which is greater than the old contract end dat, New unit net amount is required, Kindly, select a date which is greater than the old contract end date, Required, Hide email, Individual proxy fields, Day of the month to generate payment links, The Day of month to genarate payment links field is required, The Day of the month to suspend accessing payment links field is required, Day of the month to suspend accessing payment links, Default email is not valid, Fields, Validator, Custom detail field, Itinerary display, Label(EN), Label(AR), Label(Ar), Main listings, Married?, No data available, Field Type, The price value is not valid, The discount value is not valid, The property_name field is required, The unit_number field is required, Spouse nationality is required, Spouse civil id is required, Kindly, enter a contract leave date which is greater than the contract start date, New unit discount is required, The discount field is required, The discount field must be numeric and may contain 3 decimal points, New unit amount may only contain numeric characters, New unit discount may only contain numeric characters, Activation Month, Kindly, enter a contract notice date which is greater than the contract start date, Activation Year, Activation year is required, Activation month is required, Is Activated, Tenant name is required, Payment month is required, Payment year is required, Kindly, select a date which is greater than the contract start date., Kindly, select a date which is greater than or equal to contract start date., Unit Type is required, Kindly, select unit type, Discount type is required, ACTION, Ok, ok, real-estate, Pg Codes, Kindly, enter a contract end date which is greater than the contract start date, Kindly, enter a contract payment start date which is greater than the contract start date, Kindly, enter a contract end date which is greater than the contract start date and payment start date, Please enter decimal value upto 2 points, Please enter decimal value upto 3 points, Day of the month to generate links must be greater than day of the month to suspend payment links, Kindly, select a date which is greater than the contract start date, New unit net amount may only contain positive decimal number, Add new field, Delete Field, Designates if this field is required, Designates if this object is active, can be used and displayed on site., Designates if the field represents customer details related data., Designate if this field shall appear in the itinerary table list at the invoice pdf., Confirmation, Is Manual, Is Late Payment, The address field is required, SHOW, HIDE, Are you sure that you want to make a new contract?, Are you sure that you want to do this manual transaction?, Are you sure that you want to renew contract?, Are you sure that you want to terminate this contract?, Kindly, insert unit type with their units, Kindly, insert at least one unit type with their units, The Day of month to genarate payment links must be between, The Day of the month to suspend accessing payment links must be 31 or less, Coupon Code, Net, Product Discount, Print Order, all, Apply, Are you sure to clear cart, No add ons specified, Coupon Discount, Coupon Amount, No options specified, Generated Reports, Exported by, Available until, Size, Records, Format, Module, Export Date, Export Properties, Export Rent Details, Monthly paid amount cannot be greater than the original contract amount, Original Contract Amount, Original Amount is Required, Insurance Amount, Contract Reference, Contract Ref, Payment Date is required, Both suspended and resumed, Suspended, Upload Contract, New Original Contract Amount, Old Original Contract Amount, Contract original amount is a required field, New original contract amount is required, file uploaded successfully, No contract find against this unit, Receipt Voucher Reference, The voucher_reference field may only contain alpha-numeric characters, Upload Logo, Upload Signature, Suspended Contract, Suspend Contract, Modify Contract, Modified Contract, Modified Contract List, Resume Contract, Is Suspended, Is Resumed, Payment Reminder, Suspended Contracts, Modified Contracts, Suspended/Resumed, Resumed, Suspended Contract List, Phone number is required, The email field is required, The civil_id_number length must be 12, The spouse.civil_id_number length must be 12, Upload Mariage Certificate, Before Modified Amount, After Modified Amount, Modify Payment, Current Paid Amount, New Paid Amount, Contract status, Termination date, Upload Attachement, Contract has been suspended, Contract has been resumed, Image have been downloaded successfully, You cannot suspend this contract as it is with the status, Customer has been notified, Your report is ready. You can download it from generated reports section, Reference number for the receipt voucher is required when performing manual payment, Print, Download your generated PDF, unit, Reports are being generated, Download your generated Report, Generate Invoices, Generate Invoices and Send Payment Links, Show, Not Generated Payments, Generated Payments, Contract No., Last Month Paid, Original AMT, Paid AMT, Actual Paid AMT, Civil ID, Count, Totals, Actual Paid Amount, Manual payment records will be reset. Are you sure you want to continue, Request failed with status code, error:: Selected generating date is not in between activation date and current generate date, Actual paid amount should be less than or equal to the original amount, Your request is in progress, Number of days of stopping the generation worker before the expiration day, Manual generating payment records, Contract Rollback, Renew Contract Rollback, Manual Payment Roll back, Terminate Contract Rollback, All the previous contracts should be terminated before making a new contract, Manual Generating Payments, Contract, payment records are going to be deleted , are you sure you want to continue, Loading.., Are you sure that you want to roll back the manual payment?, Easily Generate Invoices by selecting the date of the desired period, Are you sure that you want to roll back the contract termination, Worker, Release Manually Generating Lock, Generate Payments, Are you sure that you want to generate the invoices, Invoice List, Loading..., Historical, Running, More Details, Invoices, IS PAID, Is Paid, RECEIPT NO, Main Listing, REMAINING INVOICE COUNT, REMAINING INVOICE AMOUNT, INVOICE PAID COUNT, INVOICE PAID AMOUNT, INVOICE NOT PAID COUNT, INVOICE NOT PAID AMOUNT, OB PAID COUNT, OB PAID AMOUNT, OB NOT PAID COUNT, OB NOT PAID AMOUNT, Expand, Late Payment, Paid Count, Pending Count, Total Count, Are you sure that you want to send reminder notifications, Notify Payments, Civil Id, Voucher Number, Is Missed, Is Open Balance, Grace Period Amount, Missed Invoices Amount, Contract Invoices, Sms Reminder, Email Reminder, Display Section, Payment Month, Payment Year, Receipt Voucher, Total Paid Count, Total Pending Count, (Grace, Open, Missed) Amount, Not Paid/Is Suspended, Normal, Missed, Open Balance, Grace Period, Generate Open Balance Invoices, Release Manually generating Lock, Express Search, Download Link, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"Provider\":\"مزود الخدمة\",\"Sender\":\"المرسل\",\"This field is required.\":\"هذه الخانة مطلوبه.\",\"Username\":\"اسم المستخدم\",\"Password\":\"كلمة السر\",\"United\":\"اتحاد\",\"GIC\":\"الشركة العالمية الكبرى\",\"Customer notified.\":\"إخطار العميل.\",\"Reference Prefix\":\"اختصار المرجع\",\"E-Commerce\":\"المتجر الإلكتروني\",\"Payment request\":\"طلب الدفع\",\"Bulk payment request\":\"طلب دفع الرسائل الجماعية\",\"Catalogue purchase\":\"كتالوج الشراء\",\"Customer payment\":\"دفع العميل\",\"Shopify\":\"Shopify\",\"Event\":\"حدث\",\"Session\":\"الجلسة\",\"Communication error between KNPay and gateway. Please report this issue to KNPay administrator.\":\"خطأ في الاتصال بين Ottu و بوابة الدفع. الرجاء الإبلاغ عن هذه المشكلة إلى مسؤول Ottu.\",\"Bulk\":\"الرسائل الجماعية\",\"Catalogue\":\"كتالوج\",\"Notification\":\"اخطار\",\"Units\":\"وحدات\",\"Void\":\"ملغي\",\"Specify at least one email recipient\":\"الرجاء تحديد بريد الكتروني واحد على الأقل\",\"Name to be displayed in dashboard\":\"ظهور الاسم في صفحة التحكم\",\"Logo\":\"الشعار\",\"Logo to be displayed in dashboard\":\"ظهور الشعار في صفحة التجكم\",\"Merchant Website URL\":\"الموقع الخاص بالتاجر\",\"Merchant Email\":\"ايميل التاجر\",\"Merchant Phone\":\"هاتف التاجر\",\"Define list of email recipients\":\"حدد قائمة من مستقبلين البريد الالكتروني\",\"Common\":\"شائع\",\"Type\":\"نوع\",\"Name\":\"الاسم\",\"Order\":\"طلب\",\"Transaction report field\":\"خانة تقرير عملية الدفع\",\"Transaction report fields\":\"خانات تقرير عملية الدفع\",\"Emails\":\"رسائل البريد الإلكتروني\",\"We're sorry, but we don't accept payments for the moment.\":\"نأسف، لكننا لا نقبل الدفع في الوقت الحالي.\",\"Code\":\"الرمز\",\"Currency\":\"العملة\",\"Currencies\":\"العملات\",\"Fix fee\":\"رسوم ثابته\",\"Percent fee\":\"نسبة الرسوم\",\"Local\":\"محلي\",\"Used only for informational purposes\":\"تستخدم فقط لأغراض معلوماتيه\",\"Default currency\":\"العملة الافتراضية\",\"From\":\"من\",\"To\":\"إلى\",\"Rate\":\"معدل\",\"Support Request\":\"طلب دعم\",\"Suggestion\":\"اقتراح\",\"Feedback\":\"انطباع\",\"Gateway\":\"بوابة الدفع\",\"Please verify your bank statement before retrying the payment.\":\"الرجاء التأكد من حسابك البنك قبل محاولة الدفع.\",\"Cash on Delivery\":\"الدفع عند الاستلام\",\"Sale\":\"بيع\",\"Transaction type\":\"نوع عملية الدفع\",\"Call centre\":\"خدمة العملاء\",\"Yes\":\"نعم\",\"No\":\"لا\",\"Prepaid\":\"مسبق الدفع\",\"Postpaid\":\"الدفع الآجل\",\"Merchant Name\":\"اسم التاجر\",\"Product Category\":\"نوع المنتج\",\"Product Name\":\"اسم المنتج\",\"Previous Customer\":\"عميل سابق\",\"Shipping Method\":\"طريقة الشحن\",\"Number Of Items Sold\":\"رقم العناصر المباعة\",\"Name of Country\":\"اسم الدولة\",\"Hours Till Departure\":\"عدد الساعات قبل المغادرة\",\"PIN Code\":\"الرقم السري\",\"Gateways\":\"بوابات الدفع\",\"Select gateway\":\"اختر بوابة الدفع\",\"Settings\":\"إعدادات\",\"Billing address\":\"عنوان وصول الفواتير\",\"Home\":\"المنزل\",\"Arabic\":\"عربى\",\"Result\":\"النتيجة\",\"Track Id\":\"رقم التتبع\",\"Post Date\":\"تاريخ المعاملة\",\"Transaction ID\":\"رقم العملية\",\"Payment ID\":\"رقم الدفع\",\"Auth Code\":\"رمز التفويض\",\"Reference ID\":\"معرف المرجعي\",\"Decision\":\"قرار\",\"Message\":\"رساله\",\"Receipt No\":\"رقم الوصل\",\"Transaction No\":\"رقم العمليه\",\"You are not having permission to delete paid transactions.\":\"ليس لديك إذن بحذف المعاملات المدفوعة.\",\"Successfully deleted %(count)d %(items)s.\":\"%(count)d %(items)s تم الحذف بنجاح.\",\"Successfully restored %(count)d %(items)s.\":\"%(count)d %(items)s تم استعادةبنجاح.\",\"Payment\":\"دفع\",\"Created\":\"تم الإنشاء\",\"Pending\":\"قيد الإنتظار\",\"Attempted\":\"تمت المحاولة\",\"Authorized\":\"مصرح به\",\"Paid\":\"تم الدفع\",\"Failed\":\"غير ناجحة\",\"Canceled\":\"ألغيت\",\"Expired\":\"منتهية\",\"Invalid\":\"غير صحيحة\",\"Refunded\":\"مسترد\",\"Refund Queued\":\"تم جدولة  طلب الاسترداد\",\"Refund Rejected\":\"تم رفض طلب الاسترداد\",\"State\":\"حالة\",\"Gateway code\":\"رمز بوابة الدفع\",\"Amount\":\"المبلغ\",\"Due Amount\":\"المبلغ المستحق\",\"Delivery Fee\":\"رسوم التوصيل\",\"Editable amount\":\"مبلغ قابل للتعديل\",\"Allow customer to edit amount\":\"السماح للعميل بتعديل المبلغ\",\"Language\":\"اللغة\",\"Currency Code\":\"العملة\",\"Merchant order no\":\"رقم الطلب للتاجر\",\"Bulk identifier.\":\"معرف الرسائل الجماعية.\",\"Customer first name\":\"اسم العميل الاول\",\"Customer last name\":\"اسم العميل الأخير\",\"Customer email\":\"البريد الإلكتروني للعميل\",\"Customer phone\":\"هاتف العميل\",\"Customer additional phone\":\"هاتف إضافي للعميل\",\"Customer address line 1\":\"عنوان العميل 1\",\"Customer address line 2\":\"عنوان العميل 2\",\"Customer address city\":\"مدينة عنوان العميل\",\"Customer address state\":\"ولاية عنوان العميل\",\"Customer address country\":\"بلد عنوان العميل\",\"Customer address postal code\":\"الرمز البريدي لعنوان العميل\",\"Vendor name\":\"اسم البائع\",\"Due date\":\"تاريخ الاستحقاق\",\"Email Recipients\":\"مستلمو البريد الإلكتروني\",\"Comma separated email recipients which will receive customer emails.\":\"مستلمو البريد الإلكتروني مفصولين بفواصل والذين سيتلقون رسائل البريد الإلكتروني للعملاء.\",\"Product Type\":\"نوع المنتج\",\"Attachment\":\"المرفق\",\"Attachment to be sent when notifying a customer for payment.\":\"مرفق ليتم إرسالها عند إخطار العميل بالدفع.\",\"Extra\":\"اضافة\",\"Reference number\":\"رقم مرجع\",\"Expiration time\":\"تاريخ انتهاء الصلاحية\",\"If defined, transaction created after the defined period of time, will be invalidated/expired if customer tries to pay them.\":\"إذا تم تعريفه ، سيتم إبطال / انتهاء صلاحية المعاملة التي تم إنشاؤها بعد فترة زمنية محددة ، إذا حاول العميل دفعها.\",\"Email Seen at\":\"تم مشاهدة البريد الالكتروني\",\"Seen at\":\"تمت المشاهدة\",\"initiator\":\"المستخدم المرسل\",\"Payment transaction\":\"معاملة الدفع\",\"Payment transactions\":\"معاملات الدفع\",\"Paid Amount\":\"قيمة العقد المدفوعة\",\"Original Amount\":\"قيمة العقد الاصلية\",\"Payment Date\":\"تاريخ السداد\",\"Cancel\":\"إلغاء\",\"Expire\":\"انتهت الصلاحية\",\"Deleted Paid payment transaction\":\"تم حذف عملية الدفع المدفوعة\",\"Deleted Paid payment transactions\":\"معاملات الدفع المدفوعة المحذوفة\",\"Can restore deleted payment transactions\":\"إمكانية استرجاع العمليات المدفوعة المحذوفة\",\"Can delete paid payment transactions\":\"يمكن حذف المعاملات المدفوعة\",\"Success\":\"نجاح\",\"Error\":\"خطأ\",\"Gateway Settings\":\"اعدادات بوابة الدفع\",\"Fee\":\"رسوم\",\"Total\":\"المجموع\",\"This field is required\":\"هذه الخانة مطلوبه\",\"Sending SMS requires Phone field to be filled.\":\"إرسال الرسائل القصيرة يتطلب ملء خانة الهاتف.\",\"A valid number is required.\":\"مطلوب رقم صالح.\",\"Terms\":\"شروط\",\"Preparing\":\"جاري التجهيز\",\"Dispatching\":\"جاري الارسال\",\"Scheduling\":\"جدولة\",\"Paused\":\"توقف\",\"Dispatched\":\"تم الارسال\",\"Partial dispatched\":\"تم ارسال جزئي\",\"Status\":\"الحالة\",\"Start time\":\"وقت البدء\",\"End time\":\"وقت النهاية\",\"Pause time\":\"وقفة الوقت\",\"Total pause duration\":\"مجموع مدة التوقف\",\"Payment transaction ID\":\"رقم معاملة الدفع\",\"Resume\":\"استئناف\",\"Invalid file.\":\"ملف غير صالح.\",\"Invalid or missing values in some of rows\":\"قيم غير صالحة أو مفقودة في بعض الصفوف\",\"Dispatching process started.\":\"بدأت عملية الإرسال.\",\"Bulk scheduled.\":\"تم جدولة الرسائل الجماعية.\",\"Bulk pausing process started.\":\"بدأت عملية الإيقاف للرسائل الجماعية.\",\"Bulk is locked. Another operation is ongoing at the moment. Try again in few moments.\":\"الرسائل الجماعية مغلقه. هناك عملية أخرى جارية في الوقت الحالي. حاول مرة أخرى في لحظات قليلة.\",\"Bulk is already paused.\":\"الرسائل الجماعية متوقفة بالفعل.\",\"Error. Report to admins.\":\"خطأ. تقرير إلى المسؤولين.\",\"Dispatching process resumed.\":\"تم استئناف عملية الارسال.\",\"Bulk canceling process started.\":\"بدأت عملية الإلغاء للرسائل الجماعية.\",\"Bulk is already canceled.\":\"تم إلغاء الرسائل الجماعية بالفعل.\",\"Labels\":\"ملصقات\",\"Weekday\":\"يوم في الاسبوع\",\"Weekdays\":\"أيام الاسبوع\",\"Delivery Duration\":\"مدة التوصيل\",\"Delivery Durations\":\"أوقات التوصيل\",\"Stock\":\"المخزون\",\"Communication\":\"الاتصالات\",\"Shipping details\":\"تفاصيل الشحن\",\"Payment Transaction\":\"معاملة الدفع\",\"Pickup\":\"استلام\",\"Delivery\":\"توصيل\",\"Catalogue URL\":\"رابط الكتالوج\",\"Delivery country\":\"بلد التوصيل\",\"Show delivery date input\":\"اظهر مدخل تاريخ التوصيل\",\"Image\":\"صورة\",\"Product Image\":\"صورة المنتج\",\"Product Images\":\"صور المنتج\",\"Duration\":\"المدة الزمنية\",\"Working hours\":\"ساعات العمل\",\"Week days\":\"أيام الاسبوع\",\"E-mail\":\"البريد الإلكتروني\",\"Phone\":\"الهاتف\",\"Address\":\"العنوان\",\"Work days\":\"ايام العمل\",\"Select work days\":\"اختيار ايام العمل\",\"Active\":\"فعال\",\"Product\":\"المنتج\",\"Service\":\"الخدمة\",\"Description\":\"وصف\",\"Price before discount\":\"السعر قبل الخصم\",\"Price\":\"السعر\",\"Display stock\":\"اظهار المخزون\",\"Display the available stock on the website\":\"اظهار المخزون المتاح على الموقع الالكتروني\",\"Max Quantity\":\"الحد الأقصى للكمية\",\"Define max quantity purchase per order\":\"تعريف الحد الأقصى للشراء للطلب الواحد\",\"Total Sold\":\"اجمالي المباع\",\"Start date\":\"تاريخ البدء\",\"Start of the sell date\":\"تاريخ بدء البيع\",\"End date\":\"تاريخ الانتهاء\",\"End of the sell date\":\"تاريخ انتهاء البيع\",\"Helpline Number/ Inquiry number about the product\":\"رقم خط المساعدة / رقم الاستفسار عن المنتج\",\"Model number\":\"رقم الموديل\",\"Departments\":\"الاقسام\",\"Products\":\"منتجات\",\"Product name\":\"اسم المنتج\",\"Quantity\":\"الكمية\",\"Fulfilled\":\"تم بنجاح\",\"Order number\":\"رقم الطلب\",\"Destination department\":\"القسم المحدد\",\"Customer name\":\"اسم العميل\",\"Address line 1\":\"العنوان الأول\",\"Address line 2\":\"العنوان الثاني\",\"Address city\":\"عنوان المدينة\",\"Delivery date\":\"تاريخ التوصيل\",\"Shipping type\":\"نوع الشحن\",\"Preferred delivery time\":\"وقت التوصيل المفضل\",\"Preferred delivery date\":\"تاريخ التوصيل المفضل\",\"Is restored\":\"تم الاستعادة\",\"Orders\":\"الطلبات\",\"Work hour\":\"ساعة العمل\",\"Work hours\":\"ساعات العمل\",\"Delivery charges\":\"رسوم التوصيل\",\"{product.name} is not available now\":\"{product.name} غير متوفر الآن\",\"Can view owned customer payments\":\"يمكن مشاهدة عمليات دفع العملاء الخاصة بي\",\"Can view group customer payments\":\"يمكن مشاهدة عمليات دفع العملاء الخاصة بالمجموعة\",\"ECommerce\":\"الموقع الالكتروني\",\"Sender does not exist\":\"المرسل غير موجود\",\"E-Commerce Config\":\"إعدادات المتجر الإلكتروني\",\"Can view e-commerce payments\":\"القدرة على رؤية عمليات الدفع الخاصه بالمتجر الإلكتروني\",\"Can delete e-commerce payments\":\"يمكن حذف مدفوعات المتجر الإلكتروني\",\"Can restore e-commerce payments\":\"يمكن استعادة مدفوعات المتجر الإلكتروني\",\"Pending Payment\":\"عملية الدفع في الانتظار\",\"Date/Time\":\"التاريخ / الوقت\",\"Event name\":\"اسم الحدث\",\"Header title\":\"عنوان ال header\",\"Event list page header\":\"Header قائمة الأحداث\",\"Displayed fields\":\"الخانات الظاهرة\",\"Can restore event payments\":\"يمكن استرجاع علميات الدفع للحدث\",\"Venue name\":\"اسم القاعة\",\"Feedback URL\":\"رابط ردود الفعل\",\"Tickets available from\":\"التذاكر متاحة من\",\"Tickets available till\":\"التذاكر متاحة الى\",\"Rules\":\"القواعد\",\"Events\":\"الأحداث\",\"Event types\":\"نوع الحدث\",\"Event category\":\"فئة الحدث\",\"Event categories\":\"فئات الحدث\",\"Event Image\":\"صورة الحدث\",\"Event Images\":\"صور الحدث\",\"Ticket name\":\"اسم التذكره\",\"Ticket Quantity\":\"كمية التذاكر\",\"Event start time\":\"وقت بدء الحدث\",\"Event end time\":\"وقت نهاية الحدث\",\"Max Tickets\":\"الحد الأقصى للتذاكر\",\"Min Quantity\":\"الكمية الادنى\",\"Event ticket detail\":\"تفاصيل تذكرة الحدث\",\"Event ticket details\":\"تفاصيل تذكرة الحدث\",\"Booking number\":\"رقم الحجز\",\"First name\":\"الاسم الاول\",\"Last name\":\"الاسم الاخير\",\"Phone number\":\"رقم الهاتف\",\"Email\":\"البريد الإلكتروني\",\"Booking person information\":\"معلومات حجز الشخص\",\"Used to store Booking user extra information\":\"تستخدم لحفظ معلومات اضافية\",\"Event Date\":\"تاريخ الحدث\",\"Booking status\":\"حالة الحجز\",\"Is Welcome email sent?\":\"هل البريد الالكتروني الترحيبي ارسل؟\",\"Booking\":\"الحجز\",\"Bookings\":\"الحجوزات\",\"Attended\":\"تم الحضور\",\"Not Attended\":\"لم يتم الحضور\",\"Unit price\":\"سعر الوحدة\",\"Tickets PDF URL\":\"رابط PDF للتذكرة\",\"Booking item\":\"عنصر الحجز\",\"Booking items\":\"عناصر الحجز\",\"Confirmed\":\"تم التأكيد\",\"Booking Item\":\"عنصر الحجز\",\"Encrypted number\":\"الرقم المشفر\",\"Is QR scanned?\":\"هل ال QR مسح؟\",\"Booking Extra Information\":\"معلومات إضافية للحجز\",\"Event feedback\":\"ردود الفعل للحدث\",\"Comment\":\"تعليق\",\"Registration information\":\"معلومات التسجيل\",\"Used to store Registration information of user\":\"تستخدم لحفظ معلومات التسجيل للعميل\",\"Event Registration\":\"حجز الحدث\",\"Event Registrations\":\"حجوزات الحدث\",\"Invalid Ticket selection.\":\"تذكرة غير صالحة.\",\"There is no ticket for this date\":\"لا يوجد تذاكر لهذا اليوم\",\"You can not purchase more than %s tickets in single purchase\":\"لا يمكنك شراء اكثر من %s تذكرة في عملية سداد واحدة\",\"You have to purchase at least %s tickets\":\"عليك انت تشتري على الأقل  %s تذكرة\",\"You have already purchased ticket with this email.\":\"لقد اشتريت بالفعل تذكرة بهذا البريد الالكتروني.\",\"You cannot buy tickets for passed dates\":\"لا يمكنك شراء تذاكر لتاريخ سابق\",\"You can not book more than available tickets for selected date\":\"لا يمكنك حجز تذاكر اكثر من المتاح في اليوم المحدد\",\"Sorry, there are no more available tickets\":\"عفوأ، لم يعد هناك تذاكر متاحة\",\"You can't buy more than %s tickets\":\"لا يمكنك شراء اكثر من %s  تذكرة\",\"You can't downgrade ticket price\":\"لا يمكنك خفض سعر التذكرة\",\"You can't cancel past booking\":\"لا يمكنك الغاء حجز مسبق\",\"Invalid QR code\":\"رمز QR غير صالح\",\"Booking with such booking number doesn't exists\":\"الحجز بهذا الرقم غير موجود\",\"Booking is not paid\":\"الحجز لم يدفع\",\"Ticket is booked for another event\":\"التذكرة محجوزة لحدث آخر\",\"Ticket is already scanned\":\"التذكرة ممسوحة مسبقا\",\"Ticket is booked for another date\":\"التذكرة لتاريخ اخر\",\"Ticket not found\":\"لم يتم العثور على التذكرة\",\"Civil ID already used twice for this day.\":\"تم استخدام البطاقه المدنيه مرتين في هذا اليوم.\",\"Created at\":\"تاريخ الانشاء\",\"Invalid Event\":\"حدث غير صالح\",\"Invalid Url\":\"رابط غير صالح\",\"Email send successfully\":\"تم ارسال البريد الالكتروني بنجاح\",\"Branch not found\":\"لم يتم العثور على الفرع\",\"Delivery area not found\":\"لم يتم العثور على منطقة التوصيل\",\"Call centre phone number\":\"رقم خدمة العملاء\",\"Working hours during week\":\"ساعات العمل خلال الاسبوع\",\"Approximate delivery time\":\"وقت التوصيل المتوقع\",\"Can view order details\":\"يمكن مشاهدة تفاصيل الطلب\",\"Can view delivery areas\":\"يمكن مشاهدة مناطق التوصيل\",\"Can view food_order payments\":\"يمكن مشاهدة عمليات الدفع للطعام\",\"Can delete food_order payments\":\"يمكن حذف طلبات الدفع للطعام\",\"Can restore food_order payments\":\"يمكن استرجاع عمليات الدفع للطعام\",\"Minimum order order sum\":\"الحد الأدنى للطلب\",\"Minimum number of plates\":\"الحد الأدنى للاطباق\",\"Branches\":\"الافرع\",\"Branch\":\"فرع\",\"Branch QR Code\":\"رمز QR للفرع\",\"Delivery zone\":\"نطاق التوصيل\",\"Delivery area\":\"منطقة التوصيل\",\"Delivery area QR Code\":\"رمز ال QR لمنطقة التوصيل\",\"Category Name\":\"اسم الفئة\",\"Service charges\":\"رسوم الخدمة\",\"Product category\":\"فئة المنتج\",\"Product categories\":\"فئات المنتج\",\"Product price\":\"سعر المنتج\",\"AddOn Name\":\"اسم الاضافة\",\"Add on\":\"اضافة\",\"Add ons\":\"الاضافات\",\"Product description\":\"وصف المنتج\",\"Add ons to this product\":\"الإضافات لهذا المنتج\",\"Min\":\"الحد الادنى\",\"Max\":\"الحد الاقصى\",\"Options\":\"اختيارات\",\"Options of product\":\"اختيارات المنتج\",\"Product option header\":\"اختيار header للمنتج\",\"Is default choice?\":\"استخدام الافتراضي؟\",\"Promoted product\":\"المنتج المسوق\",\"Special instructions\":\"ملاحظات خاصة\",\"House\":\"منزل\",\"Apartment\":\"شقة\",\"Office\":\"مكتب\",\"Cash on delivery\":\"نقداً عند الاستلام\",\"Accepted\":\"تم القبول\",\"Cooking in progress\":\"جاري تجهيز الطعام\",\"Ready for pickup\":\"جاهز للاستلام\",\"Delivery in progress\":\"جاري التوصيل\",\"Arrived\":\"وصلت\",\"Payment type\":\"نوع عملية الدفع\",\"Delivery Area\":\"منطقة التوصيل\",\"Order extra details\":\"تفاصيل إضافية للطلب\",\"Used to store user information\":\"تستخدم لحفظ معلومات العميل\",\"Catering delivery time\":\"وقت توصيل catering\",\"Order QR Code\":\"رمز ال QR للطلب\",\"Governorate name\":\"اسم المحافظة\",\"Includes all products?\":\"اضافة كل المنتجات؟\",\"Included Products\":\"المنتجات المتضمنة\",\"Excluded Products\":\"المنتجات المستثاه\",\"Included Categories\":\"الاقسام المتضمنة\",\"Excluded Categories\":\"الاقسام المستثاه\",\"Condition\":\"الظرف\",\"Conditions\":\"الاحكام\",\"Product not found\":\"لم يتم العثور على المنتج\",\"Pickup field\":\"خانة الاستلام\",\"Delivery field\":\"خانة التوصيل\",\"Voucher title\":\"عنوان القسيمة\",\"code\":\"الرمز\",\"Free delivery\":\"توصيل مجاني\",\"Discount type\":\"نوع الخصم\",\"Minimum order amount\":\"اقل مبلغ للطلب\",\"Voucher\":\"قسيمة\",\"Vouchers\":\"قسائم\",\"Specify discount amount\":\"تحديد مبلغ الخصم\",\"Specify either free delivery option or discount for this voucher\":\"الرجاء تحديد اما توصيل مجاني او خصم لهذه القسيمة\",\"Minimum order amount can't be less than 0\":\"الحد الأدنى للطب لا يمكن ان يكون اقل من 0\",\"Order feedback\":\"رد الفعل للطلب\",\"Order feedbacks\":\"ردود الفعل للطلب\",\"Feedback for order no %s\":\"رد الفعل للطلب رقم %s\",\"Soon\":\"قريبا\",\"{menu_item.product.name} \":\"{menu_item.product.name} \",\"Product {menu_item.product.name} is not available now\":\"المنتج {menu_item.product.name} غير متوفر الآن\",\"You can't order more then {menu_item.quantity} of {menu_item.product.name}\":\"لا يمكنك طلب أكثر {menu_item.quantity} من {menu_item.product.name}\",\"Some of selected option does not exist\":\"بعض الاختيارات المحددة غير متاحة\",\"Add on not found\":\"الاضافة غير متاحة\",\"Minimum number of plates for {category.name} \":\"الحد الأدنى للاطباق ل {category.name} \",\"Product with name {menu_item.product.name} not active now\":\"المنتج باسم {menu_item.product.name} غير فعال الآن\",\"Product with name {menu_item.product.name} is not available for \":\"المنتج باسم {menu_item.product.name} غير متاح الى \",\"'Cash on delivery' is disabled by administration\":\"الدفع عن التوصيل غير متاح من المطعم\",\"Delivery area is not available now\":\"منطقة التوصيل غير متوفرة الان\",\"Branch with such id doesn't exists\":\"فرع بهذا الرقم غير متاح\",\"Branch is not available now\":\"الفرع غير متوفر الآن\",\"You can't create order with empty cart\":\"لا يمكنك انشاء طلب مع سلة مشتريات فارغة\",\"Selected branch is currently unavailable now\":\"الفرع المحدد غير متوفر الآن\",\"Delivery area is not available for catering\":\"منطقة التوصيل غير متوفرة لل catering\",\"Invalid voucher code\":\"رمز القسيمة غير صالح\",\"Voucher will be available from {voucher.start_date}\":\"القسيمة ستكون متاحة من {voucher.start_date}\",\"Voucher expired\":\"انت صلاحية القسيمة\",\"In order to activate voucher order sum must be at least {amount} {currency}\":\"لتتمكن من تفعيل القسيمة اجمالي المبلغ يجب ان يكون على الأقل {amount} {currency}\",\"Voucher is no longer available\":\"القسيمة لم تعد متوفرة\",\"Voucher is not available now\":\"القسيمة ليست متاحة الآن\",\"Your order proceed successfully\":\"تم تفعيل طلبك بنجاح\",\"Order not found\":\"لم يتم العثور على الطلب\",\"Order already Delivered\":\"تم توصيل الطلب بالفعل\",\"Request data\":\"طلب البيانات\",\"Mandatory field\":\"حقل الزامي\",\"Transaction\":\"العملية\",\"Invalid code.\":\"رمز غير صالح.\",\"Country\":\"البلد\",\"Notifications\":\"الاشعارات\",\"Notification Set\":\"تحديد الاشعار\",\"Pre Due Date\":\"تاريخ سابق\",\"Post Due Date\":\"تاريخ لاحق\",\"Is Recurring?\":\"متكرر؟\",\"Default email\":\"البريد الإلكتروني الافتراضي\",\"Show terms & conditions?\":\"اظهار الشروط و الاحكام؟\",\"Terms & conditions\":\"الشروط و الاحكام\",\"Order no\":\"رقم الطلب\",\"First Name\":\"الاسم الأول\",\"Last Name\":\"الاسم الأخير\",\"City\":\"المدينه\",\"Postal Code\":\"العنوان البريدي\",\"Due Date\":\"التاريخ المستحق\",\"Payment Request Attachment\":\"مرفق طلب الدفع\",\"Field\":\"خانة\",\"Required?\":\"مطلوب؟\",\"Customer details fields\":\"خانات تفاصيل العميل\",\"Is active?\":\"فعال؟\",\"Is for registration?\":\"للتسجيل؟\",\"Is for booking?\":\"للحجز؟\",\"Terms and conditions\":\"الشروط و الأحكام\",\"Want to get additional phone number?\":\"هل ترغب في الحصول على رقم إضافي؟\",\"You can't pay more than the original amount\":\"لا يمكن دفع مبلغ اكبر من المبلغ الاصلي\",\"You can't pay less than {} {}\":\"لا يمكن دفع اقل من {} {}\",\"Oops, transaction was canceled by the merchant.\":\"عفوًا ، تم إلغاء المعاملة بواسطة التاجر.\",\"Oops, transaction is expired.\":\"عفوًا ، انتهت صلاحية العملية.\",\"Oops, transaction is invalid - {obj.invalidation_reason}.\":\"عفوًا ، المعاملة غير صالحة - {obj.invalidation_reason}.\",\"Unable to initiate the payment.\":\"غير قادر على بدء الدفع.\",\"Thank you! {currency_code} {amount} is paid.\":\"شكراً لك!  {currency_code} {amount} دفعت\",\"Thank you! {currency_code} {amount} is authorized.\":\"شكرا لك تم التفويض {currency_code} {amount}\",\"Thank you, your order is placed successfully!\":\"شكراً لك، طلبك تم بنجاح!\",\"Oops, you clicked cancel.\":\"عفوًا ، لقد قمت بالضغط على الإلغاء.\",\"Order No\":\"رقم الطلب\",\"Reference No\":\"رقم المرجع\",\"SMS\":\"رسالة قصيرة\",\"WhatsApp\":\"واتساب\",\"Gateway code is required\":\"مطلوب رمز بوابة الدفع\",\"This transaction cannot be paid anymore.\":\"لا يمكن دفع المعاملة.\",\"Payment Failed.\":\"عملية الدفع فشلت.\",\"Number of items sold.\":\"رقم البضاعة المباعة.\",\"Order number does not exist.\":\"رقم الطلب غير موجود.\",\"No attempts for this order.\":\"لا يوجد محاولات لهذا الطلب.\",\"QR Code\":\"رمز QR\",\"Download\":\"تحميل\",\"User QR Code\":\"رمز QR العميل\",\"Remove\":\"حذف\",\"Search\":\"بحث\",\"Create QR Code\":\"انشاء رمز QR\",\"No. of entries\":\"عدد الدخول\",\"Entry Type\":\"نوع الدخول\",\"Date\":\"التاريخ\",\"Time\":\"الوقت\",\"General Rules\":\"الاحكام العامة\",\"To review the agreed Terms & Conditions, please\":\"لمراجعة الشروط و الاحكام، الرجاء\",\"Click Here\":\"اضغط هنا\",\"Scan this QR code at the event for check-in\":\"الرجاء مسح كود QR في الحدث لتتمكن من الدخول\",\"QR code No.\":\"رقم رمز ال QR.\",\"Booking No\":\"رقم حجز\",\"Date Time\":\"التاريخ / الوقت\",\"Venue Name Link (Google map link)\":\"اسم القاعة (Google map link)\",\"booking ref\":\"مرجع الحجز\",\"Special instruction\":\"ملاحظات خاصة\",\"Total Amount\":\"الاجمالي\",\"Net Amount\":\"صافي\",\"Show payment page\":\"اظهار صفحة الدفع\",\"Invoiced To\":\"ارسلت الفاتورة الى\",\"INTERNAL ID\":\"معرف داخلي\",\"Telephone No\":\"الهاتف لا\",\"Email ID\":\"البريد الإلكتروني\",\"Issue Date\":\"تاريخ الاصدار\",\"Paid Date\":\"تاريخ الدفع\",\"Initiator Name\":\"اسم البادئ\",\"RECEIPT\":\"إيصال\",\"PAID\":\"دفع\",\"Reference No.\":\"رقم المرجع.\",\"Initiator details\":\"تفاصيل البادئ\",\"Submit\":\"انشاء\",\"Name or title\":\"الاسم أو اللقب\",\"Unit\":\"وحدة\",\"QR code created!\":\"تم انشاء رمز QR!\",\"Users\":\"مستخدمين\",\"Can search payment transactions\":\"يمكن البحث عن عمليات الدفع\",\"Please contact the site administrator to activate this service\":\"الرجاء التواصل مع الدعم الخاص بالموقع لتفعيل الخدمة\",\"Gateway Code\":\"رمز بوابة الدفع\",\"Card type\":\"نوع البطاقة\",\"Restore\":\"استعادة\",\"Delete\":\"حذف\",\"Dispatch\":\"ارسال\",\"Schedule\":\"جدولة\",\"Internal ID\":\"معرف داخلي\",\"Remarks\":\"ملاحظات\",\"Awaiting customer choice\":\"في انتظار اختيار العميل\",\"Please enter valid email recipients.\":\"الرجاء إدخال مستلمين صالحين للبريد الإلكتروني.\",\"Alphanumeric value is required.\":\"القيمة الأبجدية الرقمية مطلوبة.\",\"Only characters allowed.\":\"الأحرف المسموح بها فقط.\",\"Enter a valid Kuwaiti Civil ID number.\":\"أدخل رقم البطاقة المدنية الكويتية صالحة.\",\"Ensure the length is 12.\":\"ضمان طول 12.\",\"Action performed successfully.\":\"تم تنفيذ الإجراء بنجاح.\",\"Leave feedback\":\"اترك تقييم للخدمة\",\"Must be valid positive number\":\"مطلوب رقم صالح\",\"Choose date\":\"اختر التاريخ\",\"Sorry, we don't accept payments for the moment\":\"عذرا ، نحن لا نقبل المدفوعات في الوقت الراهن\",\"Warning\":\"تحذير\",\"Back to cart\":\"العودة لسلة المشتريات\",\"Available\":\"الأماكن المتاحة\",\"On Hold\":\"قائمة الانتظار\",\"Booked\":\"تم الحجز\",\"Filter\":\"فلتر\",\"Add\":\"اضافة\",\"Failed to upload file\":\"فشل في رفع الملف\",\"Enter valid email address\":\"الرجاء ادخال بريد الكتروني صالح\",\"Use default email\":\"استخدم الافتراضي\",\"Country code\":\"الرقم الدولي\",\"Enter valid phone number\":\"أدخل رقم هاتف صالح\",\"Example:\":\"مثال:\",\"Please select your location precisely\":\"الرجاء اختيار موقعك بدقة\",\"GOT IT\":\"حسناً\",\"Confirm\":\"تأكيد\",\"Tap to edit location\":\"إضغط لتعديل الموقع\",\"Export Transactions\":\"اصدار العمليات\",\"Gateway Response\":\"بوابة الاستجابة\",\"Card Type\":\"نوع البطاقه\",\"Export default\":\"تصدير الافتراضي\",\"Export\":\"تصدير البيانات\",\"Export selected\":\"تصدير المحدد\",\"Modified\":\"تم التعديل\",\"Created by\":\"انشأ من قبل\",\"Seen\":\"رأيت\",\"Email seen\":\"تم رؤية البريد الالكتروني\",\"Product details\":\"تفاصيل المنتج\",\"Cart\":\"عربة التسوق\",\"Checkout\":\"الدفع\",\"Events list\":\"قائمة الأحداث\",\"Event details\":\"تفاصيل الحدث\",\"Thank You\":\"شكرا لك\",\"Please wait ...\":\"الرجاء الانتظار . . . . . . .\",\"Terms and Conditions\":\"الشروط و الأحكام\",\"Order Menu\":\"قائمة الطلب\",\"Transactions\":\"العمليات\",\"Deleted Paid Transactions\":\"المعاملات المدفوعة المحذوفة\",\"Table Headers\":\"حقول الجدول\",\"Customer Payment\":\"دفع العملاء\",\"E-commerce\":\"المتجر الالكتروني\",\"Create Bookings\":\"انشاء الحجز\",\"Fullfilment\":\"تحقيق، إنجاز\",\"Fulfillment\":\"إكمال\",\"Dashboard\":\"لوحة التحكم\",\"All transactions\":\"كل الحركات المالية\",\"Help/Support\":\"المساعدة و الدعم الفني\",\"Create payment request\":\"إنشاء طلب دفع\",\"Details\":\"تفاصيل\",\"Subtotal\":\"المجموع الفرعي\",\"Discount\":\"خصم\",\"Grand total\":\"المبلغ الإجمالي\",\"Continue shopping\":\"مواصلة التسوق\",\"Proceed to checkout\":\"الإستمرار لعملية الدفع\",\"Review your order\":\"مراجعة طلبك\",\"Qty\":\"عدد\",\"Location\":\"موقعك\",\"Customer name (optional)\":\"اسم العميل\",\"Billing Information\":\"معلومات الدفع\",\"Use a different shipping information\":\"استخدام معلومات شحن مختلفة\",\"By clicking Pay button you are accepting our\":\"بالضغط على زر الدفع فأنت تقبل\",\"Terms & Conditions\":\"الشروط و الاحكام\",\"Select pickup store\":\"حدد متجر الإستلام\",\"Apartment, suite, etc. (optional)\":\"شقة ، جناح ، إلخ (اختياري)\",\"Your cart is empty\":\"سلة التسوق الخاصه بك فارغة\",\"view catalogue\":\"عرض الكتالوج\",\"My Cart\":\"سلة التسوق\",\"Cart is empty\":\"السلة فارغة\",\"View cart\":\"عرض السلة\",\"Some of products in cart does not have delivery option. They should be removed from cart\":\"بعض المنتجات في عربة التسوق ليس لديها خيار التوصيل. يجب إزالتها من سلة التسوق\",\"Some of products in cart does not have pickup option. They should be removed from cart\":\"لا تحتوي بعض المنتجات في سلة التسوق على خيار الإستلام. يجب إزالتها من سلة التسوق\",\"Some of the products cannot be picked up from same store. Please, select products to keep in cart\":\"لا يمكن استلام بعض المنتجات من نفس المتجر. من فضلك ، حدد المنتجات للاحتفاظ بها في سلة التسوق\",\"Available QTY\":\"الكمية المتوفرة\",\"Check video\":\"تحقق من الفيديو\",\"You save\":\"حفظ\",\"Time left\":\"الوقت المتبقي\",\"Days\":\"أيام\",\"Hours\":\"ساعات\",\"Added to cart\":\"تمت الإضافة إلى سلة التسوق\",\"Add to cart\":\"أضف إلى سلة التسوق\",\"Buy now\":\"اشتري الآن\",\"Not available now\":\"ليس متاح الأن\",\"Search by keyword\":\"البحث بالكلمة\",\"No results found\":\"لم يتم العثور على نتائج\",\"days\":\"أيام\",\"hours\":\"ساعات\",\"Added to Cart\":\"تمت الإضافة إلى سلة التسوق\",\"More details\":\"المزيد من التفاصيل\",\" details\":\" تفاصيل\",\"Open hours\":\"ساعات العمل\",\"Opened Today:\":\"يبدأ العمل اليوم:\",\"Show open hours\":\"اعرض ساعات العمل\",\"Code verification\":\"التحقق من الرمز\",\"Thank You!!!\":\"شكرا لك!!!\",\"Your ticket booking is confirmed successfully.\":\"تم تأكيد حجز تذكرتك بنجاح.\",\"Download Tickets\":\"تحميل التذاكر\",\"This is a one time URL, therefore please download the ticket before leaving the page. However, a copy of it will be also sent to your email address.\":\"هذا الرابط صالحة لمرة واحدة فقط، لذا يرجى تحميل التذكرة قبل اغلاق الصفحة. هناك نسخة من التذكرة تم ارسالها لبريدك الالكتروني.\",\"Attention\":\"الرجاء الانتباه\",\"Thank you for leaving a feedback!\":\"شكرا لك لترك انطابعك!\",\"Book\":\"احجز\",\"Pay with\":\"ادفع عن طريق\",\"Free\":\"مجانا\",\" & \":\" و \",\"Choose Your Date ...\":\"اختر تاريخك ...\",\"Change date\":\"تغيير التاريخ\",\"Select Entry type:\":\"حدد نوع الإدخال:\",\"Sold out\":\"نفذت الكمية\",\"I read and accept\":\"لقت قرأت و وافقت\",\"Booked Dates ...\":\"تواريخ الحجز ...\",\"Thank you, we are fully booked.\":\"شكراً لك، الحجوزات ممتلئة.\",\"Please accept terms and conditions.\":\"يرجى قبول الشروط والأحكام.\",\"Search Events Here\":\"البحث عن حدث هنا\",\"Event Name\":\"اسم الحدث\",\"Actions\":\"إجراءات\",\"Please, fill in registration form\":\"من فضلك، املأ استمارة التسجيل\",\"Add a comment\":\"اضف تعليق\",\"Terms And Conditions\":\"الأحكام والشروط\",\"Thank you for registration\":\"شكراً للتسجيل\",\"Your cart\":\"سلة التسوق الخاصة بك\",\"Clear cart\":\"اخلاء سلة التسوق\",\"Number of plates\":\"عدد الاطبق\",\"Minimum is\":\"الحد الأدنى هو\",\"Sub total\":\"المجموع\",\"Delivery fee\":\"رسوم التوصيل\",\"Total-amount\":\"المبلغ الاجمالي\",\"Promotions\":\"عروض\",\"Promotion\":\"عرض\",\"Ingredients:\":\"المكونات:\",\"Out of stock\":\"نفذت الكمية\",\"Already in cart\":\"لقد تم اضافتها للسلة مسبقاً\",\"Sub Total\":\"اجمالي فرعي\",\"Minimum order is ${this.min_order} ${this.menuConfig.currency}\":\"الحد الأدنى للطلب هو ${this.min_order} ${this.menuConfig.currency}\",\"Choose desired delivery time\":\"اختيار وقت التوصيل المفضل\",\"All rights reserved Ottu ©\":\"جميع الحقوق محفوظة Ottu ©\",\"Menu\":\"القائمة\",\"Change delivery type\":\"تغيير نوع التوصيل\",\"Change delivery method\":\"تغيير طريقة التوصيل\",\"Minimum order\":\"الحد الأدنى للطلب\",\"We Accept\":\"نحن نقبل\",\"Congratulations! Your voucher activated successfully\":\"مبروك! لقد تم تفعيل القسيمة بنجاح\",\"You get -${voucher.amount} \":\"انت تحصل -${voucher.amount} \",\"And free delivery\":\"و توصيل مجاني\",\"Error occurred during voucher activation\":\"خطأ حدث عند تفعيل القسيمة\",\"Enter voucher code\":\"ضع رمز القسيمة\",\"Enter your code here\":\"ضع الرمز الخاص بك هنا\",\"Activate\":\"فعل\",\"Voucher activated\":\"القسيمة فُعلت\",\"Order Status\":\"حالة الطلب\",\"Thank you for your order. You will receive confirmation email shortly.\":\"شكرأ لطلبك، سوف تستقبل بريد الكتروني للتأكيد قريبا.\",\"Your QR Code\":\"رمز ال QR الخاص بك\",\"Transaction failed\":\"العملية غير ناجحة\",\"Press the button to try again\":\"الرجاء الضغط على الزر للمحاولة مرة اخرى\",\"Order Details\":\"تفاصيل الطلب\",\"QTY\":\"الكمية\",\"Special Instuction\":\"تعليمات خاصة\",\"Payment Details\":\"بيانات الدفع\",\"Payment method\":\"طريقة الدفع\",\"Transaction Date/Time\":\"تاريخ/وقت العملية\",\"Customer Details\":\"تفاصيل العميل\",\"Shipping Type\":\"نوع الشحن\",\"Customer Email\":\"ايميل العميل\",\"Order state successfully changed to ${this.order_states[this.stepper_value-1].value}\":\"حالة الطلب تغيرت بنجاح الى ${this.order_states[this.stepper_value-1].value}\",\"Order Summary\":\"ملخص الطلب\",\"Delivery Time\":\"وقت التوصيل\",\"min\":\"دقيقة\",\"Item(s)\":\"العناصر\",\"AddOns\":\"اضافات\",\"Total Price\":\"اجمالي\",\"User Details\":\"تفاصيل المستخدم\",\"Delivery Details\":\"تفاصيل التوصيل\",\"Extra Details\":\"تفاصيل اكثر\",\"Enter your additional note here\":\"ادخل ملاحظات اضافية\",\"Mininum order is\":\"الحد الأدنى للطلب\",\"Continue Shopping\":\"الاستمرار بالتسوق\",\"Minimum Order\":\"اقل مبلغ للطلب\",\"Contact Details\":\"تفاصيل الاتصال\",\"Working Hours\":\"ساعات العمل\",\"Items\":\"عناصر\",\"Your Cart\":\"عربة تسوقك\",\"Clear All\":\"مسح الكل\",\"The cart is currently empty\":\"عربة تسوقك فارغه\",\"Area\":\"المنطقة\",\"Choose One\":\"اختر واحدة\",\"Payment Method\":\"وسيلة الدفع\",\"Payment summary\":\"ملخص الدفع\",\"Okay\":\"حسناً\",\"TO\":\"الى\",\"Back\":\"اذهب\",\"To Menu\":\"الى القائمة\",\"Your Choice Of\":\"اختيارك من \",\"Choose items from the list\":\"اختار من القائمة\",\"Choose 1\":\"اختر واحد\",\"Add-Ons\":\"اضافات\",\"Extra Note\":\"ملاحظات اضافية\",\"Enter your extra note here\":\"ملاحظات اضافية\",\"To Cart\":\"الى سلة التسوق\",\"Please, select number of\":\"من فضلك اختر عدد\",\"not greater than the maximum selections\":\"ليست اكثر من\",\"not less than the minimum selections\":\"ليس اقل من\",\"Menu Category\":\"القائمة الرئيسية\",\"Search by food name\":\"البحث باسم القائمة\",\"Choose order type\":\"اختيار نوع الطلب\",\"Choose desired order type. We can deliver it to you or you can pick up it by yourself\":\"اختار نوع الطلب المرغوب به، يمكننا توصيله لك او بإمكانك استلامه بنفسك\",\"Delivery area will be open ${delivery_open_hours}\":\"منطقة التوصيل ستفتح ${delivery_open_hours}\",\"Branches will be open ${branch_open_hours}\":\"الفرع سيفتح ${branch_open_hours}\",\"Proceed\":\"استمر\",\"Restaurant is not working now. Please comeback latter\":\"المطعم غير متاح حالياً. الرجاء العودة في وقت لاحق\",\"Select add-ons\":\"اختيار الاضافات\",\"Add special instruction\":\"اضافة ملاحظات خاصة\",\"Add to order\":\"إضافة للطلب\",\"Review order\":\"مراجعة الطلب\",\"Modify Order\":\"تعديل الطلب\",\"Delivery details\":\"تفاصيل التوصيل\",\"Extra details\":\"تفاصيل اضافية\",\"Delivery time\":\"وقت التوصيل\",\"SubTotal\":\"الاجمالي\",\"Cash\":\"نقداً\",\"Try again\":\"حاول مجددا\",\"Order confirmation\":\"الموافقة على الطلب\",\"Order status\":\"حالة الطلب\",\"Payment details\":\"تفاصيل الدفع\",\"Customer details\":\"تفاصيل العميل\",\"Order details\":\"تفاصيل الطلب\",\"Payment details not found\":\"لم يتم العثور على تفاصيل الدفع\",\"Address Name\":\"اسم العنوان\",\"Block\":\"قطعة\",\"Street\":\"الشارع\",\"Avenue\":\"جادة\",\"Floor\":\"الدور\",\"Access Location\":\"الوصول إلى الموقع\",\"Download Attachment\":\"تحميل المرفقات\",\"Download Receipt\":\"تحميل الإيصال\",\"Download Ticket\":\"تحميل التذكرة\",\"Thank you!\":\"شكراً\",\"Order description\":\"وصف الطلب\",\"Transaction expired, please contact administrator\":\"انتهت المعاملة، يرجى الاتصال بالمسؤول\",\"Enter amount you wish to pay\":\"أدخل المبلغ الذي ترغب في دفعه\",\"Transaction not found\":\"لم يتم العثور على المعاملة\",\"Transaction cannot be paid as it is expired\":\"لا يمكن دفع المعاملة لأنها منتهية الصلاحية\",\"Total amount\":\"المبلغ الإجمالي\",\"Gateway fee\":\"رسوم بوابة الدفع\",\"Enter all details correctly\":\"من فضلك ادخل البيانات كلها صحيحه\",\"Building/House No.\":\"مبني منزل رقم.\",\"Apartment/Office No.\":\"شقة / مكتب رقم.\",\"PACI No.\":\"الرقم الآلي للعنوان.\",\"From:\":\"من\",\"To:\":\"الى\",\"Total Bill\":\"اجمالي الفاتورة\",\"Pay Now\":\"ادفع الان\",\"Best Choice\":\"الاختيار الافضل\",\"fee will be applied\":\"رسوم\",\"Work\":\"العمل\",\"Chalet\":\"الشاليه\",\"Farm\":\"المزرعة\",\"Custom name\":\"إضافة اسم جديد\",\"Payment Request Details\":\"تفاصيل طلب الدفع\",\"Add Your Location\":\"اضف موقعك\",\"Please contact the concerned department to complete the registration process.\":\"يرجى التواصل مع الإدارة المعنية لإتمام عملية التسجيل.\",\"Hello\":\"مرحبا\",\"Administration panel\":\"لوحة الإدارة\",\"Switch language\":\"تغيير اللغة\",\"Account settings\":\"إعدادات الحساب\",\"Logout\":\"الخروج\",\"Payment Request\":\"طلب الدفع\",\"Create\":\"إنشاء\",\"Uploads\":\"تحميل\",\"Bulk create\":\"انشاء حزمة\",\"Product bulk create\":\"انشاء مجموعة من المنتجات\",\"Copy link\":\"انسخ الرابط\",\"Cannot fetch data. Most likely there is an issue with the configuration.\":\"لا يمكن استقبال البيانات. يوجد مشكلة في الإعدادات\",\"Copied to clipboard\":\"نسخ إلى الحافظة\",\"Available Headers\":\"الحقول المتاحة\",\"Selected Headers\":\"الحقول المختارة\",\"rows per page\":\"الصفوف في كل صفحة\",\"Are you sure?\":\"هل انت متأكد\",\"Creation date\":\"تاريخ الإنشاء\",\"Payment date\":\"تاريخ الدفع\",\"ID\":\"معرف\",\"The amount cannot be greater than the available amount.\":\"المبلغ لا يمكن ان يكون اكثر من المبلغ المتاح\",\"Initiator\":\"المبادر\",\"Import\":\"استيراد\",\"Filename\":\"اسم الملف\",\"Rows/Imported rows\":\"الصفوف / الصفوف المستوردة\",\"Error File\":\"ملف الخطأ\",\"Error report\":\"تقرير خطأ\",\"Reports\":\"التقارير\",\"File\":\"ملف\",\"Progress\":\"تقدم\",\"Attempted at\":\"حاول في\",\"Bulk transaction ID\":\"معرّف المعاملة المجمّعة\",\"Bulk plugin is not properly configured. Ask system administrator for more details\":\"المكون الإضافي غير مكوّن بشكل صحيح. اسأل مسؤول النظام لمزيد من التفاصيل\",\"Example file\":\"ملف المثال\",\"Files initiator\":\"ملفات البادئ\",\"File name\":\"اسم الملف\",\"Is recurring\":\"متكرر\",\"Rows/imported rows\":\"الصفوف / الصفوف المستوردة\",\"Uploaded by\":\"تم الرفع بواسطة\",\"Uploaded on\":\"تم التحميل بتاريخ\",\"Is scheduled\":\"مجدولة\",\"Is active\":\"نشط\",\"Required fields\":\"الخانات مطلوبة\",\"All fields\":\"جميع المجالات\",\"[Recurrence] required fields\":\"الحقول المطلوبة\",\"[Recurrence] all fields\":\"[تكرار] جميع المجالات\",\"Bulk processing started\":\"بدأت معالجة بالجملة\",\"Upload processing started\":\"تم بدء التحميل\",\"Download example\":\"تحميل المثال\",\"Start typing to search event\":\"ابدأ الكتابة للبحث عن حدث\",\"Select bulk file\":\"حدد ملف مجمع\",\"Download error reports\":\"تحميل تقارير الأخطاء\",\"Are you sure you want to cancel booking?\":\"هل انت متأكد من الغاء الحجز؟\",\"Edit Email address\":\"تعديل البريد الالكتروني\",\"Send booking email again?\":\"ارسال البريد الالكتروني للحجز مرة اخرى؟\",\"Save changes\":\"احفظ التغييرات\",\"Booking Details\":\"تفاصيل الحجز\",\"Ticket details\":\"تفاصيل التذكرة\",\"Event name:\":\"اسم الحدث:\",\"Event date:\":\"تاريخ الحدث:\",\"Created:\":\"أنشأت:\",\"Email:\":\"البريد الإلكتروني:\",\"First name:\":\"الاسم الاول:\",\"Last name:\":\"الكنية:\",\"Phone:\":\"هاتف:\",\"Purchase details\":\"تفاصيل شراء\",\"Booked places\":\"الأماكن المحجوزة\",\"Ticket Name\":\"اسم التذكرة\",\"Slot\":\"فتحة\",\"Tickets quantity\":\"كمية التذاكر\",\"Referenced number\":\"الرقم المرجعي\",\"Purchased\":\"تم شراؤها\",\"Scanned\":\"ممسوح ضوئياً\",\"Send email\":\"ارسال بريد الكتروني\",\"Customer Phone\":\"هاتف العميل\",\"Full Name\":\"الاسم الكامل\",\"Event date\":\"تاريخ الحدث\",\"Attendance\":\"الحضور\",\"Partially Attended\":\"حضر جزئيا\",\"Purchase type\":\"نوع الشراء\",\"Export bookings\":\"حجوزات التصدير\",\"Edit booking\":\"تعديل الحجز\",\"Additional Quantity\":\"الكمية الإضافية\",\"Select ticket type:\":\"اختر نوع التذكرة:\",\"Branch Details\":\"تفاصيل الفرع\",\"Edit\":\"تعديل\",\"Minimum order sum\":\"مجموع الحد الادنى\",\"Branch name\":\"اسم الفرع\",\"Accept\":\"موافق\",\"Order state\":\"حالة الطلب\",\"Are you sure to reject order?\":\"هل انت متأكد من رفض الطلب؟\",\"Are you sure to approve order?\":\"هل انت متأكد من قبول الطلب؟\",\"Catering details\":\"تفاصيل الطلب\",\"Pickup details\":\"تفاصيل الطلب\",\"Pickup branch\":\"الفرع\",\"Transaction details\":\"تفاصيل عملية الدفع\",\"Order state has been changed successfully\":\"حالة الطلب تغيرت بنجاح\",\"Order time\":\"وقت الطلب\",\"Order satisfied\":\"تم تنفيذ الطلب\",\"Invalid QR Code\":\"هذا الكود غير صحيح\",\"Product Bulk Create\":\"انشاء حزمة منتجات\",\"QR code is valid. Access granted\":\"الكود صحيح. تم السماح.\",\"QR Code:\":\"رمز الاستجابة السريعة:\",\"Customer Name:\":\"إسم العميل:\",\"Slot:\":\"فتحة:\",\"Subject\":\"موضوع\",\"Support request\":\"طلب دعم\",\"Report period\":\"فترة التقرير\",\"Total transactions\":\"إجمالي المعاملات\",\"GMV\":\"GMV\",\"Overall Success Rate\":\"معدل النجاح العام\",\"Average Transaction size\":\"متوسط ​​حجم المعاملات\",\"Success Rate\":\"معدل النجاح\",\"Product Wise Sales\":\"مبيعات الحكمة المنتج\",\"Recent Orders\":\"الطلبيات الأخيرة\",\"Recent actions\":\"الإجراءات الأخيرة\",\"Password changed successfully\":\"تم تغيير كلمة المرور بنجاح\",\"Notify the customer via SMS that he has to pay an invoice. Builtin phone field has to be present on the form.\":\"إخطار العميل عبر الرسائل القصيرة بأنه يجب عليه دفع فاتورة. يجب أن يكون حقل الهاتف المدمج موجودًا في النموذج.\",\"Send orders notification to this user?\":\"ارسال تنبيه الطلبات لهذا المستخدم ؟\",\"You successfully subscribe for new order notifications\":\"لقد اشتركت بنجاح في تنبيهات الطلبات الجديدة\",\"You successfully unsubscribe from new order notifications\":\"تم الغاء اشتراكك بنجاح في تنبيهات الطلبات الجديدة\",\"Page not found\":\"لم يتم العثور على الصفحة\",\"Forgot Password\":\"نسيت كلمة المرور\",\"Back to login page\":\"العودة للصفحة الرئيسية\",\"Reset Password\":\"إعادة انشاء كلمة مرور\",\"New password\":\"كلمة المرور الجديدة\",\"Password confirmation\":\"تأكيد كلمة المرور\",\"Minimum order is {min_order_sum} {plugin_config.currency}. \":\"الحد الأدنى للطلب {min_order_sum} {plugin_config.currency}. \",\"Restaurant isn't working now. \":\"المطعم غير متاح حالياً. \",\"Add at least one item to your cart\":\"اضف على الأقل منتج واحد لسلة المشتريات\",\"Reference date\":\"تاريخ المرجع\",\"Name (FN LN)\":\"اسم (FN LN)\",\"Auth ID\":\"رقم الترخيص\",\"This payment transaction has no attempts.\":\"لا يوجد محاولات لعملية الدفع هذه.\",\"Customer payment page URL\":\"رابط صفحة دفع العميل\",\"Account locked: too many login attempts. Please try again after 2 minutes with correct username and password.\":\"الحساب مغلق: الكثير من محاولات تسجيل الدخول. يرجى المحاولة مرة أخرى بعد دقيقتين باستخدام اسم المستخدم وكلمة المرور الصحيحين.\",\"Please wait . . . . . . .\":\"الرجاء الانتظار . . . . . . .\",\"This might take a while\":\"هذا يمكن ان يأخذ بعض الوقت\",\"Thank you for your patience\":\"شكراً لإنتظارك\",\"We are still working on it\":\"ما زال نعمل عليها\",\"Credit card\":\"بطاقة الائتمان\",\"Ticket direct download link expired. Check your email and notify support if it isn't there\":\"رابط تحميل التذكرة انتهى. الرجاء التأكد من بريدك الالكتروني و في حالة عدم استلامها يرجى ابلاغ الدعم\",\"job's result expired (60 seconds)\":\"نتيجة الوظائف انتهت ( 60 ثانية )\",\"job was submitted, but exception occurred\":\"تم ارسال الوظيفة، لكن استثناء حدث\",\"the job doesn't exist anymore\":\"الوظيفة لم تعد متاحة\",\"Apparently some error occurred. Please check email and if ticket isn't sent there please notify the support\":\"من الظاهر ان هناك خطأ حدث. الرجاء التأكد من البريد الالكتروني و اذا لم تصلك التذكرة الرجاء ابلاغ الدعم\",\"The glorious ticket is waiting for you. We're just getting it ready...\":\"التذكرة في انتظارك. نحن فقط نستعد...\",\"Please wait for a while, we are generating your booking ticket.\":\"الرجاء الانتظار قليلاً حيث جاري اصدار تذكرة الحجز الخاصة بك.\",\"Pay\":\"إدفع\",\"Order datails\":\"تفاصيل الطلب\",\"Event Date:\":\"تاريخ الحدث:\",\"Not found.\":\"غير موجودة.\",\"Author\":\"مؤلف\",\"Link not found\":\"لم يتم العثور على الرابط\",\"Statistics\":\"إحصائيات\",\"Valid\":\"صالح\",\"Reference Number\":\"رقم مرجع\",\"Shortener Username\":\"اختصار اسم المستخدم\",\"Shortener Password\":\"اختصار كلمة السر\",\"Booking is not available\":\"الحجز غير متاح\",\"Product is not available now\":\"المنتج غير متوفر الآن\",\"You cannot order more than {max_enabled_value} QTY per order\":\"لا يمكنك طلب أكثر من {max_enabled_value} الكمية لكل طلب\",\"Use billing address for delivery\":\"استخدم عنوان الفواتير للتسليم\",\"minutes\":\"الدقائق\",\"seconds\":\"ثواني\",\"Generate QR code\":\"توليد رمز الاستجابة السريعة\",\"Store any kind of information related to the customer. It will be displayed on the payment related pages.\":\"تخزين أي نوع من المعلومات المتعلقة بالعميل. سيتم عرضه على الصفحات المتعلقة بالدفع.\",\"Stores\":\"مخازن\",\"Destination store\":\"متجر المقصد\",\"Deleted Transactions\":\"المعاملات المحذوفة\",\"Delivery address\":\"عنوان التسليم\",\"You cannot order more than {max_quantity} QTY per order\":\"لا يمكنك طلب أكثر من {max_quantity} الكمية لكل طلب\",\"Thank you! Payment Completed.\":\"شكرا لك! تم التسديد.\",\"Add your Address and your location on map\":\"اضف عنوانك و موقعك على الخريطة\",\"Building Type\":\"نوع المبنى\",\"Total generated\":\"إجمالي المرسل\",\"Total received\":\"إجمالي المحصل\",\"Net balance\":\"الفرق بين المرسل و المحصل\",\"close\":\"اغلاق\",\"Additional Note\":\"ملاحظات اضافية\",\"mins\":\"دقائق\",\"Enter email here\":\"ادخال بريدك الالكتروني\",\"Restaurant is currently closed. Kindly, check it soon.\":\"المطعم مغلق الآن, من فضلك قم بزيارتنا قريبا.\",\"Real Estate\":\"العقارات\",\"Real estate\":\"العقارات\",\"Manual Payment\":\"دفع يدوي\",\"Change Price\":\"تغيير سعر\",\"Advance Payment\":\"دفعة مقدمة\",\"Terminate Contract\":\"انهاء تعاقد\",\"Renew Contract\":\"تجديد تعاقد\",\"New Contract\":\"انشاء تعاقد\",\"Add Unit Type\":\"اضافة نوع وحدة\",\"Unit Type List\":\"الوحدات\",\"Unit Types\":\"الوحدات\",\"Add Tenant\":\"اضافة مستأجر\",\"Rent Management\":\"الفواتير\",\"Rent management\":\"الفواتير\",\"Properties\":\"المباني\",\"Tenant Management\":\"ادارة المستأجرين والعقود\",\"Tenant management\":\"ادارة المستأجرين والعقود\",\"Property Management\":\"ادارة المباني\",\"Property management\":\"ادارة المباني\",\"Unit Type\":\"نوع وحدة\",\"Advance Payment Request\":\"طلب دفعة مقدمة\",\"Terminate Contract Transaction\":\"انهاء تعاقد\",\"Edit Price\":\"تعديل سعر وحدة\",\"Edit Tenant\":\"تعديل بيانات مستأجر\",\"Add Property\":\"اضافة مبنى\",\"Edit Property\":\"تعديل بيانات مبنى\",\"Edit Unit Type\":\"تعديل بيانات نوع وحدة\",\"Edit Unit\":\"تعديل بيانات وحدة\",\"Renew Contract List\":\"قائمة عقود مجددة\",\"Renew contract list\":\"قائمة عقود مجددة\",\"OK\":\"موافق\",\"Rows Per Page\":\"عدد الصفوف بالصفحة\",\"KD\":\"دينار\",\"Id\":\"مسلسل\",\"Property Name\":\"اسم المبنى\",\"Tenant\":\"المستأجر\",\"Old Start Date\":\"تاريخ بدء التعاقد السابق\",\"Old End Date\":\"تاريخ نهاية التعاقد السابق\",\"Old Amount\":\"قيمة التعاقد السابق\",\"New Start Date\":\"تاريخ بدء التعاقد الحالي\",\"New End Date\":\"تاريخ نهاية التعاقد الحالي\",\"New Amount\":\"قيمة التعاقد الحالي\",\"All\":\"الكل\",\"Late\":\"متأخر\",\"Manual Payment List\":\"قائمة دفعات يدوية\",\"Manual payment list\":\"قائمة دفعات يدوية\",\"Unit Number\":\"رقم الوحدة\",\"Month\":\"الشهر\",\"Year\":\"السنة\",\"Tenant Name\":\"المستأجر\",\"Save\":\"حفظ\",\"Contract Id\":\"رقم التعاقد\",\"Start Date\":\"تاريخ بدء التعاقد\",\"End Date\":\"تاريخ نهاية التعاقد\",\"Leave Date\":\"تاريخ المغادرة\",\"Vacant\":\"فارغ\",\"Occupied\":\"غير فارغ\",\"Property\":\"المبنى\",\"Tenant History\":\"المستأجرين السابقين\",\"Edit Price List\":\"قائمة اسعار وحدات معدلة\",\"Edit Price list\":\"قائمة اسعار وحدات معدلة\",\"Current Unit Amount\":\"القيمة الحالية\",\"Current Unit Discount\":\"التخفيض الحالي\",\"Current Percentage/Fixed\":\"نسبة / ثابت\",\"Current Unit Net Amount\":\"صافي المبلغ الحالي\",\"New Unit Amount\":\"سعر الوحدة الجديد\",\"New Unit Discount\":\"تخفيض السعر الجديد\",\"New Percentage/Fixed\":\"نسبة / ثابت جديد\",\"New Unit Net Amount\":\"صافي المبلغ الجديد\",\"Please select a property to load units\":\" من فضلك اختر مبنى حتى يتم تحميل الوحدات\",\"Percentage\":\"نسبة\",\"Fixed\":\"ثابت\",\"Property name is required\":\"المبنى ,بيانات مطلوبة\",\"Unit number is required\":\"الوحدة بيانات مطلوبة\",\"New unit amount is required\":\"سعر الوحدة , بيانات مطلوبة\",\"Advance Payment List\":\"قائمة دفعات مقدمة\",\"KWD\":\"دينار\",\"Unit Name\":\"الوحدة\",\"Please select a property\":\"من فضلك اختر مبني\",\"Please select a unit\":\"من فضلك اختر وحدة\",\"Property Name is required\":\"المبنى , بيانات مطلوبة\",\"Unit is required\":\"الوحدة , بيانات مطلوبة\",\"Tenant Name is required\":\"المستأجر بيانات مطلوبة\",\"Unit Type Name\":\"نوع الوحدة\",\"Unit Type Description\":\"وصف نوع الوحدة\",\"Commercial\":\"تجاري\",\"Action\":\"وظائف\",\"Is Commercial\":\"تجاري\",\"Is Residential\":\"سكني\",\"Both Commercial and Residential\":\"تجاري وسكني\",\"Add New Unit Type\":\"اضافة نوع وحدة جديد\",\"Close\":\"اغلاق\",\"Reset\":\"اعادة تعيين\",\"Export Unit Type\":\"تصدير نوع الوحدات\",\"Something went wrong while fetching results\":\"خطاء اثناء تحميل البيانات\",\"Unit Type Name (EN)\":\"نوع الوحدة(انجليزي)\",\"Unit Type Name (AR)\":\"نوع الوحدة(عربي)\",\"Contract Number\":\"رقم العاقد\",\"Late Payments\":\"دفعات متأخرة\",\"Property name\":\"المبنى\",\"Load More\":\"تحميل المزيد\",\"Tenant Name (EN)\":\"اسم المستأجر(انجليزي)\",\"Tenant Name (AR)\":\"اسم المستأجر(عربي)\",\"Civil ID Number\":\"الرقم المدني\",\"Upload Civil ID (Front)\":\"تحميل البطاقة المدنية(امامي)\",\"Upload\":\"تحميل\",\"Upload Civil ID (Back)\":\"تحميل البطاقة المدنية (خلفي)\",\"Passport Number\":\"رقم جواز السفر\",\"Upload Passport\":\"تحميل جواز السفر\",\"Nationality\":\"الجنسية\",\"Email Address\":\"البريد الالكتروني\",\"Generate New Payment Link\":\"انشاء رابط دفع جديد\",\"Total Paid\":\"اجمالي المدفوع\",\"Pending Payments\":\"الدفعات الغير مسددة\",\"Payment Status\":\"حالة الدفع\",\"Rent Amount\":\"المبلغ\",\"Total Paid This Month\":\"اجمالي المدفوع\",\"Unit Description\":\"وصف الوحدة\",\"Total Units\":\"عدد الوحدات\",\"Rented Units\":\"وحدات غير فارغة\",\"Vacant Units\":\"وحدات فارغة\",\"Is Cash Payment Allowed\":\"مسموح الدفع اليدوي\",\"Rent\":\"Rent\",\"Lease\":\"Lease\",\"Buy\":\"Buy\",\"Property Details\":\"تفاصيل المبنى\",\"Unit Property Name (EN)\":\"اسم المبنى(انجليزي)\",\"Unit Property Name (AR)\":\"اسم المبنى (عربي)\",\"Allow cash payment\":\"سماحية الدفع اليدوي\",\"Add Unit Type With Units\":\"اضافة نوع وحدة ووحداتها\",\"Termination Date\":\"تاريخ انهاء التعاقد\",\"Terminate Contract List\":\"قائمة عقود منتهية\",\"Terminate contract list\":\"قائمة عقود منتهية\",\"Old Contract Start Date\":\"تاريخ بداية التعاقد السابق\",\"Old Contract End Date\":\"تاريخ نهاية التعاقد السابق\",\"Terminate Date\":\"تاريخ نهاية التعاقد\",\"Actual Leave Date\":\"تاريخ المغادرة الفعلي\",\"Leave Notice Date\":\"تاريخ الاخطار\",\"Contract start date is required\":\"تاريخ بداية التعاقد, بيانات مطلوبة\",\"Contract end date is require\":\"تاريخ نهاية التعاقد, بيانات مطلوبة\",\"Termination date is required\":\"تاريخ انهاء التعاقد, بيانات مطلوبة\",\"Actual leave date is required\":\"تاريخ المغادرة الفعلي, بيانات مطلوبة\",\"Leave notice date is required\":\"تاريخ الاخطار , بيانات مطلوبة\",\"Old Contract Amount\":\"مبلغ التعاقد السابق\",\"New Contract Start Date\":\"تاريخ بداية التعاقد الجديد\",\"New Contract End Date\":\"تاريخ نهاية التعاقد الجديد\",\"New Contract Amount\":\"مبلغ التعاقد الجديد\",\"Edit Ppice\":\"تعديل سعر\",\"Contract end date is required\":\"تاريخ نهاية التعاقد السابق, بيانات مطلوبة\",\"New contract start date is required\":\"تاريخ بداية التعاقد الجديد, بيانات مطلوبة\",\"New contract end date is required\":\"تاريخ نهاية التعاقد الجديد, بيانات مطلوبة \",\"Contract Start Date\":\"تاريخ بداية التعاقد\",\"Payment Start Date\":\"تاريخ بداية الدفع\",\"Contract End Date\":\"تاريخ نهاية التعاقد\",\"New Contract List\":\"قائمة العقود الجديدة\",\"New contract list\":\"قائمة العقود الجديدة\",\"Created Date(From)\":\"تاريخ انشاء,من\",\"Created Date(To)\":\"تاريخ انشاء ,الى\",\"Start Date(From)\":\"تاريخ بداية التعاقد, من\",\"Start Date(To)\":\"تاريخ بداية التعاقد, الى\",\"End Date(From)\":\"تاريخ نهاية التعاقد, من\",\"End Date(To)\":\"تاريخ نهاية التعاقد, الى\",\"Terminate date (From)\":\"تاريخ انهاء التعاقد, من\",\"Terminate date (To)\":\"تاريخ انهاء التعاقد , الى\",\"Invoice Amount\":\"المبلغ\",\"Units of Type\":\"وحدات من نوع\",\"Add Or Edit Units\":\"اضافة او تعديل وحدات\",\"Edit Units\":\"تعديل وحدات\",\"How many units would you like to add ?\":\"كم عدد الوحدات التي ترغب باضافتها؟\",\"Save and Return\":\"حفظ والرجوع للصفحة الرئيسية\",\"Kindly, enter both the price and the count of added records.\":\"من فضلك, ادخل كلا من السعر وعدد الوحدات المضافة\",\"Applied successfully\":\"تم التطبيق بنجاح\",\"Created successfully\":\"تم الأنشاء بنجاح\",\"Payment start date is required\":\"تاريخ بداية الدفع بيانات مطلوبة\",\"Tenant name is Required\":\"المستأجر(انجليزي) , بيانات مطلوبة\",\"Tenant name(AR) is required\":\"المستأجر(عربي), بيانات مطلوبة\",\"Tenant civil id is required\":\"الرقم المدني للمستأجر, بيانات مطلوبة\",\"Tenant nationality is required\":\"جنسية المستأجر, بيانات مطلوبة\",\"Unit Type Name can not be empty\":\"نوع الوحدة(انجليزي) , بيانات مطلوبة\",\"Unit Type Name(AR) can not be empty\":\"نوع الوحدة(عربي), بيانات مطلوبة\",\"Unit Type Description can not be empty\":\"وصف نوع الوحدة, بيانات مطلوبة\",\"Action listings\":\"قوائم المراجعة\",\"Current Percentage / Fixed\":\"نسبة / ثابت حالي\",\"New Percentage / Fixed\":\"نسبة / ثابت جديد\",\"Old contract start date (From)\":\"تاريخ بدء التعاقد السابق(من)\",\"Old contract start date (To)\":\"تاريخ بدء التعاقد السابق(الى)\",\"Old contract end date (From)\":\"تاريخ نهاية التعاقد السابق(من)\",\"Old contract end date (To)\":\"تاريخ نهاية التعاقد السابق(الى)\",\"New contract start date (From)\":\"تاريخ بدء التعاقد الجديد(من)\",\"New contract start date (To)\":\"تاريخ بدء التعاقد الجديد(الى)\",\"New contract end date (From)\":\"تاريخ نهاية التعاقد الجديد(من)\",\"New contract end date (To)\":\"تاريخ نهاية التعاقد الجديد(الى)\",\"Contract New Start Date\":\"تاريخ بداية التعاقد الجديد\",\"Contract New End Date\":\"تاريخ نهاية التعاقد الجديد\",\"Paid Months/Year\":\"المدفوع\",\"User\":\"المستخدم\",\"Change password\":\"تغيير كلمة المرور\",\"Bulk Uploads\":\"Bulk Uploads\",\"Bulk Details\":\"Bulk Details\",\"Bulk Dispatch logs\":\"Bulk Dispatch logs\",\"Bulk Transaction logs\":\"Bulk Transaction logs\",\"Catalogue Payment\":\"Catalogue Payment\",\"Food ordering\":\"Food ordering\",\"Payment Restriction\":\"Payment Restriction\",\"Property Detail\":\"Property Detail\",\"Configuration\":\"اعدادات\",\"Shortly Expired Contracts\":\"عقود شارفت على الانتهاء\",\"Advanced Settings\":\"اعدادات متقدمة\",\"Plugin Configuration\":\"اعدادات\",\"Gateway Name\":\"بوابة الدفع\",\"International Air Transport Association\":\"...\",\"English\":\"English\",\"State Changed At\":\"State Changed At\",\"Select fields\":\"أختر الحقول\",\"Capture in full\":\"Capture in full\",\"Void in full\":\"Void in full\",\"Refund in full\":\"Refund in full\",\"Acknowledge\":\"Acknowledge\",\"Make PG inquiry\":\"Make PG inquiry\",\"Disclose to merchant\":\"Disclose to merchant\",\"Is Amount Editable\":\"Is Amount Editable\",\"undefined Amount\":\"undefined Amount\",\"undefineded Successfully\":\"undefineded Successfully\",\"Disclosed To Merchant\":\"Disclosed To Merchant\",\"Reason to cancel order\":\"Reason to cancel order\",\"Costumer Phone\":\"رقم تلفون العميل\",\"Cancellation Reason\":\"سبب الالغاء\",\"Last State\":\"Last State\",\"Contract\":\"العقد\",\"CONTRACT\":\"العقد\",\"Contract Eed Date\":\"تاريخ انتهاء العقد\",\"Contracts expire within\":\"العقود ستنتهي خلال\",\"Kindly, select a date which is greater than or equal to actual leave date and leave notice date.\":\"من فضلك , اختر تاريخ اكبر من تاريخ المغادرة او تاريخ اشعار المغادرة\",\"Kindly, select a date which is greater than or equal to leave notice date.\":\"من فضلك اختر تاريخ اكبر من او يساوي تاريخ اشعار المغادرة\",\"There is a pending amount that should be paid, are you sure that you want to continue.\":\"يوجد ايجارات لم يتم تحصيلها بعد, هل انت متأكد من الاستمرار\",\"Kindly, select a date which is greater than the old contract end dat\":\"من فضلك اختر تاريخ اكبر من تاريخ انتهاء التعاقد السابق\",\"New unit net amount is required\":\"قيمة التعاقد الجديدة, بيانات مطلوبة\",\"Kindly, select a date which is greater than the old contract end date\":\"من فضلك اختر تاريخ اكبر من تاريخ انتهاء التعاقد السابق\",\"Required\":\"مطلوب\",\"Hide email\":\"يخفي ايميل\",\"Individual proxy fields\":\"مجال الوكيل الفردي\",\"Day of the month to generate payment links\":\"اليوم لانشاء رابط الدفعات\",\"The Day of month to genarate payment links field is required\":\"مطلوب اليوم لانشاء رابط الدفعات\",\"The Day of the month to suspend accessing payment links field is required\":\"مطلوب اليوم لتعليق الوصول إلى روابط الدفع\",\"Day of the month to suspend accessing payment links\":\"اليوم لتعليق الوصول إلى روابط الدفع\",\"Default email is not valid\":\"ايميل الافتراضي غير صحيحة\",\"Fields\":\"خانات\",\"Validator\":\"مصحح\",\"Custom detail field\":\"خانة تفاصيل مخصصة\",\"Itinerary display\":\"اظهار مسار الرحلة\",\"Label(EN)\":\"(EN) الاسم \",\"Label(AR)\":\"الاسم العربي\",\"Label(Ar)\":\"الاسم العربي\",\"Main listings\":\"القوائم الرئيسية\",\"Married?\":\"متزوج\",\"No data available\":\"لا يوجد بيانات متاحة\",\"Field Type\":\"نوع الحقل\",\"The price value is not valid\":\"المبلغ قيمة خاطئة\",\"The discount value is not valid\":\"التخفيض قيمة خاطئة\",\"The property_name field is required\":\"العقار , بيانات مطلوبة\",\"The unit_number field is required\":\"رقم الوحدة , بيانات مطلوبة\",\"Spouse nationality is required\":\"جنسية الزوجة , بيانات مطلوبة\",\"Spouse civil id is required\":\"البطاقة المدنية للزوجة , بيانات مطلوبة\",\"Kindly, enter a contract leave date which is greater than the contract start date\":\"ادخل تاريخ مغادرة اكبر من تاريخ بدء التعاقد\",\"New unit discount is required\":\"قيمة التخفيض الجديدة , بيانات مطلوبة\",\"The discount field is required\":\"بيانات التخفيض, بيانات مطلوبة\",\"The discount field must be numeric and may contain 3 decimal points\":\"التخفيض يجب ان يكون رقم\",\"New unit amount may only contain numeric characters\":\"قيمة الوحدة يجب ان تكون رقم\",\"New unit discount may only contain numeric characters\":\"قيمة التخفيض الجديدة يجب ان تكون ارقام\",\"Activation Month\":\"شهر التفعيل\",\"Kindly, enter a contract notice date which is greater than the contract start date\":\"ادخل تاريخ اخطار اكبر من تاريخ التعاقد\",\"Activation Year\":\"سنة التفعيل\",\"Activation year is required\":\"سنة التفعيل, بيانات مطلوبة\",\"Activation month is required\":\"شهر التفعيل, بيانات مطلوبة\",\"Is Activated\":\"مفعل\",\"Tenant name is required\":\"المستأجر ,بيانات مطلوبة\",\"Payment month is required\":\"شهر السداد, بيانات مطلوبة\",\"Payment year is required\":\"سنة السداد , بيانات مطلوبة\",\"Kindly, select a date which is greater than the contract start date.\":\"اختر تاريخ اكبر من تاريخ بدء التعاقد\",\"Kindly, select a date which is greater than or equal to contract start date.\":\"اختر تاريخ اكبر من او يساوي تاريخ بدء التعاقد\",\"Unit Type is required\":\"نوع الوحدة بيانات مطلوبة\",\"Kindly, select unit type\":\"أختر نوع الوحدة\",\"Discount type is required\":\"نوع التخفيض, بيانات مطلوبة\",\"ACTION\":\"الاحداث\",\"Ok\":\"موافق\",\"ok\":\"موافق\",\"real-estate\":\"ادارة العقارات\",\"Pg Codes\":\"بوابات الدفع\",\"Kindly, enter a contract end date which is greater than the contract start date\":\"اختر تاريخ نهاية تعاقد, اكبر من تاريخ بداية التعاقد\",\"Kindly, enter a contract payment start date which is greater than the contract start date\":\"اختر تاريخ بدء السداد اكبر من او يساوي تاريخ بدء التعاقد\",\"Kindly, enter a contract end date which is greater than the contract start date and payment start date\":\"اختر تاريخ نهاية التعاقد اكبر من تاريخ بدء التعاقد\",\"Please enter decimal value upto 2 points\":\"ادخل عدد عشري من رقمين\",\"Please enter decimal value upto 3 points\":\"ادخل عدد عشري من ثلاث ارقام\",\"Day of the month to generate links must be greater than day of the month to suspend payment links\":\"اليوم المحدد لانشاء الدفعات الشهرية يجب ان يكون اكبر من يوم وقف رابط الدفعات الشهرية\",\"Kindly, select a date which is greater than the contract start date\":\"من فضلك , اختر تاريخ اكبر من تاريخ التعاقد\",\"New unit net amount may only contain positive decimal number\":\"قيمة المبلغ الصافي يجب ان تحتوي على ارقام موجبة\",\"Add new field\":\"اضف حقل جديد\",\"Delete Field\":\"حذف حقل\",\"Designates if this field is required\":\"هل الحقل مطلوب\",\"Designates if this object is active, can be used and displayed on site.\":\"فعال ويظهر في الموقع\",\"Designates if the field represents customer details related data.\":\"يمثل بيانات عميل\",\"Designate if this field shall appear in the itinerary table list at the invoice pdf.\":\"يظهر في الفاتورة\",\"Confirmation\":\"موافقة\",\"Is Manual\":\"يدوي\",\"Is Late Payment\":\"دفعه متأخرة\",\"The address field is required\":\"حقل العنوان هذا مطلوب\",\"SHOW\":\"اظهار\",\"HIDE\":\"اخفاء\",\"Are you sure that you want to make a new contract?\":\"هل انت متأكد من انشاء تعاقد جديد؟\",\"Are you sure that you want to do this manual transaction?\":\"هل انت متأكد من الدفع يدويا؟\",\"Are you sure that you want to renew contract?\":\"هل انت متأكد من تجديد التعاقد؟\",\"Are you sure that you want to terminate this contract?\":\"هل انت متأكد من انهاء التعاقد\",\"Kindly, insert unit type with their units\":\"من فضلك, اختر نوع وحدة مع ادخال الوحدات التابعة لها\",\"Kindly, insert at least one unit type with their units\":\"من فضلك اختر نوع وحدة مع ادخال الوحدات التابعة لها\",\"The Day of month to genarate payment links must be between\":\"يوم انشاء الدفعات الشهرية يجب ان يكون بين يوم {minValue}, {maxValue}\",\"The Day of the month to suspend accessing payment links must be 31 or less\":\"يوم وقف الدفع يجب ان يكون 31 او اقل\",\"Coupon Code\":\"كود الكوبون\",\"Net\":\"الصافي\",\"Product Discount\":\"تخفيض المنتج\",\"Print Order\":\"Print Order\",\"all\":\"all\",\"Apply\":\"تطبيق\",\"Are you sure to clear cart\":\"هل انت متأكد من تفريغ العربة\",\"No add ons specified\":\"لم يتم اختيار اضافات\",\"Coupon Discount\":\"تخفيض الكوبون\",\"Coupon Amount\":\"تخفيض الكوبون\",\"No options specified\":\"لم يتم اضافة اختيارات\",\"Generated Reports\":\"تقارير منشاة\",\"Exported by\":\"تم التصدير بواسطة\",\"Available until\":\"متاح الى يوم\",\"Size\":\"حجم الملف\",\"Records\":\"عدد السجلات\",\"Format\":\"الامتداد\",\"Module\":\"اسم الملف\",\"Export Date\":\"تاريخ التصدير\",\"Export Properties\":\"تصدير البيانات\",\"Export Rent Details\":\"تصدير البيانات\",\"Monthly paid amount cannot be greater than the original contract amount\":\"لا يمكن أن يكون المبلغ المدفوع شهريا اكبر من المبلغ الاصلي للعقد\",\"Original Contract Amount\":\"قيمة العقد الاصلية\",\"Original Amount is Required\":\"القيمة الاصلية للعقد بيانات مطلوبة\",\"Insurance Amount\":\"قيمة التأمين\",\"Contract Reference\":\"المرجع\",\"Contract Ref\":\"المرجع\",\"Payment Date is required\":\"تاريخ الدفع مطلوب\",\"Both suspended and resumed\":\"موقوف و مستمر\",\"Suspended\":\"موقوف\",\"Upload Contract\":\"تحميل العقد\",\"New Original Contract Amount\":\"قيمة العقد الاصلية الجديدة\",\"Old Original Contract Amount\":\"قيمة العقد الاصلية القديمة\",\"Contract original amount is a required field\":\"قالقيمة الاصلية للعقد بيانات مطلوبة\",\"New original contract amount is required\":\" قيمة العقد الاصلية الجديدةبيانات مطلوبة\",\"file uploaded successfully\":\" تم التحميل بنجاح\",\"No contract find against this unit\":\"لا يوجد عقد فعال على هذه الوحدة\",\"Receipt Voucher Reference\":\"مرجع سند الاستلام\",\"The voucher_reference field may only contain alpha-numeric characters\":\"يجب ان يكون المرجع مكون من حروف وارقام\",\"Upload Logo\":\"تحميل لوجو الوصل الدفع\",\"Upload Signature\":\"تحميل التوقيع لوصل الدفع\",\"Suspended Contract\":\"وقف التعاقد\",\"Suspend Contract\":\"وقف التعاقد\",\"Modify Contract\":\"تعديل قيمة العقد\",\"Modified Contract\":\"قيمة عقد معدلة\",\"Modified Contract List\":\"قائمة عقد معدلة\",\"Resume Contract\":\"استمرار التعاقد\",\"Is Suspended\":\"موقوف\",\"Is Resumed\":\"مستمر\",\"Payment Reminder\":\" تذكير بالدفع\",\"Suspended Contracts\":\"العقود الموقوفة\",\"Modified Contracts\":\"العقود المعدلة قيتمها\",\"Suspended/Resumed\":\"موقوف/مستمر\",\"Resumed\":\"مستمر\",\"Suspended Contract List\":\"العقود الموقوفة\",\"Phone number is required\":\"رقم التلفون بيانات مطلوبة\",\"The email field is required\":\"البريد الالتكروني بيانات مطلوبة\",\"The civil_id_number length must be 12\":\"الرقم المدني يجب ان يكون 12 رقم\",\"The spouse.civil_id_number length must be 12\":\"الرقم المدني للزوجة يجب ان يكون 12 رقم\",\"Upload Mariage Certificate\":\"تحميل وثيقة الزواج\",\"Before Modified Amount\":\"القيمة المدفوعة سابقا\",\"After Modified Amount\":\"القيمة المدفوعة حاليا\",\"Modify Payment\":\"تعديل قيمة القعد\",\"Current Paid Amount\":\"القيمة المدفوعة حاليا\",\"New Paid Amount\":\"القيمة المدفوعة الجديدة\",\"Contract status\":\"حالة التعاقد\",\"Termination date\":\"تاريخ انتهاء العقد\",\"Upload Attachement\":\"تحميل العقد\",\"Contract has been suspended\":\"تم ايقاف العقد بنجاح\",\"Contract has been resumed\":\"تم استمرار العقد بنجاج\",\"Image have been downloaded successfully\":\"تم تحميل الصورة بنجاح\",\"You cannot suspend this contract as it is with the status\":\"لا يمكن وقف التعاقد , حيث انه بحالة {status}\",\"Customer has been notified\":\"تم اشعار المستأجر بنجاح\",\"Your report is ready. You can download it from generated reports section\":\"تم انشاءالتقرير بنجاح يمكنك تحميل من التقارير المنشأه\",\"Reference number for the receipt voucher is required when performing manual payment\":\"رقم المرجع ,بيانات مطلوبة\",\"Print\":\"طباعة\",\"Download your generated PDF\":\"تحميل الملف\",\"unit\":\"وحدة\",\"Reports are being generated\":\"التقرير تحت الانشاء\",\"Download your generated Report\":\"تم اشعار العميل\",\"Generate Invoices\":\"معالجة الفواتير\",\"Generate Invoices and Send Payment Links\":\"انشاء الفواتير وارسال الاشعارات\",\"Show\":\"عرض\",\"Not Generated Payments\":\"الفواتير غير المنشأة\",\"Generated Payments\":\"الفواتير المنشأة\",\"Contract No.\":\"رقم تعاقد\",\"Last Month Paid\":\"اخر شهر مدفوع\",\"Original AMT\":\"القمة الاصلية\",\"Paid AMT\":\"القيمة الدفوعة\",\"Actual Paid AMT\":\"القيمة الفعلية\",\"Civil ID\":\"المدني الرقم\",\"Count\":\"العدد\",\"Totals\":\"الاجمالي\",\"Actual Paid Amount\":\"القيمة الفعلية\",\"Manual payment records will be reset. Are you sure you want to continue\":\"سوف يتم اعادة تعيين البيانات المعروضة, هل انت متأكد من الاستمرار\",\"Request failed with status code\":\"\",\"error:: Selected generating date is not in between activation date and current generate date\":\"الشهر المختار ليس من بين شهر تفعيل النظام  وشهر انشاء الفواتير\",\"Actual paid amount should be less than or equal to the original amount\":\"يجب ان يكون القيمة الفعلية  اصغر من او تساوي القيمة الاصلية\",\"Your request is in progress\":\"الطلب تحت المعالجة\",\"Number of days of stopping the generation worker before the expiration day\":\"عدد ايام وقف انشاء الفواتير قبل يوم انتهاء صلاحية روابط الدفع\",\"Manual generating payment records\":\"انشاء القواتير يدويا\",\"Contract Rollback\":\"تراجع عقد جديد\",\"Renew Contract Rollback\":\"تراجع تجديد تعاقد\",\"Manual Payment Roll back\":\"تراجع دفع يدوي\",\"Terminate Contract Rollback\":\"تراجع انهاء تعاقد\",\"All the previous contracts should be terminated before making a new contract\":\"يجب انهاء كل التعاقدات على هذه الوحدة قبل انشاء تعاقد جديد\",\"Manual Generating Payments\":\"انشاء الدفعات يدوياً\",\"Contract, payment records are going to be deleted , are you sure you want to continue\":\"سوف يتم حذف التعاقد وفواتير الدفع, هل انت متأكد من الاستمرار\",\"Loading..\":\"تحميل\",\"Are you sure that you want to roll back the manual payment?\":\"هل أنت متأكد من الغاء الدفع اليدوي\",\"Easily Generate Invoices by selecting the date of the desired period\":\"يمكنك إنشاء الفواتير بسهولة عن طريق تحديد تاريخ الفترة المطلوبة\",\"Are you sure that you want to roll back the contract termination\":\"هل انت متأكد من الغاء انهاء التعاقد?\",\"Worker\":\"وظيفة\",\"Release Manually Generating Lock\":\"تحرير خدمة انشاء الفواتير اليدوية\",\"Generate Payments\":\"انشاء دفعات\",\"Are you sure that you want to generate the invoices\":\"هل انت متأكد من انشاء الفواتير؟\",\"Invoice List\":\"الفواتير\",\"Loading...\":\"تحميل\",\"Historical\":\"تاريخي\",\"Running\":\"فعال\",\"More Details\":\"تفاصيل\",\"Invoices\":\"الفواتير\",\"IS PAID\":\"مدفوع\",\"Is Paid\":\"مدفوع\",\"RECEIPT NO\":\"رقم الوصل\",\"Main Listing\":\"القائمة الرئيسية\",\"REMAINING INVOICE COUNT\":\"عدد الفواتير المتبقية\",\"REMAINING INVOICE AMOUNT\":\"اجمالي الفواتير المتبقية\",\"INVOICE PAID COUNT\":\"عدد الفواتير المدفوعة\",\"INVOICE PAID AMOUNT\":\"اجمالي الفواتير المدفوعة\",\"INVOICE NOT PAID COUNT\":\"عدد الفواتير الغير مدفوعة\",\"INVOICE NOT PAID AMOUNT\":\"اجمالي الفواتير الغير مدفوعة\",\"OB PAID COUNT\":\"عدد رصيد افتتاحي مدفوع\",\"OB PAID AMOUNT\":\"اجمالي رصيد افتتاحي مدفوع\",\"OB NOT PAID COUNT\":\"عدد رصيد افتتاحي غير مدفوع\",\"OB NOT PAID AMOUNT\":\"مبلغ رصيد افتتاحي غير مدفوع\",\"Expand\":\"اظهار الكل\",\"Late Payment\":\"اجمالي متأخر\",\"Paid Count\":\"عدد مدفوع\",\"Pending Count\":\"عدد متبقي\",\"Total Count\":\"عدد اجمالي\",\"Are you sure that you want to send reminder notifications\":\"هل أنت متأكد من ارسال تنبيهات للايجارات الغير مدفوعة\",\"Notify Payments\":\"تنبيه الدفعات المتأخرة\",\"Civil Id\":\"الرقم المدني\",\"Voucher Number\":\"رقم الايصال\",\"Is Missed\":\"مفقود\",\"Is Open Balance\":\"رصيد افتتاحي\",\"Grace Period Amount\":\"اجمالي مجاني\",\"Missed Invoices Amount\":\"اجمالي فواتير مفقوده\",\"Contract Invoices\":\"الفواتير\",\"Sms Reminder\":\"تذكير برسالة نصية\",\"Email Reminder\":\"تذكير ببريد الكتروني\",\"Display Section\":\"اظهار التفاصيل\",\"Payment Month\":\"شهر الدفع\",\"Payment Year\":\"سنة الدفع\",\"Receipt Voucher\":\"سند قبض\",\"Total Paid Count\":\"عدد مدفوع\",\"Total Pending Count\":\"عدد موقوف\",\"(Grace, Open, Missed) Amount\":\"اجمالي مجاني وافتتاحي ومفقود\",\"Not Paid/Is Suspended\":\"غير مدفوع / موقوف\",\"Normal\":\"عادي\",\"Missed\":\"مفقود\",\"Open Balance\":\"افتتاحي\",\"Grace Period\":\"مجاني\",\"Generate Open Balance Invoices\":\"انشاء فواتير الارصدة الافتتاحية والمفقودة\",\"Release Manually generating Lock\":\"تحرير وظيفة انشاء الفواتير يدويا\",\"Express Search\":\"بحث سريع\",\"Download Link\":\"رابط التحميل\"}");

/***/ }),

/***/ "./src/translations/en.json":
/*!**********************************!*\
  !*** ./src/translations/en.json ***!
  \**********************************/
/*! exports provided: Details, Bulk, Transactions, Deleted Paid Transactions, Table Headers, Events, Bookings, Create Bookings, Fullfilment, E-commerce, Session, Fulfillment, Create payment request, Customer Payment, Dashboard, All transactions, Help/Support, Provider, Sender, This field is required., Username, Password, United, GIC, Customer notified., Reference Prefix, E-Commerce, Payment request, Bulk payment request, Catalogue purchase, Customer payment, Shopify, Event, Communication error between KNPay and gateway. Please report this issue to KNPay administrator., Catalogue, Notification, Units, Void, Specify at least one email recipient, Name to be displayed in dashboard, Logo, Logo to be displayed in dashboard, Merchant Website URL, Merchant Email, Merchant Phone, Define list of email recipients, Common, Type, Name, Order, Transaction report field, Transaction report fields, Emails, We're sorry, but we don't accept payments for the moment., Code, Currency, Currencies, Fix fee, Percent fee, Local, Used only for informational purposes, Default currency, From, To, Rate, Support Request, Suggestion, Feedback, Gateway, Please verify your bank statement before retrying the payment., Cash on Delivery, Sale, Transaction type, Call centre, Yes, No, Prepaid, Postpaid, Merchant Name, Product Category, Product Name, Previous Customer, Shipping Method, Number Of Items Sold, Name of Country, Hours Till Departure, PIN Code, Gateways, Select gateway, Settings, Billing address, Home, Arabic, Result, Track Id, Post Date, Transaction ID, Payment ID, Auth Code, Reference ID, Decision, Message, Receipt No, Transaction No, You are not having permission to delete paid transactions., Successfully deleted %(count)d %(items)s., Successfully restored %(count)d %(items)s., Payment, Created, Pending, Attempted, Authorized, Paid, Failed, Canceled, Expired, Invalid, Refunded, Refund Queued, Refund Rejected, State, Gateway code, Amount, Due Amount, Delivery Fee, Editable amount, Allow customer to edit amount, Language, Currency Code, Merchant order no, Bulk identifier., Customer first name, Customer last name, Customer email, Customer phone, Customer additional phone, Customer address line 1, Customer address line 2, Customer address city, Customer address state, Customer address country, Customer address postal code, Vendor name, Due date, Email Recipients, Comma separated email recipients which will receive customer emails., Product Type, Attachment, Attachment to be sent when notifying a customer for payment., Extra, Reference number, Expiration time, If defined, transaction created after the defined period of time, will be invalidated/expired if customer tries to pay them., Email Seen at, Seen at, initiator, Payment transaction, Payment transactions, Paid Amount, Original Amount, Payment Date, Cancel, Expire, Deleted Paid payment transaction, Deleted Paid payment transactions, Can restore deleted payment transactions, Can delete paid payment transactions, Success, Error, Gateway Settings, Fee, Total, This field is required, Sending SMS requires Phone field to be filled., A valid number is required., Terms, Preparing, Dispatching, Scheduling, Paused, Dispatched, Partial dispatched, Status, Start time, End time, Pause time, Total pause duration, Payment transaction ID, Resume, Invalid file., Invalid or missing values in some of rows, Dispatching process started., Bulk scheduled., Bulk pausing process started., Bulk is locked. Another operation is ongoing at the moment. Try again in few moments., Bulk is already paused., Error. Report to admins., Dispatching process resumed., Bulk canceling process started., Bulk is already canceled., Labels, Weekday, Weekdays, Delivery Duration, Delivery Durations, Stock, Communication, Shipping details, Payment Transaction, Pickup, Delivery, Catalogue URL, Delivery country, Show delivery date input, Image, Product Image, Product Images, Duration, Working hours, Week days, E-mail, Phone, Address, Work days, Select work days, Active, Product, Service, Description, Price before discount, Price, Display stock, Display the available stock on the website, Max Quantity, Define max quantity purchase per order, Total Sold, Start date, Start of the sell date, End date, End of the sell date, Helpline Number/ Inquiry number about the product, Model number, Departments, Products, Product name, Quantity, Fulfilled, Order number, Destination department, Customer name, Address line 1, Address line 2, Address city, Delivery date, Shipping type, Preferred delivery time, Preferred delivery date, Is restored, Orders, Work hour, Work hours, Delivery charges, {product.name} is not available now, Can view owned customer payments, Can view group customer payments, ECommerce, Sender does not exist, E-Commerce Config, Can view e-commerce payments, Can delete e-commerce payments, Can restore e-commerce payments, Pending Payment, Date/Time, Event name, Header title, Event list page header, Displayed fields, Can restore event payments, Venue name, Feedback URL, Tickets available from, Tickets available till, Rules, Event types, Event category, Event categories, Event Image, Event Images, Ticket name, Ticket Quantity, Event start time, Event end time, Max Tickets, Min Quantity, Event ticket detail, Event ticket details, Booking number, First name, Last name, Phone number, Email, Booking person information, Used to store Booking user extra information, Event Date, Booking status, Is Welcome email sent?, Booking, Attended, Not Attended, Unit price, Tickets PDF URL, Booking item, Booking items, Confirmed, Booking Item, Encrypted number, Is QR scanned?, Booking Extra Information, Event feedback, Comment, Registration information, Used to store Registration information of user, Event Registration, Event Registrations, Invalid Ticket selection., There is no ticket for this date, You can not purchase more than %s tickets in single purchase, You have to purchase at least %s tickets, You have already purchased ticket with this email., You cannot buy tickets for passed dates, You can not book more than available tickets for selected date, Sorry, there are no more available tickets, You can't buy more than %s tickets, You can't downgrade ticket price, You can't cancel past booking, Invalid QR code, Booking with such booking number doesn't exists, Booking is not paid, Ticket is booked for another event, Ticket is already scanned, Ticket is booked for another date, Ticket not found, Civil ID already used twice for this day., Created at, Invalid Event, Invalid Url, Email send successfully, Branch not found, Delivery area not found, Call centre phone number, Working hours during week, Approximate delivery time, Can view order details, Can view delivery areas, Can view food_order payments, Can delete food_order payments, Can restore food_order payments, Minimum order order sum, Minimum number of plates, Branches, Branch, Branch QR Code, Delivery zone, Delivery area, Delivery area QR Code, Category Name, Service charges, Product category, Product categories, Product price, AddOn Name, Add on, Add ons, Product description, Add ons to this product, Min, Max, Options, Options of product, Product option header, Is default choice?, Promoted product, Special instructions, House, Apartment, Office, Cash on delivery, Accepted, Cooking in progress, Ready for pickup, Delivery in progress, Arrived, Payment type, Delivery Area, Order extra details, Used to store user information, Catering delivery time, Order QR Code, Governorate name, Includes all products?, Included Products, Excluded Products, Included Categories, Excluded Categories, Condition, Conditions, Product not found, Pickup field, Delivery field, Voucher title, code, Free delivery, Discount type, Minimum order amount, Voucher, Vouchers, Specify discount amount, Specify either free delivery option or discount for this voucher, Minimum order amount can't be less than 0, Order feedback, Order feedbacks, Feedback for order no %s, Soon, {menu_item.product.name} , Product {menu_item.product.name} is not available now, You can't order more then {menu_item.quantity} of {menu_item.product.name}, Some of selected option does not exist, Add on not found, Minimum number of plates for {category.name} , Product with name {menu_item.product.name} not active now, Product with name {menu_item.product.name} is not available for , 'Cash on delivery' is disabled by administration, Delivery area is not available now, Branch with such id doesn't exists, Branch is not available now, You can't create order with empty cart, Selected branch is currently unavailable now, Delivery area is not available for catering, Invalid voucher code, Voucher will be available from {voucher.start_date}, Voucher expired, In order to activate voucher order sum must be at least {amount} {currency}, Voucher is no longer available, Voucher is not available now, Your order proceed successfully, Order not found, Order already Delivered, Request data, Mandatory field, Transaction, Invalid code., Country, Notifications, Notification Set, Pre Due Date, Post Due Date, Is Recurring?, Default email, Show terms & conditions?, Terms & conditions, Order no, First Name, Last Name, City, Postal Code, Due Date, Payment Request Attachment, Field, Required?, Customer details fields, Is active?, Is for registration?, Is for booking?, Terms and conditions, Want to get additional phone number?, You can't pay more than the original amount, You can't pay less than {} {}, Oops, transaction was canceled by the merchant., Oops, transaction is expired., Oops, transaction is invalid - {obj.invalidation_reason}., Unable to initiate the payment., Thank you! {currency_code} {amount} is paid., Thank you! {currency_code} {amount} is authorized., Thank you, your order is placed successfully!, Oops, you clicked cancel., Order No, Reference No, SMS, WhatsApp, Gateway code is required, This transaction cannot be paid anymore., Payment Failed., Number of items sold., Order number does not exist., No attempts for this order., QR Code, Download, User QR Code, Remove, Search, Create QR Code, No. of entries, Entry Type, Date, Time, General Rules, To review the agreed Terms & Conditions, please, Click Here, Scan this QR code at the event for check-in, QR code No., Booking No, Date Time, Venue Name Link (Google map link), booking ref, Special instruction, Total Amount, Net Amount, Show payment page, Invoiced To, INTERNAL ID, Telephone No, Email ID, Issue Date, Paid Date, Initiator Name, RECEIPT, PAID, Reference No., Initiator details, Submit, Name or title, Unit, QR code created!, Users, Can search payment transactions, Please contact the site administrator to activate this service, Gateway Code, Card type, Restore, Delete, Dispatch, Schedule, Internal ID, Remarks, Awaiting customer choice, Please enter valid email recipients., Alphanumeric value is required., Only characters allowed., Enter a valid Kuwaiti Civil ID number., Ensure the length is 12., Action performed successfully., Leave feedback, Must be valid positive number, Choose date, Sorry, we don't accept payments for the moment, Warning, Back to cart, Available, On Hold, Booked, Filter, Add, Failed to upload file, Enter valid email address, Use default email, Country code, Enter valid phone number, Example:, Please select your location precisely, GOT IT, Confirm, Tap to edit location, Export Transactions, Gateway Response, Card Type, Export default, Export, Export selected, Modified, Created by, Seen, Email seen, Product details, Cart, Checkout, Events list, Event details, Thank You, Please wait ..., Terms and Conditions, Order Menu, Subtotal, Discount, Grand total, Continue shopping, Proceed to checkout, Review your order, Qty, Location, Customer name (optional), Billing Information, Use a different shipping information, By clicking Pay button you are accepting our, Terms & Conditions, Select pickup store, Apartment, suite, etc. (optional), Your cart is empty, view catalogue, My Cart, Cart is empty, View cart, Some of products in cart does not have delivery option. They should be removed from cart, Some of products in cart does not have pickup option. They should be removed from cart, Some of the products cannot be picked up from same store. Please, select products to keep in cart, Available QTY, Check video, You save, Time left, Days, Hours, Added to cart, Add to cart, Buy now, Not available now, Search by keyword, No results found, days, hours, Added to Cart, More details,  details, Open hours, Opened Today:, Show open hours, Code verification, Thank You!!!, Your ticket booking is confirmed successfully., Download Tickets, This is a one time URL, therefore please download the ticket before leaving the page. However, a copy of it will be also sent to your email address., Attention, Thank you for leaving a feedback!, Book, Pay with, Free,  & , Choose Your Date ..., Change date, Select Entry type:, Sold out, I read and accept, Booked Dates ..., Thank you, we are fully booked., Please accept terms and conditions., Search Events Here, Event Name, Actions, Please, fill in registration form, Add a comment, Terms And Conditions, Thank you for registration, Your cart, Clear cart, Number of plates, Minimum is, Sub total, Delivery fee, Total-amount, Promotions, Promotion, Ingredients:, Out of stock, Already in cart, Sub Total, Minimum order is ${this.min_order} ${this.menuConfig.currency}, Choose desired delivery time, All rights reserved Ottu ©, Menu, Change delivery type, Change delivery method, Minimum order, We Accept, Congratulations! Your voucher activated successfully, You get -${voucher.amount} , And free delivery, Error occurred during voucher activation, Enter voucher code, Enter your code here, Activate, Voucher activated, Order Status, Thank you for your order. You will receive confirmation email shortly., Your QR Code, Transaction failed, Press the button to try again, Order Details, QTY, Special Instuction, Payment Details, Payment method, Transaction Date/Time, Customer Details, Shipping Type, Customer Email, Order state successfully changed to ${this.order_states[this.stepper_value-1].value}, Order Summary, Delivery Time, min, Item(s), AddOns, Total Price, User Details, Delivery Details, Extra Details, Enter your additional note here, Mininum order is, Continue Shopping, Minimum Order, Contact Details, Working Hours, Items, Your Cart, Clear All, The cart is currently empty, Area, Choose One, Payment Method, Payment summary, Okay, TO, Back, To Menu, Your Choice Of, Choose items from the list, Choose 1, Add-Ons, Extra Note, Enter your extra note here, To Cart, Please, select number of, not greater than the maximum selections, not less than the minimum selections, Menu Category, Search by food name, Choose order type, Choose desired order type. We can deliver it to you or you can pick up it by yourself, Delivery area will be open ${delivery_open_hours}, Branches will be open ${branch_open_hours}, Proceed, Restaurant is not working now. Please comeback latter, Select add-ons, Add special instruction, Add to order, Review order, Modify Order, Delivery details, Extra details, Delivery time, SubTotal, Cash, Try again, Order confirmation, Order status, Payment details, Customer details, Order details, Payment details not found, Address Name, Block, Street, Avenue, Floor, Access Location, Download Attachment, Download Receipt, Download Ticket, Thank you!, Order description, Transaction expired, please contact administrator, Enter amount you wish to pay, Transaction not found, Transaction cannot be paid as it is expired, Total amount, Gateway fee, Enter all details correctly, Building/House No., Apartment/Office No., PACI No., From:, To:, Total Bill, Pay Now, Best Choice, fee will be applied, Work, Chalet, Farm, Custom name, Payment Request Details, Add Your Location, Please contact the concerned department to complete the registration process., Hello, Administration panel, Switch language, Account settings, Logout, Payment Request, Create, Uploads, Bulk create, Product bulk create, Copy link, Cannot fetch data. Most likely there is an issue with the configuration., Copied to clipboard, Available Headers, Selected Headers, rows per page, Are you sure?, Creation date, Payment date, ID, The amount cannot be grea  ter than the available amount., Initiator, Import, Filename, Rows/Imported rows, Error File, Error report, Reports, File, Progress, Attempted at, Bulk transaction ID, Bulk plugin is not properly configured. Ask system administrator for more details, Example file, Files initiator, File name, Is recurring, Rows/imported rows, Uploaded by, Uploaded on, Is scheduled, Is active, Required fields, All fields, [Recurrence] required fields, [Recurrence] all fields, Bulk processing started, Upload processing started, Download example, Start typing to search event, Select bulk file, Download error reports, Are you sure you want to cancel booking?, Edit Email address, Send booking email again?, Save changes, Booking Details, Ticket details, Event name:, Event date:, Created:, Email:, First name:, Last name:, Phone:, Purchase details, Booked places, Ticket Name, Slot, Tickets quantity, Referenced number, Purchased, Scanned, Send email, Customer Phone, Full Name, Event date, Attendance, Partially Attended, Purchase type, Export bookings, Edit booking, Additional Quantity, Select ticket type:, Branch Details, Edit, Minimum order sum, Branch name, Accept, Order state, Are you sure to reject order?, Are you sure to approve order?, Catering details, Pickup details, Pickup branch, Transaction details, Order state has been changed successfully, Order time, Order satisfied, Invalid QR Code, Product Bulk Create, QR code is valid. Access granted, QR Code:, Customer Name:, Slot:, Subject, Support request, Report period, Total transactions, GMV, Overall Success Rate, Average Transaction size, Success Rate, Product Wise Sales, Recent Orders, Recent actions, Password changed successfully, Notify the customer via SMS that he has to pay an invoice. Builtin phone field has to be present on the form., Send orders notification to this user?, You successfully subscribe for new order notifications, You successfully unsubscribe from new order notifications, Page not found, Forgot Password, Back to login page, Reset Password, New password, Password confirmation, Minimum order is {min_order_sum} {plugin_config.currency}. , Restaurant isn't working now. , Add at least one item to your cart, Reference date, Name (FN LN), Auth ID, This payment transaction has no attempts., Customer payment page URL, Account locked: too many login attempts. Please try again after 2 minutes with correct username and password., Please wait . . . . . . ., This might take a while, Thank you for your patience, We are still working on it, Credit card, Ticket direct download link expired. Check your email and notify support if it isn't there, job's result expired (60 seconds), job was submitted, but exception occurred, the job doesn't exist anymore, Apparently some error occurred. Please check email and if ticket isn't sent there please notify the support, The glorious ticket is waiting for you. We're just getting it ready..., Please wait for a while, we are generating your booking ticket., Pay, Order datails, Event Date:, Not found., Author, Link not found, Statistics, Valid, Reference Number, Shortener Username, Shortener Password, Booking is not available, Product is not available now, You cannot order more than {max_enabled_value} QTY per order, Use billing address for delivery, minutes, seconds, Generate QR code, Store any kind of information related to the customer. It will be displayed on the payment related pages., Stores, Destination store, Deleted Transactions, Delivery address, You cannot order more than {max_quantity} QTY per order, Thank you! Payment Completed., Add your Address and your location on map, Building Type, Total generated, Total received, Net balance, close, Additional Note, mins, Enter email here, Restaurant is currently closed. Kindly, check it soon., Real Estate, Real estate, Manual Payment, Change Price, Advance Payment, Terminate Contract, Renew Contract, New Contract, Add Unit Type, Unit Type List, Add Tenant, Rent Management, Rent management, Properties, Tenant Management, Tenant management, Property Management, Property management, Unit Type, Unit Types, Advance Payment Request, Terminate Contract Transaction, Edit Price, Edit Tenant, Add Property, Edit Property, Edit Unit Type, Edit Unit, Renew Contract List, Renew contract list, Ok, Rows Per Page, KD, Id, Property Name, Tenant, Old Start Date, Old End Date, Old Amount, New Start Date, New End Date, New Amount, All, Late, Manual Payment List, Manual payment list, Unit Number, Month, Year, Tenant Name, Save, Contract Id, Start Date, End Date, Leave Date, Vacant, Occupied, Property, Tenant History, Edit Price List, Current Unit Amount, Current Unit Discount, Current Percentage/Fixed, Current Unit Net Amount, New Unit Amount, New Unit Discount, New Percentage/Fixed, New Unit Net Amount, Please select a property to load units, Percentage, Fixed, Property name is required, Unit number is required, New unit amount is required, Advance Payment List, KWD, Unit Name, Please select a property, Please select a unit, Property Name is required, Unit is required, Tenant Name is required, Unit Type Name, Unit Type Description, Commercial, Action, Is Commercial, Is Residential, Both Commercial and Residential, Add New Unit Type, Close, Reset, Export Unit Type, Something went wrong while fetching results, Unit Type Name (EN), Unit Type Name (AR), Contract Number, Late Payments, Property name, Load More, Tenant Name (EN), Tenant Name (AR), Civil ID Number, Upload Civil ID (Front), Upload, Upload Civil ID (Back), Passport Number, Upload Passport, Nationality, Email Address, Generate New Payment Link, Total Paid, Pending Payments, Payment Status, Rent Amount, Export Rent Details, Total Paid This Month, Unit Description, Total Units, Rented Units, Vacant Units, Is Cash Payment Allowed, Rent, Lease, Buy, Property Details, Unit Property Name (EN), Unit Property Name (AR), Allow cash payment, Add Unit Type With Units, Termination Date, Terminate Contract List, Old Contract Start Date, Old Contract End Date, Terminate Date, Actual Leave Date, Leave Notice Date, Contract start date is required, Contract end date is require, Termination date is required, Actual leave date is required, Leave notice date is require, Old Contract Amount, New Contract Start Date, New Contract End Date, New Contract Amount, Edit Ppice, Contract end date is required, New contract start date is required, New contract end date is required, Contract Start Date, Payment Start Date, Contract End Date, New Contract List, New contract list, Created Date(From), Created Date(To), Start Date(From), Start Date(To), End Date(From), End Date(To), Terminate date (From), Terminate date (To), Invoice Amount, Units of Type, Add Or Edit Units, Edit Units, How many units would you like to add ?, Save and Return, Kindly, enter both the price and the count of added records., Applied successfully, Created successfully, Payment start date is required, Tenant name is Required, Tenant name(AR) is required, Tenant civil id is required, Tenant nationality is required, Unit Type Name can not be empty, Unit Type Name(AR) can not be empty, Unit Type Description can not be empty, Action listings, Current Percentage / Fixed, New Percentage / Fixed, Old contract start date (From), Old contract start date (To), Old contract end date (From), Old contract end date (To), New contract start date (From), New contract start date (To), New contract end date (From), New contract end date (To), Contract New Start Date, Contract New End Date, Paid Months/Year, User, Change password, Bulk Uploads, Bulk Details, Bulk Dispatch logs, Bulk Transaction logs, Catalogue Payment, Food ordering, Payment Restriction, Property Detail, Configuration, Shortly Expired Contracts, Advanced Settings, Plugin Configuration, Gateway Name, International Air Transport Association, English, State Changed At, Select fields, Capture in full, Void in full, Refund in full, Acknowledge, Make PG inquiry, Disclose to merchant, Is Amount Editable, undefined Amount, undefineded Successfully, Disclosed To Merchant, Reason to cancel order, Costumer Phone, Cancellation Reason, Last State, Contract, CONTRACT, Contracts expire within, Kindly, select a date which is greater than or equal to actual leave date and leave notice date., Kindly, select a date which is greater than or equal to leave notice date., There is a pending amount that should be paid, are you sure that you want to continue., Kindly, select a date which is greater than the old contract end dat, New unit net amount is required, Kindly, select a date which is greater than the old contract end date, Hide email, Individual proxy fields, Day of the month to generate payment links, The Day of month to Genarate Payment Links field is required, The Day of the month to suspend accessing payment links field is required, Day of the month to suspend accessing payment links, Default email is not valid, Fields, Required, Validator, Custom detail field, Itinerary display, Label(EN), Label(AR), Main listings, Married?, No data available, Field Type, The price value is not valid, The discount value is not valid, The property_name field is required, The unit_number field is required, Spouse nationality is required, Spouse civil id is required, Kindly, enter a contract leave date which is greater than the contract start date, New unit discount is required, The discount field is required, The discount field must be numeric and may contain 3 decimal points, New unit amount may only contain numeric characters, New unit discount may only contain numeric characters, Activation Month, Kindly, enter a contract notice date which is greater than the contract start date, Activation Year, Activation year is required, Activation month is required, Is Activated, Tenant name is required, Payment month is required, Payment year is required, Kindly, select a date which is greater than the contract start date., Kindly, select a date which is greater than or equal to contract start date., Unit Type is required, Kindly, select unit type, Discount type is required, ACTION, ok, real-estate, Pg Codes, Kindly, enter a contract end date which is greater than the contract start date, Kindly, enter a contract payment start date which is greater than the contract start date, Kindly, enter a contract end date which is greater than the contract start date and payment start date, Please enter decimal value upto 2 points, Please enter decimal value upto 3 points, Day of the month to generate links must be greater than day of the month to suspend payment links, Kindly, select a date which is greater than the contract start date, New unit net amount may only contain positive decimal number, Add new field, Delete Field, Designates if this field is required, Designates if this object is active, can be used and displayed on site., Designates if the field represents customer details related data., Designate if this field shall appear in the itinerary table list at the invoice pdf., Confirmation, Is Manual, The address field is required, SHOW, HIDE, Is Late Payment, Are you sure that you want to make a new contract?, Are you sure that you want to do this manual transaction?, Are you sure that you want to renew contract?, Are you sure that you want to terminate this contract?, Kindly, insert unit type with their units, Kindly, insert at least one unit type with their units, The Day of month to genarate payment links must be between, The Day of the month to suspend accessing payment links must be 31 or less, Coupon Code, Net, Product Discount, Print Order, all, No add ons specified, No options specified, Are you sure to clear cart, Coupon Discount, Coupon Amount, Apply, Generated Reports, Exported by, Available until, Size, Records, Format, Module, Export Date, Export Properties, Monthly paid amount cannot be greater than the original contract amount, Original Contract Amount, Original Amount is Required, Insurance Amount, Contract Reference, Contract Ref, Both suspended and resumed, Suspended, Upload Contract, New Original Contract Amount, Old Original Contract Amount, Contract original amount is a required field, New original contract amount is required, file uploaded successfully, No contract find against this unit, Receipt Voucher Reference, The voucher_reference field may only contain alpha-numeric characters, Upload Logo, Upload Signature, Suspend Contract, Suspended Contract, Modify Contract, Modified Contract, Resume Contract, Is Suspended, Is Resumed, Payment Reminder, Suspended Contracts, Modified Contracts, Suspended/Resumed, Resumed, Suspended Contract List, Phone number is required, The email field is required, The civil_id_number length must be 12, The spouse.civil_id_number length must be 12, Upload Mariage Certificate, Before Modified Amount, After Modified Amount, Modify Payment, Current Paid Amount, New Paid Amount, Contract status, Termination date, Upload Attachement, Contract has been suspended, Contract has been resumed, Image have been downloaded successfully, You cannot suspend this contract as it is with the status, Customer has been notified, Your report is ready. You can download it from generated reports section, Reference number for the receipt voucher is required when performing manual payment, Print, Download your generated PDF, unit, Reports are being generated, Download your generated Report, Generate Invoices, Generate Invoices and Send Payment Links, Show, Not Generated Payments, Generated Payments, Contract No., Last Month Paid, Original AMT, Paid AMT, Actual Paid AMT, Civil ID, Count, Totals, Actual Paid Amount, Manual payment records will be reset. Are you sure you want to continue, Request failed with status code, error:: Selected generating date is not in between activation date and current generate date, Actual paid amount should be less than or equal to the original amount, Your request is in progress, Number of days of stopping the generation worker before the expiration day, Manual generating payment records, Contract Rollback, Renew Contract Rollback, Manual Payment Roll back, Terminate Contract Rollback, All the previous contracts should be terminated before making a new contract, Easily Generate Invoices by selecting the date of the desired period, Manual Generating Payments, Contract, payment records are going to be deleted , are you sure you want to continue, Loading.., Are you sure that you want to roll back the manual payment?, Are you sure that you want to roll back the contract termination, Worker, Release Manually Generating Lock, Generate Payments, Are you sure that you want to generate the invoices, Invoice List, Loading, Historical, Running, More Details, Invoices, IS PAID, Is Paid, ORIGINAL AMOUNT, RECEIPT NO, Main Listing, REMAINING INVOICE COUNT, REMAINING INVOICE AMOUNT, INVOICE PAID COUNT, INVOICE PAID AMOUNT, INVOICE NOT PAID COUNT, INVOICE NOT PAID AMOUNT, OB PAID COUNT, OB PAID AMOUNT, OB NOT PAID COUNT, OB NOT PAID AMOUNT, Expand, Late Payment, Paid Count, Pending Count, Total Count, Are you sure that you want to send reminder notifications, Notify Payments, Civil Id, Voucher Number, Is Missed, Is Open Balance, Grace Period Amount, Missed Invoices Amount, Contract Invoices, Sms Reminder, Email Reminder, Display Section, Payment Month, Payment Year, Receipt Voucher, Total Paid Count, Total Pending Count, Not Paid/Is Suspended, (Grace, Open, Missed) Amount, Missed, Normal, Grace Period, Open Balance, Generate Open Balance Invoices, Release Manually generating Lock, Express Search, Download Link, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"Details\":\"Details\",\"Bulk\":\"Bulk\",\"Transactions\":\"Transactions\",\"Deleted Paid Transactions\":\"Deleted Paid Transactions\",\"Table Headers\":\"Table Headers\",\"Events\":\"Events\",\"Bookings\":\"Bookings\",\"Create Bookings\":\"Create Bookings\",\"Fullfilment\":\"Fullfilment\",\"E-commerce\":\"E-commerce\",\"Session\":\"Session\",\"Fulfillment\":\"Fulfillment\",\"Create payment request\":\"Create payment request\",\"Customer Payment\":\"Customer Payment\",\"Dashboard\":\"Dashboard\",\"All transactions\":\"All transactions\",\"Help/Support\":\"Help/Support\",\"Provider\":\"Provider\",\"Sender\":\"Sender\",\"This field is required.\":\"This field is required.\",\"Username\":\"Username\",\"Password\":\"Password\",\"United\":\"United\",\"GIC\":\"GIC\",\"Customer notified.\":\"Customer notified.\",\"Reference Prefix\":\"Reference Prefix\",\"E-Commerce\":\"E-Commerce\",\"Payment request\":\"Payment request\",\"Bulk payment request\":\"Bulk payment request\",\"Catalogue purchase\":\"Catalogue purchase\",\"Customer payment\":\"Customer payment\",\"Shopify\":\"Shopify\",\"Event\":\"Event\",\"Communication error between KNPay and gateway. Please report this issue to KNPay administrator.\":\"Communication error between KNPay and gateway. Please report this issue to KNPay administrator.\",\"Catalogue\":\"Catalogue\",\"Notification\":\"Notification\",\"Units\":\"Units\",\"Void\":\"Void\",\"Specify at least one email recipient\":\"Specify at least one email recipient\",\"Name to be displayed in dashboard\":\"Name to be displayed in dashboard\",\"Logo\":\"Logo\",\"Logo to be displayed in dashboard\":\"Logo to be displayed in dashboard\",\"Merchant Website URL\":\"Merchant Website URL\",\"Merchant Email\":\"Merchant Email\",\"Merchant Phone\":\"Merchant Phone\",\"Define list of email recipients\":\"Define list of email recipients\",\"Common\":\"Common\",\"Type\":\"Type\",\"Name\":\"Name\",\"Order\":\"Order\",\"Transaction report field\":\"Transaction report field\",\"Transaction report fields\":\"Transaction report fields\",\"Emails\":\"Emails\",\"We're sorry, but we don't accept payments for the moment.\":\"We're sorry, but we don't accept payments for the moment.\",\"Code\":\"Code\",\"Currency\":\"Currency\",\"Currencies\":\"Currencies\",\"Fix fee\":\"Fix fee\",\"Percent fee\":\"Percent fee\",\"Local\":\"Local\",\"Used only for informational purposes\":\"Used only for informational purposes\",\"Default currency\":\"Default currency\",\"From\":\"From\",\"To\":\"To\",\"Rate\":\"Rate\",\"Support Request\":\"Support Request\",\"Suggestion\":\"Suggestion\",\"Feedback\":\"Feedback\",\"Gateway\":\"Gateway\",\"Please verify your bank statement before retrying the payment.\":\"Please verify your bank statement before retrying the payment.\",\"Cash on Delivery\":\"Cash on Delivery\",\"Sale\":\"Sale\",\"Transaction type\":\"Transaction type\",\"Call centre\":\"Call centre\",\"Yes\":\"Yes\",\"No\":\"No\",\"Prepaid\":\"Prepaid\",\"Postpaid\":\"Postpaid\",\"Merchant Name\":\"Merchant Name\",\"Product Category\":\"Product Category\",\"Product Name\":\"Product Name\",\"Previous Customer\":\"Previous Customer\",\"Shipping Method\":\"Shipping Method\",\"Number Of Items Sold\":\"Number Of Items Sold\",\"Name of Country\":\"Name of Country\",\"Hours Till Departure\":\"Hours Till Departure\",\"PIN Code\":\"PIN Code\",\"Gateways\":\"Gateways\",\"Select gateway\":\"Select gateway\",\"Settings\":\"Settings\",\"Billing address\":\"Billing address\",\"Home\":\"Home\",\"Arabic\":\"Arabic\",\"Result\":\"Result\",\"Track Id\":\"Track Id\",\"Post Date\":\"Post Date\",\"Transaction ID\":\"Transaction ID\",\"Payment ID\":\"Payment ID\",\"Auth Code\":\"Auth Code\",\"Reference ID\":\"Reference ID\",\"Decision\":\"Decision\",\"Message\":\"Message\",\"Receipt No\":\"Receipt No\",\"Transaction No\":\"Transaction No\",\"You are not having permission to delete paid transactions.\":\"You are not having permission to delete paid transactions.\",\"Successfully deleted %(count)d %(items)s.\":\"Successfully deleted %(count)d %(items)s.\",\"Successfully restored %(count)d %(items)s.\":\"Successfully restored %(count)d %(items)s.\",\"Payment\":\"Payment\",\"Created\":\"Created\",\"Pending\":\"Pending\",\"Attempted\":\"Attempted\",\"Authorized\":\"Authorized\",\"Paid\":\"Paid\",\"Failed\":\"Failed\",\"Canceled\":\"Canceled\",\"Expired\":\"Expired\",\"Invalid\":\"Invalid\",\"Refunded\":\"Refunded\",\"Refund Queued\":\"Refund Queued\",\"Refund Rejected\":\"Refund Rejected\",\"State\":\"State\",\"Gateway code\":\"Gateway code\",\"Amount\":\"Amount\",\"Due Amount\":\"Due Amount\",\"Delivery Fee\":\"Delivery Fee\",\"Editable amount\":\"Editable amount\",\"Allow customer to edit amount\":\"Allow customer to edit amount\",\"Language\":\"Language\",\"Currency Code\":\"Currency Code\",\"Merchant order no\":\"Merchant order no\",\"Bulk identifier.\":\"Bulk identifier.\",\"Customer first name\":\"Customer first name\",\"Customer last name\":\"Customer last name\",\"Customer email\":\"Customer email\",\"Customer phone\":\"Customer phone\",\"Customer additional phone\":\"Customer additional phone\",\"Customer address line 1\":\"Customer address line 1\",\"Customer address line 2\":\"Customer address line 2\",\"Customer address city\":\"Customer address city\",\"Customer address state\":\"Customer address state\",\"Customer address country\":\"Customer address country\",\"Customer address postal code\":\"Customer address postal code\",\"Vendor name\":\"Vendor name\",\"Due date\":\"Due date\",\"Email Recipients\":\"Email Recipients\",\"Comma separated email recipients which will receive customer emails.\":\"Comma separated email recipients which will receive customer emails.\",\"Product Type\":\"Product Type\",\"Attachment\":\"Attachment\",\"Attachment to be sent when notifying a customer for payment.\":\"Attachment to be sent when notifying a customer for payment.\",\"Extra\":\"Extra\",\"Reference number\":\"Reference number\",\"Expiration time\":\"Expiration time\",\"If defined, transaction created after the defined period of time, will be invalidated/expired if customer tries to pay them.\":\"If defined, transaction created after the defined period of time, will be invalidated/expired if customer tries to pay them.\",\"Email Seen at\":\"Email Seen at\",\"Seen at\":\"Seen at\",\"initiator\":\"initiator\",\"Payment transaction\":\"Payment transaction\",\"Payment transactions\":\"Payment transactions\",\"Paid Amount\":\"Paid Amount\",\"Original Amount\":\"Original Amount\",\"Payment Date\":\"Payment Date\",\"Cancel\":\"Cancel\",\"Expire\":\"Expire\",\"Deleted Paid payment transaction\":\"Deleted Paid payment transaction\",\"Deleted Paid payment transactions\":\"Deleted Paid payment transactions\",\"Can restore deleted payment transactions\":\"Can restore deleted payment transactions\",\"Can delete paid payment transactions\":\"Can delete paid payment transactions\",\"Success\":\"Success\",\"Error\":\"Error\",\"Gateway Settings\":\"Gateway Settings\",\"Fee\":\"Fee\",\"Total\":\"Total\",\"This field is required\":\"This field is required\",\"Sending SMS requires Phone field to be filled.\":\"Sending SMS requires Phone field to be filled.\",\"A valid number is required.\":\"A valid number is required.\",\"Terms\":\"Terms\",\"Preparing\":\"Preparing\",\"Dispatching\":\"Dispatching\",\"Scheduling\":\"Scheduling\",\"Paused\":\"Paused\",\"Dispatched\":\"Dispatched\",\"Partial dispatched\":\"Partial dispatched\",\"Status\":\"Status\",\"Start time\":\"Start time\",\"End time\":\"End time\",\"Pause time\":\"Pause time\",\"Total pause duration\":\"Total pause duration\",\"Payment transaction ID\":\"Payment transaction ID\",\"Resume\":\"Resume\",\"Invalid file.\":\"Invalid file.\",\"Invalid or missing values in some of rows\":\"Invalid or missing values in some of rows\",\"Dispatching process started.\":\"Dispatching process started.\",\"Bulk scheduled.\":\"Bulk scheduled.\",\"Bulk pausing process started.\":\"Bulk pausing process started.\",\"Bulk is locked. Another operation is ongoing at the moment. Try again in few moments.\":\"Bulk is locked. Another operation is ongoing at the moment. Try again in few moments.\",\"Bulk is already paused.\":\"Bulk is already paused.\",\"Error. Report to admins.\":\"Error. Report to admins.\",\"Dispatching process resumed.\":\"Dispatching process resumed.\",\"Bulk canceling process started.\":\"Bulk canceling process started.\",\"Bulk is already canceled.\":\"Bulk is already canceled.\",\"Labels\":\"Labels\",\"Weekday\":\"Weekday\",\"Weekdays\":\"Weekdays\",\"Delivery Duration\":\"Delivery Duration\",\"Delivery Durations\":\"Delivery Durations\",\"Stock\":\"Stock\",\"Communication\":\"Communication\",\"Shipping details\":\"Shipping details\",\"Payment Transaction\":\"Payment Transaction\",\"Pickup\":\"Pickup\",\"Delivery\":\"Delivery\",\"Catalogue URL\":\"Catalogue URL\",\"Delivery country\":\"Delivery country\",\"Show delivery date input\":\"Show delivery date input\",\"Image\":\"Image\",\"Product Image\":\"Product Image\",\"Product Images\":\"Product Images\",\"Duration\":\"Duration\",\"Working hours\":\"Working hours\",\"Week days\":\"Week days\",\"E-mail\":\"E-mail\",\"Phone\":\"Phone\",\"Address\":\"Address\",\"Work days\":\"Work days\",\"Select work days\":\"Select work days\",\"Active\":\"Active\",\"Product\":\"Product\",\"Service\":\"Service\",\"Description\":\"Description\",\"Price before discount\":\"Price before discount\",\"Price\":\"Price\",\"Display stock\":\"Display stock\",\"Display the available stock on the website\":\"Display the available stock on the website\",\"Max Quantity\":\"Max Quantity\",\"Define max quantity purchase per order\":\"Define max quantity purchase per order\",\"Total Sold\":\"Total Sold\",\"Start date\":\"Start date\",\"Start of the sell date\":\"Start of the sell date\",\"End date\":\"End date\",\"End of the sell date\":\"End of the sell date\",\"Helpline Number/ Inquiry number about the product\":\"Helpline Number/ Inquiry number about the product\",\"Model number\":\"Model number\",\"Departments\":\"Departments\",\"Products\":\"Products\",\"Product name\":\"Product name\",\"Quantity\":\"Quantity\",\"Fulfilled\":\"Fulfilled\",\"Order number\":\"Order number\",\"Destination department\":\"Destination department\",\"Customer name\":\"Customer name\",\"Address line 1\":\"Address line 1\",\"Address line 2\":\"Address line 2\",\"Address city\":\"Address city\",\"Delivery date\":\"Delivery date\",\"Shipping type\":\"Shipping type\",\"Preferred delivery time\":\"Preferred delivery time\",\"Preferred delivery date\":\"Preferred delivery date\",\"Is restored\":\"Is restored\",\"Orders\":\"Orders\",\"Work hour\":\"Work hour\",\"Work hours\":\"Work hours\",\"Delivery charges\":\"Delivery charges\",\"{product.name} is not available now\":\"{product.name} is not available now\",\"Can view owned customer payments\":\"Can view owned customer payments\",\"Can view group customer payments\":\"Can view group customer payments\",\"ECommerce\":\"ECommerce\",\"Sender does not exist\":\"Sender does not exist\",\"E-Commerce Config\":\"E-Commerce Config\",\"Can view e-commerce payments\":\"Can view e-commerce payments\",\"Can delete e-commerce payments\":\"Can delete e-commerce payments\",\"Can restore e-commerce payments\":\"Can restore e-commerce payments\",\"Pending Payment\":\"Pending Payment\",\"Date/Time\":\"Date/Time\",\"Event name\":\"Event name\",\"Header title\":\"Header title\",\"Event list page header\":\"Event list page header\",\"Displayed fields\":\"Displayed fields\",\"Can restore event payments\":\"Can restore event payments\",\"Venue name\":\"Venue name\",\"Feedback URL\":\"Feedback URL\",\"Tickets available from\":\"Tickets available from\",\"Tickets available till\":\"Tickets available till\",\"Rules\":\"Rules\",\"Event types\":\"Event types\",\"Event category\":\"Event category\",\"Event categories\":\"Event categories\",\"Event Image\":\"Event Image\",\"Event Images\":\"Event Images\",\"Ticket name\":\"Ticket name\",\"Ticket Quantity\":\"Ticket Quantity\",\"Event start time\":\"Event start time\",\"Event end time\":\"Event end time\",\"Max Tickets\":\"Max Tickets\",\"Min Quantity\":\"Min Quantity\",\"Event ticket detail\":\"Event ticket detail\",\"Event ticket details\":\"Event ticket details\",\"Booking number\":\"Booking number\",\"First name\":\"First name\",\"Last name\":\"Last name\",\"Phone number\":\"Phone number\",\"Email\":\"Email\",\"Booking person information\":\"Booking person information\",\"Used to store Booking user extra information\":\"Used to store Booking user extra information\",\"Event Date\":\"Event Date\",\"Booking status\":\"Booking status\",\"Is Welcome email sent?\":\"Is Welcome email sent?\",\"Booking\":\"Booking\",\"Attended\":\"Attended\",\"Not Attended\":\"Not Attended\",\"Unit price\":\"Unit price\",\"Tickets PDF URL\":\"Tickets PDF URL\",\"Booking item\":\"Booking item\",\"Booking items\":\"Booking items\",\"Confirmed\":\"Confirmed\",\"Booking Item\":\"Booking Item\",\"Encrypted number\":\"Encrypted number\",\"Is QR scanned?\":\"Is QR scanned?\",\"Booking Extra Information\":\"Booking Extra Information\",\"Event feedback\":\"Event feedback\",\"Comment\":\"Comment\",\"Registration information\":\"Registration information\",\"Used to store Registration information of user\":\"Used to store Registration information of user\",\"Event Registration\":\"Event Registration\",\"Event Registrations\":\"Event Registrations\",\"Invalid Ticket selection.\":\"Invalid Ticket selection.\",\"There is no ticket for this date\":\"There is no ticket for this date\",\"You can not purchase more than %s tickets in single purchase\":\"You can not purchase more than %s tickets in single purchase\",\"You have to purchase at least %s tickets\":\"You have to purchase at least %s tickets\",\"You have already purchased ticket with this email.\":\"You have already purchased ticket with this email.\",\"You cannot buy tickets for passed dates\":\"You cannot buy tickets for passed dates\",\"You can not book more than available tickets for selected date\":\"You can not book more than available tickets for selected date\",\"Sorry, there are no more available tickets\":\"Sorry, there are no more available tickets\",\"You can't buy more than %s tickets\":\"You can't buy more than %s tickets\",\"You can't downgrade ticket price\":\"You can't downgrade ticket price\",\"You can't cancel past booking\":\"You can't cancel past booking\",\"Invalid QR code\":\"Invalid QR code\",\"Booking with such booking number doesn't exists\":\"Booking with such booking number doesn't exists\",\"Booking is not paid\":\"Booking is not paid\",\"Ticket is booked for another event\":\"Ticket is booked for another event\",\"Ticket is already scanned\":\"Ticket is already scanned\",\"Ticket is booked for another date\":\"Ticket is booked for another date\",\"Ticket not found\":\"Ticket not found\",\"Civil ID already used twice for this day.\":\"Civil ID already used twice for this day.\",\"Created at\":\"Created at\",\"Invalid Event\":\"Invalid Event\",\"Invalid Url\":\"Invalid Url\",\"Email send successfully\":\"Email send successfully\",\"Branch not found\":\"Branch not found\",\"Delivery area not found\":\"Delivery area not found\",\"Call centre phone number\":\"Call centre phone number\",\"Working hours during week\":\"Working hours during week\",\"Approximate delivery time\":\"Approximate delivery time\",\"Can view order details\":\"Can view order details\",\"Can view delivery areas\":\"Can view delivery areas\",\"Can view food_order payments\":\"Can view food_order payments\",\"Can delete food_order payments\":\"Can delete food_order payments\",\"Can restore food_order payments\":\"Can restore food_order payments\",\"Minimum order order sum\":\"Minimum order order sum\",\"Minimum number of plates\":\"Minimum number of plates\",\"Branches\":\"Branches\",\"Branch\":\"Branch\",\"Branch QR Code\":\"Branch QR Code\",\"Delivery zone\":\"Delivery zone\",\"Delivery area\":\"Delivery area\",\"Delivery area QR Code\":\"Delivery area QR Code\",\"Category Name\":\"Category Name\",\"Service charges\":\"Service charges\",\"Product category\":\"Product category\",\"Product categories\":\"Product categories\",\"Product price\":\"Product price\",\"AddOn Name\":\"AddOn Name\",\"Add on\":\"Add on\",\"Add ons\":\"Add ons\",\"Product description\":\"Product description\",\"Add ons to this product\":\"Add ons to this product\",\"Min\":\"Min\",\"Max\":\"Max\",\"Options\":\"Options\",\"Options of product\":\"Options of product\",\"Product option header\":\"Product option header\",\"Is default choice?\":\"Is default choice?\",\"Promoted product\":\"Promoted product\",\"Special instructions\":\"Special instructions\",\"House\":\"House\",\"Apartment\":\"Apartment\",\"Office\":\"Office\",\"Cash on delivery\":\"Cash on delivery\",\"Accepted\":\"Accepted\",\"Cooking in progress\":\"Cooking in progress\",\"Ready for pickup\":\"Ready for pickup\",\"Delivery in progress\":\"Delivery in progress\",\"Arrived\":\"Arrived\",\"Payment type\":\"Payment type\",\"Delivery Area\":\"Delivery Area\",\"Order extra details\":\"Order extra details\",\"Used to store user information\":\"Used to store user information\",\"Catering delivery time\":\"Catering delivery time\",\"Order QR Code\":\"Order QR Code\",\"Governorate name\":\"Governorate name\",\"Includes all products?\":\"Includes all products?\",\"Included Products\":\"Included Products\",\"Excluded Products\":\"Excluded Products\",\"Included Categories\":\"Included Categories\",\"Excluded Categories\":\"Excluded Categories\",\"Condition\":\"Condition\",\"Conditions\":\"Conditions\",\"Product not found\":\"Product not found\",\"Pickup field\":\"Pickup field\",\"Delivery field\":\"Delivery field\",\"Voucher title\":\"Voucher title\",\"code\":\"code\",\"Free delivery\":\"Free delivery\",\"Discount type\":\"Discount type\",\"Minimum order amount\":\"Minimum order amount\",\"Voucher\":\"Voucher\",\"Vouchers\":\"Vouchers\",\"Specify discount amount\":\"Specify discount amount\",\"Specify either free delivery option or discount for this voucher\":\"Specify either free delivery option or discount for this voucher\",\"Minimum order amount can't be less than 0\":\"Minimum order amount can't be less than 0\",\"Order feedback\":\"Order feedback\",\"Order feedbacks\":\"Order feedbacks\",\"Feedback for order no %s\":\"Feedback for order no %s\",\"Soon\":\"Soon\",\"{menu_item.product.name} \":\"{menu_item.product.name} \",\"Product {menu_item.product.name} is not available now\":\"Product {menu_item.product.name} is not available now\",\"You can't order more then {menu_item.quantity} of {menu_item.product.name}\":\"You can't order more then {menu_item.quantity} of {menu_item.product.name}\",\"Some of selected option does not exist\":\"Some of selected option does not exist\",\"Add on not found\":\"Add on not found\",\"Minimum number of plates for {category.name} \":\"Minimum number of plates for {category.name} \",\"Product with name {menu_item.product.name} not active now\":\"Product with name {menu_item.product.name} not active now\",\"Product with name {menu_item.product.name} is not available for \":\"Product with name {menu_item.product.name} is not available for \",\"'Cash on delivery' is disabled by administration\":\"'Cash on delivery' is disabled by administration\",\"Delivery area is not available now\":\"Delivery area is not available now\",\"Branch with such id doesn't exists\":\"Branch with such id doesn't exists\",\"Branch is not available now\":\"Branch is not available now\",\"You can't create order with empty cart\":\"You can't create order with empty cart\",\"Selected branch is currently unavailable now\":\"Selected branch is currently unavailable now\",\"Delivery area is not available for catering\":\"Delivery area is not available for catering\",\"Invalid voucher code\":\"Invalid voucher code\",\"Voucher will be available from {voucher.start_date}\":\"Voucher will be available from {voucher.start_date}\",\"Voucher expired\":\"Voucher expired\",\"In order to activate voucher order sum must be at least {amount} {currency}\":\"In order to activate voucher order sum must be at least {amount} {currency}\",\"Voucher is no longer available\":\"Voucher is no longer available\",\"Voucher is not available now\":\"Voucher is not available now\",\"Your order proceed successfully\":\"Your order proceed successfully\",\"Order not found\":\"Order not found\",\"Order already Delivered\":\"Order already Delivered\",\"Request data\":\"Request data\",\"Mandatory field\":\"Mandatory field\",\"Transaction\":\"Transaction\",\"Invalid code.\":\"Invalid code.\",\"Country\":\"Country\",\"Notifications\":\"Notifications\",\"Notification Set\":\"Notification Set\",\"Pre Due Date\":\"Pre Due Date\",\"Post Due Date\":\"Post Due Date\",\"Is Recurring?\":\"Is Recurring?\",\"Default email\":\"Default email\",\"Show terms & conditions?\":\"Show terms & conditions?\",\"Terms & conditions\":\"Terms & conditions\",\"Order no\":\"Order no\",\"First Name\":\"First Name\",\"Last Name\":\"Last Name\",\"City\":\"City\",\"Postal Code\":\"Postal Code\",\"Due Date\":\"Due Date\",\"Payment Request Attachment\":\"Payment Request Attachment\",\"Field\":\"Field\",\"Required?\":\"Required?\",\"Customer details fields\":\"Customer details fields\",\"Is active?\":\"Is active?\",\"Is for registration?\":\"Is for registration?\",\"Is for booking?\":\"Is for booking?\",\"Terms and conditions\":\"Terms and conditions\",\"Want to get additional phone number?\":\"Want to get additional phone number?\",\"You can't pay more than the original amount\":\"You can't pay more than the original amount\",\"You can't pay less than {} {}\":\"You can't pay less than {} {}\",\"Oops, transaction was canceled by the merchant.\":\"Oops, transaction was canceled by the merchant.\",\"Oops, transaction is expired.\":\"Oops, transaction is expired.\",\"Oops, transaction is invalid - {obj.invalidation_reason}.\":\"Oops, transaction is invalid - {obj.invalidation_reason}.\",\"Unable to initiate the payment.\":\"Unable to initiate the payment.\",\"Thank you! {currency_code} {amount} is paid.\":\"Thank you! {currency_code} {amount} is paid.\",\"Thank you! {currency_code} {amount} is authorized.\":\"Thank you! {currency_code} {amount} is authorized.\",\"Thank you, your order is placed successfully!\":\"Thank you, your order is placed successfully!\",\"Oops, you clicked cancel.\":\"Oops, you clicked cancel.\",\"Order No\":\"Order No\",\"Reference No\":\"Reference No\",\"SMS\":\"SMS\",\"WhatsApp\":\"WhatsApp\",\"Gateway code is required\":\"Gateway code is required\",\"This transaction cannot be paid anymore.\":\"This transaction cannot be paid anymore.\",\"Payment Failed.\":\"Payment Failed.\",\"Number of items sold.\":\"Number of items sold.\",\"Order number does not exist.\":\"Order number does not exist.\",\"No attempts for this order.\":\"No attempts for this order.\",\"QR Code\":\"QR Code\",\"Download\":\"Download\",\"User QR Code\":\"User QR Code\",\"Remove\":\"Remove\",\"Search\":\"Search\",\"Create QR Code\":\"Create QR Code\",\"No. of entries\":\"No. of entries\",\"Entry Type\":\"Entry Type\",\"Date\":\"Date\",\"Time\":\"Time\",\"General Rules\":\"General Rules\",\"To review the agreed Terms & Conditions, please\":\"To review the agreed Terms & Conditions, please\",\"Click Here\":\"Click Here\",\"Scan this QR code at the event for check-in\":\"Scan this QR code at the event for check-in\",\"QR code No.\":\"QR code No.\",\"Booking No\":\"Booking No\",\"Date Time\":\"Date Time\",\"Venue Name Link (Google map link)\":\"Venue Name Link (Google map link)\",\"booking ref\":\"booking ref\",\"Special instruction\":\"Special instruction\",\"Total Amount\":\"Total Amount\",\"Net Amount\":\"Net Amount\",\"Show payment page\":\"Show payment page\",\"Invoiced To\":\"Invoiced To\",\"INTERNAL ID\":\"INTERNAL ID\",\"Telephone No\":\"Telephone No\",\"Email ID\":\"Email ID\",\"Issue Date\":\"Issue Date\",\"Paid Date\":\"Paid Date\",\"Initiator Name\":\"Initiator Name\",\"RECEIPT\":\"RECEIPT\",\"PAID\":\"PAID\",\"Reference No.\":\"Reference No.\",\"Initiator details\":\"Initiator details\",\"Submit\":\"Submit\",\"Name or title\":\"Name or title\",\"Unit\":\"Unit\",\"QR code created!\":\"QR code created!\",\"Users\":\"Users\",\"Can search payment transactions\":\"Can search payment transactions\",\"Please contact the site administrator to activate this service\":\"Please contact the site administrator to activate this service\",\"Gateway Code\":\"Gateway Code\",\"Card type\":\"Card type\",\"Restore\":\"Restore\",\"Delete\":\"Delete\",\"Dispatch\":\"Dispatch\",\"Schedule\":\"Schedule\",\"Internal ID\":\"Internal ID\",\"Remarks\":\"Remarks\",\"Awaiting customer choice\":\"Awaiting customer choice\",\"Please enter valid email recipients.\":\"Please enter valid email recipients.\",\"Alphanumeric value is required.\":\"Alphanumeric value is required.\",\"Only characters allowed.\":\"Only characters allowed.\",\"Enter a valid Kuwaiti Civil ID number.\":\"Enter a valid Kuwaiti Civil ID number.\",\"Ensure the length is 12.\":\"Ensure the length is 12.\",\"Action performed successfully.\":\"Action performed successfully.\",\"Leave feedback\":\"Leave feedback\",\"Must be valid positive number\":\"Must be valid positive number\",\"Choose date\":\"Choose date\",\"Sorry, we don't accept payments for the moment\":\"Sorry, we don't accept payments for the moment\",\"Warning\":\"Warning\",\"Back to cart\":\"Back to cart\",\"Available\":\"Available\",\"On Hold\":\"On Hold\",\"Booked\":\"Booked\",\"Filter\":\"Filter\",\"Add\":\"Add\",\"Failed to upload file\":\"Failed to upload file\",\"Enter valid email address\":\"Enter valid email address\",\"Use default email\":\"Use default email\",\"Country code\":\"Country code\",\"Enter valid phone number\":\"Enter valid phone number\",\"Example:\":\"Example:\",\"Please select your location precisely\":\"Please select your location precisely\",\"GOT IT\":\"GOT IT\",\"Confirm\":\"Confirm\",\"Tap to edit location\":\"Tap to edit location\",\"Export Transactions\":\"Export Transactions\",\"Gateway Response\":\"Gateway Response\",\"Card Type\":\"Card Type\",\"Export default\":\"Export default\",\"Export\":\"Export\",\"Export selected\":\"Export selected\",\"Modified\":\"Modified\",\"Created by\":\"Created by\",\"Seen\":\"Seen\",\"Email seen\":\"Email seen\",\"Product details\":\"Product details\",\"Cart\":\"Cart\",\"Checkout\":\"Checkout\",\"Events list\":\"Events list\",\"Event details\":\"Event details\",\"Thank You\":\"Thank You\",\"Please wait ...\":\"Please wait ...\",\"Terms and Conditions\":\"Terms and Conditions\",\"Order Menu\":\"Order Menu\",\"Subtotal\":\"Subtotal\",\"Discount\":\"Discount\",\"Grand total\":\"Grand total\",\"Continue shopping\":\"Continue shopping\",\"Proceed to checkout\":\"Proceed to checkout\",\"Review your order\":\"Review your order\",\"Qty\":\"Qty\",\"Location\":\"Location\",\"Customer name (optional)\":\"Customer name (optional)\",\"Billing Information\":\"Billing Information\",\"Use a different shipping information\":\"Use a different shipping information\",\"By clicking Pay button you are accepting our\":\"By clicking Pay button you are accepting our\",\"Terms & Conditions\":\"Terms & Conditions\",\"Select pickup store\":\"Select pickup store\",\"Apartment, suite, etc. (optional)\":\"Apartment, suite, etc. (optional)\",\"Your cart is empty\":\"Your cart is empty\",\"view catalogue\":\"view catalogue\",\"My Cart\":\"My Cart\",\"Cart is empty\":\"Cart is empty\",\"View cart\":\"View cart\",\"Some of products in cart does not have delivery option. They should be removed from cart\":\"Some of products in cart does not have delivery option. They should be removed from cart\",\"Some of products in cart does not have pickup option. They should be removed from cart\":\"Some of products in cart does not have pickup option. They should be removed from cart\",\"Some of the products cannot be picked up from same store. Please, select products to keep in cart\":\"Some of the products cannot be picked up from same store. Please, select products to keep in cart\",\"Available QTY\":\"Available QTY\",\"Check video\":\"Check video\",\"You save\":\"You save\",\"Time left\":\"Time left\",\"Days\":\"Days\",\"Hours\":\"Hours\",\"Added to cart\":\"Added to cart\",\"Add to cart\":\"Add to cart\",\"Buy now\":\"Buy now\",\"Not available now\":\"Not available now\",\"Search by keyword\":\"Search by keyword\",\"No results found\":\"No results found\",\"days\":\"days\",\"hours\":\"hours\",\"Added to Cart\":\"Added to Cart\",\"More details\":\"More details\",\" details\":\" details\",\"Open hours\":\"Open hours\",\"Opened Today:\":\"Opened Today:\",\"Show open hours\":\"Show open hours\",\"Code verification\":\"Code verification\",\"Thank You!!!\":\"Thank You!!!\",\"Your ticket booking is confirmed successfully.\":\"Your ticket booking is confirmed successfully.\",\"Download Tickets\":\"Download Tickets\",\"This is a one time URL, therefore please download the ticket before leaving the page. However, a copy of it will be also sent to your email address.\":\"This is a one time URL, therefore please download the ticket before leaving the page. However, a copy of it will be also sent to your email address.\",\"Attention\":\"Attention\",\"Thank you for leaving a feedback!\":\"Thank you for leaving a feedback!\",\"Book\":\"Book\",\"Pay with\":\"Pay with\",\"Free\":\"Free\",\" & \":\" & \",\"Choose Your Date ...\":\"Choose Your Date ...\",\"Change date\":\"Change date\",\"Select Entry type:\":\"Select Entry type:\",\"Sold out\":\"Sold out\",\"I read and accept\":\"I read and accept\",\"Booked Dates ...\":\"Booked Dates ...\",\"Thank you, we are fully booked.\":\"Thank you, we are fully booked.\",\"Please accept terms and conditions.\":\"Please accept terms and conditions.\",\"Search Events Here\":\"Search Events Here\",\"Event Name\":\"Event Name\",\"Actions\":\"Actions\",\"Please, fill in registration form\":\"Please, fill in registration form\",\"Add a comment\":\"Add a comment\",\"Terms And Conditions\":\"Terms And Conditions\",\"Thank you for registration\":\"Thank you for registration\",\"Your cart\":\"Your cart\",\"Clear cart\":\"Clear cart\",\"Number of plates\":\"Number of plates\",\"Minimum is\":\"Minimum is\",\"Sub total\":\"Sub total\",\"Delivery fee\":\"Delivery fee\",\"Total-amount\":\"Total-amount\",\"Promotions\":\"Promotions\",\"Promotion\":\"Promotion\",\"Ingredients:\":\"Ingredients:\",\"Out of stock\":\"Out of stock\",\"Already in cart\":\"Already in cart\",\"Sub Total\":\"Sub Total\",\"Minimum order is ${this.min_order} ${this.menuConfig.currency}\":\"Minimum order is ${this.min_order} ${this.menuConfig.currency}\",\"Choose desired delivery time\":\"Choose desired delivery time\",\"All rights reserved Ottu ©\":\"All rights reserved Ottu ©\",\"Menu\":\"Menu\",\"Change delivery type\":\"Change delivery type\",\"Change delivery method\":\"Change delivery method\",\"Minimum order\":\"Minimum order\",\"We Accept\":\"We Accept\",\"Congratulations! Your voucher activated successfully\":\"Congratulations! Your voucher activated successfully\",\"You get -${voucher.amount} \":\"You get -${voucher.amount} \",\"And free delivery\":\"And free delivery\",\"Error occurred during voucher activation\":\"Error occurred during voucher activation\",\"Enter voucher code\":\"Enter voucher code\",\"Enter your code here\":\"Enter your code here\",\"Activate\":\"Activate\",\"Voucher activated\":\"Voucher activated\",\"Order Status\":\"Order Status\",\"Thank you for your order. You will receive confirmation email shortly.\":\"Thank you for your order. You will receive confirmation email shortly.\",\"Your QR Code\":\"Your QR Code\",\"Transaction failed\":\"Transaction failed\",\"Press the button to try again\":\"Press the button to try again\",\"Order Details\":\"Order Details\",\"QTY\":\"QTY\",\"Special Instuction\":\"Special Instuction\",\"Payment Details\":\"Payment Details\",\"Payment method\":\"Payment method\",\"Transaction Date/Time\":\"Transaction Date/Time\",\"Customer Details\":\"Customer Details\",\"Shipping Type\":\"Shipping Type\",\"Customer Email\":\"Customer Email\",\"Order state successfully changed to ${this.order_states[this.stepper_value-1].value}\":\"Order state successfully changed to ${this.order_states[this.stepper_value-1].value}\",\"Order Summary\":\"Order Summary\",\"Delivery Time\":\"Delivery Time\",\"min\":\"min\",\"Item(s)\":\"Item(s)\",\"AddOns\":\"AddOns\",\"Total Price\":\"Total Price\",\"User Details\":\"User Details\",\"Delivery Details\":\"Delivery Details\",\"Extra Details\":\"Extra Details\",\"Enter your additional note here\":\"Enter your additional note here\",\"Mininum order is\":\"Mininum order is\",\"Continue Shopping\":\"Continue Shopping\",\"Minimum Order\":\"Minimum Order\",\"Contact Details\":\"Contact Details\",\"Working Hours\":\"Working Hours\",\"Items\":\"Items\",\"Your Cart\":\"Your Cart\",\"Clear All\":\"Clear All\",\"The cart is currently empty\":\"The cart is currently empty\",\"Area\":\"Area\",\"Choose One\":\"Choose One\",\"Payment Method\":\"Payment Method\",\"Payment summary\":\"Payment summary\",\"Okay\":\"Okay\",\"TO\":\"TO\",\"Back\":\"Back\",\"To Menu\":\"To Menu\",\"Your Choice Of\":\"Your Choice Of\",\"Choose items from the list\":\"Choose items from the list\",\"Choose 1\":\"Choose 1\",\"Add-Ons\":\"Add-Ons\",\"Extra Note\":\"Extra Note\",\"Enter your extra note here\":\"Enter your extra note here\",\"To Cart\":\"To Cart\",\"Please, select number of\":\"Please, select number of\",\"not greater than the maximum selections\":\"not greater than the maximum selections\",\"not less than the minimum selections\":\"not less than the minimum selections\",\"Menu Category\":\"Menu Category\",\"Search by food name\":\"Search by food name\",\"Choose order type\":\"Choose order type\",\"Choose desired order type. We can deliver it to you or you can pick up it by yourself\":\"Choose desired order type. We can deliver it to you or you can pick up it by yourself\",\"Delivery area will be open ${delivery_open_hours}\":\"Delivery area will be open ${delivery_open_hours}\",\"Branches will be open ${branch_open_hours}\":\"Branches will be open ${branch_open_hours}\",\"Proceed\":\"Proceed\",\"Restaurant is not working now. Please comeback latter\":\"Restaurant is not working now. Please comeback latter\",\"Select add-ons\":\"Select add-ons\",\"Add special instruction\":\"Add special instruction\",\"Add to order\":\"Add to order\",\"Review order\":\"Review order\",\"Modify Order\":\"Modify Order\",\"Delivery details\":\"Delivery details\",\"Extra details\":\"Extra details\",\"Delivery time\":\"Delivery time\",\"SubTotal\":\"SubTotal\",\"Cash\":\"Cash\",\"Try again\":\"Try again\",\"Order confirmation\":\"Order confirmation\",\"Order status\":\"Order status\",\"Payment details\":\"Payment details\",\"Customer details\":\"Customer details\",\"Order details\":\"Order details\",\"Payment details not found\":\"Payment details not found\",\"Address Name\":\"Address Name\",\"Block\":\"Block\",\"Street\":\"Street\",\"Avenue\":\"Avenue\",\"Floor\":\"Floor\",\"Access Location\":\"Access Location\",\"Download Attachment\":\"Download Attachment\",\"Download Receipt\":\"Download Receipt\",\"Download Ticket\":\"Download Ticket\",\"Thank you!\":\"Thank you!\",\"Order description\":\"Order description\",\"Transaction expired, please contact administrator\":\"Transaction expired, please contact administrator\",\"Enter amount you wish to pay\":\"Enter amount you wish to pay\",\"Transaction not found\":\"Transaction not found\",\"Transaction cannot be paid as it is expired\":\"Transaction cannot be paid as it is expired\",\"Total amount\":\"Total amount\",\"Gateway fee\":\"Gateway fee\",\"Enter all details correctly\":\"Enter all details correctly\",\"Building/House No.\":\"Building/House No.\",\"Apartment/Office No.\":\"Apartment/Office No.\",\"PACI No.\":\"PACI No.\",\"From:\":\"From:\",\"To:\":\"To:\",\"Total Bill\":\"Total Bill\",\"Pay Now\":\"Pay Now\",\"Best Choice\":\"Best Choice\",\"fee will be applied\":\"fee will be applied\",\"Work\":\"Work\",\"Chalet\":\"Chalet\",\"Farm\":\"Farm\",\"Custom name\":\"Custom name\",\"Payment Request Details\":\"Payment Request Details\",\"Add Your Location\":\"Add Your Location\",\"Please contact the concerned department to complete the registration process.\":\"Please contact the concerned department to complete the registration process.\",\"Hello\":\"Hello\",\"Administration panel\":\"Administration panel\",\"Switch language\":\"Switch language\",\"Account settings\":\"Account settings\",\"Logout\":\"Logout\",\"Payment Request\":\"Payment Request\",\"Create\":\"Create\",\"Uploads\":\"Uploads\",\"Bulk create\":\"Bulk create\",\"Product bulk create\":\"Product bulk create\",\"Copy link\":\"Copy link\",\"Cannot fetch data. Most likely there is an issue with the configuration.\":\"Cannot fetch data. Most likely there is an issue with the configuration.\",\"Copied to clipboard\":\"Copied to clipboard\",\"Available Headers\":\"Available Headers\",\"Selected Headers\":\"Selected Headers\",\"rows per page\":\"rows per page\",\"Are you sure?\":\"Are you sure?\",\"Creation date\":\"Creation date\",\"Payment date\":\"Payment date\",\"ID\":\"ID\",\"The amount cannot be grea  ter than the available amount.\":\"The amount cannot be greater than the available amount.\",\"Initiator\":\"Initiator\",\"Import\":\"Import\",\"Filename\":\"Filename\",\"Rows/Imported rows\":\"Rows/Imported rows\",\"Error File\":\"Error File\",\"Error report\":\"Error report\",\"Reports\":\"Reports\",\"File\":\"File\",\"Progress\":\"Progress\",\"Attempted at\":\"Attempted at\",\"Bulk transaction ID\":\"Bulk transaction ID\",\"Bulk plugin is not properly configured. Ask system administrator for more details\":\"Bulk plugin is not properly configured. Ask system administrator for more details\",\"Example file\":\"Example file\",\"Files initiator\":\"Files initiator\",\"File name\":\"File name\",\"Is recurring\":\"Is recurring\",\"Rows/imported rows\":\"Rows/imported rows\",\"Uploaded by\":\"Uploaded by\",\"Uploaded on\":\"Uploaded on\",\"Is scheduled\":\"Is scheduled\",\"Is active\":\"Is active\",\"Required fields\":\"Required fields\",\"All fields\":\"All fields\",\"[Recurrence] required fields\":\"[Recurrence] required fields\",\"[Recurrence] all fields\":\"[Recurrence] all fields\",\"Bulk processing started\":\"Bulk processing started\",\"Upload processing started\":\"Upload processing started\",\"Download example\":\"Download example\",\"Start typing to search event\":\"Start typing to search event\",\"Select bulk file\":\"Select bulk file\",\"Download error reports\":\"Download error reports\",\"Are you sure you want to cancel booking?\":\"Are you sure you want to cancel booking?\",\"Edit Email address\":\"Edit Email address\",\"Send booking email again?\":\"Send booking email again?\",\"Save changes\":\"Save changes\",\"Booking Details\":\"Booking Details\",\"Ticket details\":\"Ticket details\",\"Event name:\":\"Event name:\",\"Event date:\":\"Event date:\",\"Created:\":\"Created:\",\"Email:\":\"Email:\",\"First name:\":\"First name:\",\"Last name:\":\"Last name:\",\"Phone:\":\"Phone:\",\"Purchase details\":\"Purchase details\",\"Booked places\":\"Booked places\",\"Ticket Name\":\"Ticket Name\",\"Slot\":\"Slot\",\"Tickets quantity\":\"Tickets quantity\",\"Referenced number\":\"Referenced number\",\"Purchased\":\"Purchased\",\"Scanned\":\"Scanned\",\"Send email\":\"Send email\",\"Customer Phone\":\"Customer Phone\",\"Full Name\":\"Full Name\",\"Event date\":\"Event date\",\"Attendance\":\"Attendance\",\"Partially Attended\":\"Partially Attended\",\"Purchase type\":\"Purchase type\",\"Export bookings\":\"Export bookings\",\"Edit booking\":\"Edit booking\",\"Additional Quantity\":\"Additional Quantity\",\"Select ticket type:\":\"Select ticket type:\",\"Branch Details\":\"Branch Details\",\"Edit\":\"Edit\",\"Minimum order sum\":\"Minimum order sum\",\"Branch name\":\"Branch name\",\"Accept\":\"Accept\",\"Order state\":\"Order state\",\"Are you sure to reject order?\":\"Are you sure to reject order?\",\"Are you sure to approve order?\":\"Are you sure to approve order?\",\"Catering details\":\"Catering details\",\"Pickup details\":\"Pickup details\",\"Pickup branch\":\"Pickup branch\",\"Transaction details\":\"Transaction details\",\"Order state has been changed successfully\":\"Order state has been changed successfully\",\"Order time\":\"Order time\",\"Order satisfied\":\"Order satisfied\",\"Invalid QR Code\":\"Invalid QR Code\",\"Product Bulk Create\":\"Product Bulk Create\",\"QR code is valid. Access granted\":\"QR code is valid. Access granted\",\"QR Code:\":\"QR Code:\",\"Customer Name:\":\"Customer Name:\",\"Slot:\":\"Slot:\",\"Subject\":\"Subject\",\"Support request\":\"Support request\",\"Report period\":\"Report period\",\"Total transactions\":\"Total transactions\",\"GMV\":\"GMV\",\"Overall Success Rate\":\"Overall Success Rate\",\"Average Transaction size\":\"Average Transaction size\",\"Success Rate\":\"Success Rate\",\"Product Wise Sales\":\"Product Wise Sales\",\"Recent Orders\":\"Recent Orders\",\"Recent actions\":\"Recent actions\",\"Password changed successfully\":\"Password changed successfully\",\"Notify the customer via SMS that he has to pay an invoice. Builtin phone field has to be present on the form.\":\"Notify the customer via SMS that he has to pay an invoice. Builtin phone field has to be present on the form.\",\"Send orders notification to this user?\":\"Send orders notification to this user?\",\"You successfully subscribe for new order notifications\":\"You successfully subscribe for new order notifications\",\"You successfully unsubscribe from new order notifications\":\"You successfully unsubscribe from new order notifications\",\"Page not found\":\"Page not found\",\"Forgot Password\":\"Forgot Password\",\"Back to login page\":\"Back to login page\",\"Reset Password\":\"Reset Password\",\"New password\":\"New password\",\"Password confirmation\":\"Password confirmation\",\"Minimum order is {min_order_sum} {plugin_config.currency}. \":\"Minimum order is {min_order_sum} {plugin_config.currency}. \",\"Restaurant isn't working now. \":\"Restaurant isn't working now. \",\"Add at least one item to your cart\":\"Add at least one item to your cart\",\"Reference date\":\"Reference date\",\"Name (FN LN)\":\"Name (FN LN)\",\"Auth ID\":\"Auth ID\",\"This payment transaction has no attempts.\":\"This payment transaction has no attempts.\",\"Customer payment page URL\":\"Customer payment page URL\",\"Account locked: too many login attempts. Please try again after 2 minutes with correct username and password.\":\"Account locked: too many login attempts. Please try again after 2 minutes with correct username and password.\",\"Please wait . . . . . . .\":\"Please wait . . . . . . .\",\"This might take a while\":\"This might take a while\",\"Thank you for your patience\":\"Thank you for your patience\",\"We are still working on it\":\"We are still working on it\",\"Credit card\":\"Credit card\",\"Ticket direct download link expired. Check your email and notify support if it isn't there\":\"Ticket direct download link expired. Check your email and notify support if it isn't there\",\"job's result expired (60 seconds)\":\"job's result expired (60 seconds)\",\"job was submitted, but exception occurred\":\"job was submitted, but exception occurred\",\"the job doesn't exist anymore\":\"the job doesn't exist anymore\",\"Apparently some error occurred. Please check email and if ticket isn't sent there please notify the support\":\"Apparently some error occurred. Please check email and if ticket isn't sent there please notify the support\",\"The glorious ticket is waiting for you. We're just getting it ready...\":\"The glorious ticket is waiting for you. We're just getting it ready...\",\"Please wait for a while, we are generating your booking ticket.\":\"Please wait for a while, we are generating your booking ticket.\",\"Pay\":\"Pay\",\"Order datails\":\"Order datails\",\"Event Date:\":\"Event Date:\",\"Not found.\":\"Not found.\",\"Author\":\"Author\",\"Link not found\":\"Link not found\",\"Statistics\":\"Statistics\",\"Valid\":\"Valid\",\"Reference Number\":\"Reference Number\",\"Shortener Username\":\"Shortener Username\",\"Shortener Password\":\"Shortener Password\",\"Booking is not available\":\"Booking is not available\",\"Product is not available now\":\"Product is not available now\",\"You cannot order more than {max_enabled_value} QTY per order\":\"You cannot order more than {max_enabled_value} QTY per order\",\"Use billing address for delivery\":\"Use billing address for delivery\",\"minutes\":\"minutes\",\"seconds\":\"seconds\",\"Generate QR code\":\"Generate QR code\",\"Store any kind of information related to the customer. It will be displayed on the payment related pages.\":\"Store any kind of information related to the customer. It will be displayed on the payment related pages.\",\"Stores\":\"Stores\",\"Destination store\":\"Destination store\",\"Deleted Transactions\":\"Deleted Transactions\",\"Delivery address\":\"Delivery address\",\"You cannot order more than {max_quantity} QTY per order\":\"You cannot order more than {max_quantity} QTY per order\",\"Thank you! Payment Completed.\":\"Thank you! Payment Completed.\",\"Add your Address and your location on map\":\"Add your Address and your location on map\",\"Building Type\":\"Building Type\",\"Total generated\":\"Total generated\",\"Total received\":\"Total received\",\"Net balance\":\"Net balance\",\"close\":\"close\",\"Additional Note\":\"Additional Note\",\"mins\":\"mins\",\"Enter email here\":\"Enter email here\",\"Restaurant is currently closed. Kindly, check it soon.\":\"Restaurant is currently closed. Kindly, check it soon..\",\"Real Estate\":\"Real Estate\",\"Real estate\":\"Real estate\",\"Manual Payment\":\"Manual Payment\",\"Change Price\":\"Change Price\",\"Advance Payment\":\"Advance Payment\",\"Terminate Contract\":\"Terminate Contract\",\"Renew Contract\":\"Renew Contract\",\"New Contract\":\"New Contract\",\"Add Unit Type\":\"Add Unit Type\",\"Unit Type List\":\"Unit Type List\",\"Add Tenant\":\"Add Tenant\",\"Rent Management\":\"Invoices\",\"Rent management\":\"Invoices\",\"Properties\":\"Properties\",\"Tenant Management\":\"Tenant and Contract Management\",\"Tenant management\":\"Tenant and Contract Management\",\"Property Management\":\"Property Management\",\"Property management\":\"Property management\",\"Unit Type\":\"Unit Type\",\"Unit Types\":\"Unit Types\",\"Advance Payment Request\":\"Advance Payment Request\",\"Terminate Contract Transaction\":\"Terminate Contract Transaction\",\"Edit Price\":\"Edit Price\",\"Edit Tenant\":\"Edit Tenant\",\"Add Property\":\"Add Property\",\"Edit Property\":\"Edit Property\",\"Edit Unit Type\":\"Edit Unit Type\",\"Edit Unit\":\"Edit Unit\",\"Renew Contract List\":\"Renew Contract List\",\"Renew contract list\":\"Renew contract list\",\"Ok\":\"Ok\",\"Rows Per Page\":\"Rows Per Page\",\"KD\":\"KD\",\"Id\":\"Id\",\"Property Name\":\"Property Name\",\"Tenant\":\"Tenant\",\"Old Start Date\":\"Old Start Date\",\"Old End Date\":\"Old End Date\",\"Old Amount\":\"Old Amount\",\"New Start Date\":\"New Start Date\",\"New End Date\":\"New End Date\",\"New Amount\":\"New Amount\",\"All\":\"All\",\"Late\":\"Late\",\"Manual Payment List\":\"Manual Payment List\",\"Manual payment list\":\"Manual Payment List\",\"Unit Number\":\"Unit Number\",\"Month\":\"Month\",\"Year\":\"Year\",\"Tenant Name\":\"Tenant Name\",\"Save\":\"Save\",\"Contract Id\":\"Contract Id\",\"Start Date\":\"Start Date\",\"End Date\":\"End Date\",\"Leave Date\":\"Leave Date\",\"Vacant\":\"Vacant\",\"Occupied\":\"Occupied\",\"Property\":\"Property\",\"Tenant History\":\"Tenant History\",\"Edit Price List\":\"Edit Price List\",\"Current Unit Amount\":\"Current Unit Amount\",\"Current Unit Discount\":\"Current Unit Discount\",\"Current Percentage/Fixed\":\"Current Percentage/Fixed\",\"Current Unit Net Amount\":\"Current Unit Net Amount\",\"New Unit Amount\":\"New Unit Amount\",\"New Unit Discount\":\"New Unit Discount\",\"New Percentage/Fixed\":\"New Percentage/Fixed\",\"New Unit Net Amount\":\"New Unit Net Amount\",\"Please select a property to load units\":\"Please select a property to load units.\",\"Percentage\":\"Percentage\",\"Fixed\":\"Fixed\",\"Property name is required\":\"Property name is required\",\"Unit number is required\":\"Unit number is required\",\"New unit amount is required\":\"New unit amount is required\",\"Advance Payment List\":\"Advance Payment List\",\"KWD\":\"KWD\",\"Unit Name\":\"Unit Name\",\"Please select a property\":\"Please select a property\",\"Please select a unit\":\"Please select a unit\",\"Property Name is required\":\"Property Name is required\",\"Unit is required\":\"Unit is required\",\"Tenant Name is required\":\"Tenant Name is required\",\"Unit Type Name\":\"Unit Type Name\",\"Unit Type Description\":\"Unit Type Description\",\"Commercial\":\"Commercial\",\"Action\":\"Action\",\"Is Commercial\":\"Is Commercial\",\"Is Residential\":\"Is Residential\",\"Both Commercial and Residential\":\"Both Commercial and Residential\",\"Add New Unit Type\":\"Add New Unit Type\",\"Close\":\"Close\",\"Reset\":\"Reset\",\"Export Unit Type\":\"Export Unit Type\",\"Something went wrong while fetching results\":\"Something went wrong while fetching results\",\"Unit Type Name (EN)\":\"Unit Type Name (EN)\",\"Unit Type Name (AR)\":\"Unit Type Name (AR)\",\"Contract Number\":\"Contract Number\",\"Late Payments\":\"Late Payments\",\"Property name\":\"Property name\",\"Load More\":\"Load More\",\"Tenant Name (EN)\":\"Tenant Name (EN)\",\"Tenant Name (AR)\":\"Tenant Name (AR)\",\"Civil ID Number\":\"Civil ID Number\",\"Upload Civil ID (Front)\":\"Upload Civil ID (Front)\",\"Upload\":\"Upload\",\"Upload Civil ID (Back)\":\"Upload Civil ID (Back)\",\"Passport Number\":\"Passport Number\",\"Upload Passport\":\"Upload Passport\",\"Nationality\":\"Nationality\",\"Email Address\":\"Email Address\",\"Generate New Payment Link\":\"Generate New Payment Link\",\"Total Paid\":\"Total Paid\",\"Pending Payments\":\"Pending Payments\",\"Payment Status\":\"Payment Status\",\"Rent Amount\":\"Rent Amount\",\"Export Rent Details\":\"Export Rent Details\",\"Total Paid This Month\":\"Total Paid This Month\",\"Unit Description\":\"Unit Description\",\"Total Units\":\"Total Units\",\"Rented Units\":\"Rented Units\",\"Vacant Units\":\"Vacant Units\",\"Is Cash Payment Allowed\":\"Is Cash Payment Allowed\",\"Rent\":\"Rent\",\"Lease\":\"Lease\",\"Buy\":\"Buy\",\"Property Details\":\"Property Details\",\"Unit Property Name (EN)\":\"Unit Property Name (EN)\",\"Unit Property Name (AR)\":\"Unit Property Name (AR)\",\"Allow cash payment\":\"Allow cash payment\",\"Add Unit Type With Units\":\"Add Unit Type With Units\",\"Termination Date\":\"Termination Date\",\"Terminate Contract List\":\"Terminate Contract List\",\"Old Contract Start Date\":\"Old Contract Start Date\",\"Old Contract End Date\":\"Old Contract End Date\",\"Terminate Date\":\"Terminate Date\",\"Actual Leave Date\":\"Actual Leave Date\",\"Leave Notice Date\":\"Leave Notice Date\",\"Contract start date is required\":\"Contract start date is required\",\"Contract end date is require\":\"Contract end date is require\",\"Termination date is required\":\"Termination date is required\",\"Actual leave date is required\":\"Actual leave date is required\",\"Leave notice date is require\":\"Leave notice date is require\",\"Old Contract Amount\":\"Old Contract Amount\",\"New Contract Start Date\":\"New Contract Start Date\",\"New Contract End Date\":\"New Contract End Date\",\"New Contract Amount\":\"New Contract Amount\",\"Edit Ppice\":\"Edit Ppice\",\"Contract end date is required\":\"Contract end date is required\",\"New contract start date is required\":\"New contract start date is required\",\"New contract end date is required\":\"New contract end date is required\",\"Contract Start Date\":\"Contract Start Date\",\"Payment Start Date\":\"Payment Start Date\",\"Contract End Date\":\"Contract End Date\",\"New Contract List\":\"New Contract List\",\"New contract list\":\"New contract list\",\"Created Date(From)\":\"Created Date(From)\",\"Created Date(To)\":\"Created Date(To)\",\"Start Date(From)\":\"Start Date(From)\",\"Start Date(To)\":\"Start Date(To)\",\"End Date(From)\":\"End Date(From)\",\"End Date(To)\":\"End Date(To)\",\"Terminate date (From)\":\"Terminate date (From)\",\"Terminate date (To)\":\"Terminate date (To)\",\"Invoice Amount\":\"Invoice Amount\",\"Units of Type\":\"Units of Type\",\"Add Or Edit Units\":\"Add Or Edit Units\",\"Edit Units\":\"Edit Units\",\"How many units would you like to add ?\":\"How many units would you like to add ?\",\"Save and Return\":\"Save and Return\",\"Kindly, enter both the price and the count of added records.\":\"Kindly, enter both the price and the count of added records.\",\"Applied successfully\":\"Applied successfully\",\"Created successfully\":\"Created successfully\",\"Payment start date is required\":\"Payment start date is required\",\"Tenant name is Required\":\"Tenant name is Required\",\"Tenant name(AR) is required\":\"Tenant name(AR) is required\",\"Tenant civil id is required\":\"Tenant civil id is required\",\"Tenant nationality is required\":\"Tenant nationality is required\",\"Unit Type Name can not be empty\":\"Unit Type Name can not be empty\",\"Unit Type Name(AR) can not be empty\":\"Unit Type Name(AR) can not be empty\",\"Unit Type Description can not be empty\":\"Unit Type Description can not be empty\",\"Action listings\":\"Action listings\",\"Current Percentage / Fixed\":\"Current Percentage / Fixed\",\"New Percentage / Fixed\":\"New Percentage / Fixed\",\"Old contract start date (From)\":\"Old contract start date (From)\",\"Old contract start date (To)\":\"Old contract start date (To)\",\"Old contract end date (From)\":\"Old contract end date (From)\",\"Old contract end date (To)\":\"Old contract end date (To)\",\"New contract start date (From)\":\"New contract start date (From)\",\"New contract start date (To)\":\"New contract start date (To)\",\"New contract end date (From)\":\"New contract end date (From)\",\"New contract end date (To)\":\"New contract end date (To)\",\"Contract New Start Date\":\"Contract New Start Date\",\"Contract New End Date\":\"Contract New End Date\",\"Paid Months/Year\":\"Paid Months/Year\",\"User\":\"User\",\"Change password\":\"Change password\",\"Bulk Uploads\":\"Bulk Uploads\",\"Bulk Details\":\"Bulk Details\",\"Bulk Dispatch logs\":\"Bulk Dispatch logs\",\"Bulk Transaction logs\":\"Bulk Transaction logs\",\"Catalogue Payment\":\"Catalogue Payment\",\"Food ordering\":\"Food ordering\",\"Payment Restriction\":\"Payment Restriction\",\"Property Detail\":\"Property Detail\",\"Configuration\":\"Configuration\",\"Shortly Expired Contracts\":\"Shortly Expired Contracts\",\"Advanced Settings\":\"Advanced Settings\",\"Plugin Configuration\":\"Plugin Configuration\",\"Gateway Name\":\"Gateway Name\",\"International Air Transport Association\":\"International Air Transport Association\",\"English\":\"English\",\"State Changed At\":\"State Changed At\",\"Select fields\":\"Select fields\",\"Capture in full\":\"Capture in full\",\"Void in full\":\"Void in full\",\"Refund in full\":\"Refund in full\",\"Acknowledge\":\"Acknowledge\",\"Make PG inquiry\":\"Make PG inquiry\",\"Disclose to merchant\":\"Disclose to merchant\",\"Is Amount Editable\":\"Is Amount Editable\",\"undefined Amount\":\"undefined Amount\",\"undefineded Successfully\":\"undefineded Successfully\",\"Disclosed To Merchant\":\"Disclosed To Merchant\",\"Reason to cancel order\":\"Reason to cancel order\",\"Costumer Phone\":\"Costumer Phone\",\"Cancellation Reason\":\"Cancellation Reason\",\"Last State\":\"Last State\",\"Contract\":\"Contract\",\"CONTRACT\":\"CONTRACT\",\"Contracts expire within\":\"Contracts expire within\",\"Kindly, select a date which is greater than or equal to actual leave date and leave notice date.\":\"Kindly, select a date which is greater than or equal to actual leave date and leave notice date.\",\"Kindly, select a date which is greater than or equal to leave notice date.\":\"Kindly, select a date which is greater than or equal to leave notice date.\",\"There is a pending amount that should be paid, are you sure that you want to continue.\":\"There is a pending amount that should be paid, are you sure that you want to continue.\",\"Kindly, select a date which is greater than the old contract end dat\":\"Kindly, select a date which is greater than the old contract end dat\",\"New unit net amount is required\":\"New unit net amount is required\",\"Kindly, select a date which is greater than the old contract end date\":\"Kindly, select a date which is greater than the old contract end date\",\"Hide email\":\"Hide email\",\"Individual proxy fields\":\"Individual proxy fields\",\"Day of the month to generate payment links\":\"Day of the month to generate payment links\",\"The Day of month to Genarate Payment Links field is required\":\"The Day of month to Genarate Payment Links field is required\",\"The Day of the month to suspend accessing payment links field is required\":\"The Day of the month to suspend accessing payment links field is required\",\"Day of the month to suspend accessing payment links\":\"Day of the month to suspend accessing payment links\",\"Default email is not valid\":\"Default email is not valid\",\"Fields\":\"Fields\",\"Required\":\"Required\",\"Validator\":\"Validator\",\"Custom detail field\":\"Custom detail field\",\"Itinerary display\":\"Itinerary display\",\"Label(EN)\":\"Label(EN)\",\"Label(AR)\":\"Label(AR)\",\"Main listings\":\"Main Listings\",\"Married?\":\"Married?\",\"No data available\":\"No data available\",\"Field Type\":\"Field Type\",\"The price value is not valid\":\"The price value is not valid\",\"The discount value is not valid\":\"The discount value isd\",\"The property_name field is required\":\"The property_name field is required\",\"The unit_number field is required\":\"The unit_number field is required\",\"Spouse nationality is required\":\"Spouse nationality is required\",\"Spouse civil id is required\":\"Spouse civil id is required\",\"Kindly, enter a contract leave date which is greater than the contract start date\":\"Kindly, enter a contract leave date which is greater than the contract start date\",\"New unit discount is required\":\"New unit discount is required\",\"The discount field is required\":\"The discount field is required\",\"The discount field must be numeric and may contain 3 decimal points\":\"The discount field must be numeric and may contain 3 decimal points\",\"New unit amount may only contain numeric characters\":\"New unit amount may only contain numeric characters\",\"New unit discount may only contain numeric characters\":\"New unit discount may only contain numeric characters\",\"Activation Month\":\"Activation Month\",\"Kindly, enter a contract notice date which is greater than the contract start date\":\"Kindly, enter a contract notice date which is greater than the contract start date\",\"Activation Year\":\"Activation Year\",\"Activation year is required\":\"Activation year is required\",\"Activation month is required\":\"Activation month is required\",\"Is Activated\":\"Is Activated\",\"Tenant name is required\":\"Tenant name is required\",\"Payment month is required\":\"Payment month is required\",\"Payment year is required\":\"Payment year is required\",\"Kindly, select a date which is greater than the contract start date.\":\"Kindly, select a date which is greater than the contract start date.\",\"Kindly, select a date which is greater than or equal to contract start date.\":\"Kindly, select a date which is greater than or equal to contract start date.\",\"Unit Type is required\":\"Unit Type is required\",\"Kindly, select unit type\":\"Kindly, select unit type\",\"Discount type is required\":\"Discount type is required\",\"ACTION\":\"ACTION\",\"ok\":\"ok\",\"real-estate\":\"real-estate\",\"Pg Codes\":\"Pg Codes\",\"Kindly, enter a contract end date which is greater than the contract start date\":\"Kindly, enter a contract end date which is greater than the contract start date\",\"Kindly, enter a contract payment start date which is greater than the contract start date\":\"Kindly, enter a contract payment start date which is greater than the contract start date\",\"Kindly, enter a contract end date which is greater than the contract start date and payment start date\":\"Kindly, enter a contract end date which is greater than the contract start date and payment start date\",\"Please enter decimal value upto 2 points\":\"Please enter decimal value upto 2 points\",\"Please enter decimal value upto 3 points\":\"Please enter decimal value upto 3 points\",\"Day of the month to generate links must be greater than day of the month to suspend payment links\":\"Day of the month to generate links must be greater than day of the month to suspend payment links\",\"Kindly, select a date which is greater than the contract start date\":\"Kindly, select a date which is greater than the contract start date\",\"New unit net amount may only contain positive decimal number\":\"New unit net amount may only contain positive decimal number\",\"Add new field\":\"Add new field\",\"Delete Field\":\"Delete Field\",\"Designates if this field is required\":\"Designates if this field is required\",\"Designates if this object is active, can be used and displayed on site.\":\"Designates if this object is active, can be used and displayed on site.\",\"Designates if the field represents customer details related data.\":\"Designates if the field represents customer details related data.\",\"Designate if this field shall appear in the itinerary table list at the invoice pdf.\":\"Designate if this field shall appear in the itinerary table list at the invoice pdf.\",\"Confirmation\":\"Confirmation\",\"Is Manual\":\"Is Manual\",\"The address field is required\":\"The address field is required\",\"SHOW\":\"SHOW\",\"HIDE\":\"HIDE\",\"Is Late Payment\":\"Is Late Payment\",\"Are you sure that you want to make a new contract?\":\"Are you sure that you want to make a new contract?\",\"Are you sure that you want to do this manual transaction?\":\"Are you sure that you want to do this manual transaction?\",\"Are you sure that you want to renew contract?\":\"Are you sure that you want to renew contract?\",\"Are you sure that you want to terminate this contract?\":\"Are you sure that you want to terminate this contract?\",\"Kindly, insert unit type with their units\":\"Kindly, insert unit type with their units\",\"Kindly, insert at least one unit type with their units\":\"Kindly, insert at least one unit type with their units\",\"The Day of month to genarate payment links must be between\":\"The Day of month to genarate payment links must be between {minValue}, {maxValue}\",\"The Day of the month to suspend accessing payment links must be 31 or less\":\"The Day of the month to suspend accessing payment links must be 31 or less\",\"Coupon Code\":\"Coupon Code\",\"Net\":\"Net\",\"Product Discount\":\"Product Discount\",\"Print Order\":\"Print Order\",\"all\":\"all\",\"No add ons specified\":\"No add ons specified\",\"No options specified\":\"No options specified\",\"Are you sure to clear cart\":\"Are you sure to clear cart\",\"Coupon Discount\":\"Coupon Discount\",\"Coupon Amount\":\"Coupon Amount\",\"Apply\":\"Apply\",\"Generated Reports\":\"Generated Reports\",\"Exported by\":\"Exported by\",\"Available until\":\"Available until\",\"Size\":\"Size\",\"Records\":\"Records\",\"Format\":\"Format\",\"Module\":\"Module\",\"Export Date\":\"Export Date\",\"Export Properties\":\"Export Properties\",\"Monthly paid amount cannot be greater than the original contract amount\":\"Monthly paid amount cannot be greater than the original contract amount\",\"Original Contract Amount\":\"Original Contract Amount\",\"Original Amount is Required\":\"Original Amount is Required\",\"Insurance Amount\":\"Insurance Amount\",\"Contract Reference\":\"Contract Reference\",\"Contract Ref\":\"Contract Ref\",\"Both suspended and resumed\":\"Both suspended and resumed\",\"Suspended\":\"Suspended\",\"Upload Contract\":\"Upload Contract\",\"New Original Contract Amount\":\"New Original Contract Amount\",\"Old Original Contract Amount\":\"Old Original Contract Amount\",\"Contract original amount is a required field\":\"Contract original amount is a required field\",\"New original contract amount is required\":\"New original contract amount is required\",\"file uploaded successfully\":\"file uploaded successfully\",\"No contract find against this unit\":\"No contract find against this unit\",\"Receipt Voucher Reference\":\"Receipt Voucher Reference\",\"The voucher_reference field may only contain alpha-numeric characters\":\"The voucher_reference field may only contain alpha-numeric characters\",\"Upload Logo\":\"Upload Logo\",\"Upload Signature\":\"Upload Signature\",\"Suspend Contract\":\"Suspend Contract\",\"Suspended Contract\":\"Suspended Contract\",\"Modify Contract\":\"Modify Contract\",\"Modified Contract\":\"Modified Contract\",\"Resume Contract\":\"Resume Contract\",\"Is Suspended\":\"Is Suspended\",\"Is Resumed\":\"Is Resumed\",\"Payment Reminder\":\"Payment Reminder\",\"Suspended Contracts\":\"Suspended Contracts\",\"Modified Contracts\":\"Modified Contracts\",\"Suspended/Resumed\":\"Suspended/Resumed\",\"Resumed\":\"Resumed\",\"Suspended Contract List\":\"Suspended Contract List\",\"Phone number is required\":\"Phone number is required\",\"The email field is required\":\"The email field is required\",\"The civil_id_number length must be 12\":\"The civil_id_number length must be 12\",\"The spouse.civil_id_number length must be 12\":\"The spouse.civil_id_number length must be 12\",\"Upload Mariage Certificate\":\"Upload Mariage Certificate\",\"Before Modified Amount\":\"Before Modified Amount\",\"After Modified Amount\":\"After Modified Amount\",\"Modify Payment\":\"Modify Payment\",\"Current Paid Amount\":\"Current Paid Amount\",\"New Paid Amount\":\"New Paid Amount\",\"Contract status\":\"Contract status\",\"Termination date\":\"Termination date\",\"Upload Attachement\":\"Upload Attachement\",\"Contract has been suspended\":\"Contract has been suspended\",\"Contract has been resumed\":\"Contract has been resumed\",\"Image have been downloaded successfully\":\"Image have been downloaded successfully\",\"You cannot suspend this contract as it is with the status\":\"You cannot suspend this contract as it is with the status {status}\",\"Customer has been notified\":\"Customer has been notified\",\"Your report is ready. You can download it from generated reports section\":\"Your report is ready. You can download it from generated reports section\",\"Reference number for the receipt voucher is required when performing manual payment\":\"Reference number for the receipt voucher is required when performing manual payment\",\"Print\":\"Print\",\"Download your generated PDF\":\"Download your generated PDF\",\"unit\":\"unit\",\"Reports are being generated\":\"Reports are being generated\",\"Download your generated Report\":\"Download your generated Report\",\"Generate Invoices\":\"Generate Invoices\",\"Generate Invoices and Send Payment Links\":\"Generate Invoices and Send Payment Links\",\"Show\":\"Show\",\"Not Generated Payments\":\"Not Generated Payments\",\"Generated Payments\":\"Generated Payments\",\"Contract No.\":\"Contract No.\",\"Last Month Paid\":\"Last Month Paid\",\"Original AMT\":\"Original AMT\",\"Paid AMT\":\"Paid AMT\",\"Actual Paid AMT\":\"Actual Paid AMT\",\"Civil ID\":\"Civil ID\",\"Count\":\"Count\",\"Totals\":\"Totals\",\"Actual Paid Amount\":\"Actual Paid Amount\",\"Manual payment records will be reset. Are you sure you want to continue\":\"Manual Payment Records Will Be Reset. Are You Sure You Want To Continue\",\"Request failed with status code\":\"Request failed with status code\",\"error:: Selected generating date is not in between activation date and current generate date\":\"error:: Selected generating date is not in between activation date and current generate date\",\"Actual paid amount should be less than or equal to the original amount\":\"Actual paid amount should be less than or equal to the original amount\",\"Your request is in progress\":\"Your request is in progress\",\"Number of days of stopping the generation worker before the expiration day\":\"Number of days of stopping the generation worker before the expiration day\",\"Manual generating payment records\":\"Manual generating payment records\",\"Contract Rollback\":\"Contract Roll back\",\"Renew Contract Rollback\":\"Renew Contract Roll back\",\"Manual Payment Roll back\":\"Manual Payment Roll back\",\"Terminate Contract Rollback\":\"Terminate Contract Rollback\",\"All the previous contracts should be terminated before making a new contract\":\"All the previous contracts should be terminated before making a new contract\",\"Easily Generate Invoices by selecting the date of the desired period\":\"Easily Generate Invoices by selecting the date of the desired period\",\"Manual Generating Payments\":\"Manual Generating Payments\",\"Contract, payment records are going to be deleted , are you sure you want to continue\":\"Contract, payment records are going to be deleted , are you sure you want to continue\",\"Loading..\":\"Loading..\",\"Are you sure that you want to roll back the manual payment?\":\"Are you sure that you want to roll back the manual payment?\",\"Are you sure that you want to roll back the contract termination\":\"Are you sure that you want to roll back the contract termination\",\"Worker\":\"Worker\",\"Release Manually Generating Lock\":\"Release Manually Generating Lock\",\"Generate Payments\":\"Generate Payments\",\"Are you sure that you want to generate the invoices\":\"Are you sure that you want to generate the invoices\",\"Invoice List\":\"Invoice List\",\"Loading\":\"Loading\",\"Historical\":\"Historical\",\"Running\":\"Running\",\"More Details\":\"More Details\",\"Invoices\":\"Invoices\",\"IS PAID\":\"IS PAID\",\"Is Paid\":\"Is Paid\",\"ORIGINAL AMOUNT\":\"ORIGINAL AMOUNT\",\"RECEIPT NO\":\"RECEIPT NO\",\"Main Listing\":\"Main Listing\",\"REMAINING INVOICE COUNT\":\"REMAINING INVOICE COUNT\",\"REMAINING INVOICE AMOUNT\":\"REMAINING INVOICE AMOUNT\",\"INVOICE PAID COUNT\":\"INVOICE PAID COUNT\",\"INVOICE PAID AMOUNT\":\"INVOICE PAID AMOUNT\",\"INVOICE NOT PAID COUNT\":\"INVOICE NOT PAID COUNT\",\"INVOICE NOT PAID AMOUNT\":\"INVOICE NOT PAID AMOUNT\",\"OB PAID COUNT\":\"OB PAID COUNT\",\"OB PAID AMOUNT\":\"OB PAID AMOUNT\",\"OB NOT PAID COUNT\":\"OB NOT PAID COUNT\",\"OB NOT PAID AMOUNT\":\"OB NOT PAID AMOUNT\",\"Expand\":\"Expand\",\"Late Payment\":\"Late Payment\",\"Paid Count\":\"Paid Count\",\"Pending Count\":\"Pending Count\",\"Total Count\":\"Total Count\",\"Are you sure that you want to send reminder notifications\":\"Are you sure that you want to send reminder notifications\",\"Notify Payments\":\"Notify Payments\",\"Civil Id\":\"Civil Id\",\"Voucher Number\":\"Voucher Number\",\"Is Missed\":\"Is Missed\",\"Is Open Balance\":\"Is Open Balance\",\"Grace Period Amount\":\"Grace Period Amount\",\"Missed Invoices Amount\":\"Missed Invoices Amount\",\"Contract Invoices\":\"Contract Invoices\",\"Sms Reminder\":\"Sms Reminder\",\"Email Reminder\":\"Email Reminder\",\"Display Section\":\"Display Section\",\"Payment Month\":\"Payment Month\",\"Payment Year\":\"Payment Year\",\"Receipt Voucher\":\"Receipt Voucher\",\"Total Paid Count\":\"Total Paid Count\",\"Total Pending Count\":\"Total Pending Count\",\"Not Paid/Is Suspended\":\"Not Paid/Is Suspended\",\"(Grace, Open, Missed) Amount\":\"(Grace, Open, Missed) Amount\",\"Missed\":\"Missed\",\"Normal\":\"Normal\",\"Grace Period\":\"Grace Period\",\"Open Balance\":\"Open Balance\",\"Generate Open Balance Invoices\":\"Generate Open Balance Invoices\",\"Release Manually generating Lock\":\"Release Manually generating Lock\",\"Express Search\":\"Express Search\",\"Download Link\":\"Download Link\"}");

/***/ }),

/***/ "single-spa":
/*!*****************************!*\
  !*** external "single-spa" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_single_spa__;

/***/ })

/******/ })
			);
		}
	};
});
//# sourceMappingURL=ottu-mf-root-config.js.map